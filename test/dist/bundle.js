/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/leaflet-layer.js":
/*!*******************************!*\
  !*** ./dist/leaflet-layer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: default, Marker, MarkersLayer, MarkersBufferLayer, Polyline, PolylinesLayer, PolylinesBufferLayer, Polygon, PolygonsLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _marker_Marker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./marker/Marker */ "./src/marker/Marker.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Marker", function() { return _marker_Marker__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./marker/MarkersLayer */ "./src/marker/MarkersLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MarkersLayer", function() { return _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./marker/MarkersBufferLayer */ "./src/marker/MarkersBufferLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MarkersBufferLayer", function() { return _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polyline/Polyline */ "./src/polyline/Polyline.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Polyline", function() { return _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyline/PolylinesLayer */ "./src/polyline/PolylinesLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolylinesLayer", function() { return _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./polyline/PolylinesBufferLayer */ "./src/polyline/PolylinesBufferLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolylinesBufferLayer", function() { return _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./polygon/Polygon */ "./src/polygon/Polygon.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./polygon/PolygonsLayer */ "./src/polygon/PolygonsLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolygonsLayer", function() { return _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__["default"]; });









/* harmony default export */ __webpack_exports__["default"] = ({
    Marker: _marker_Marker__WEBPACK_IMPORTED_MODULE_0__["default"],
    MarkersLayer: _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__["default"],
    MarkersBufferLayer: _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__["default"],
    Polyline: _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__["default"],
    PolylinesLayer: _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__["default"],
    PolylinesBufferLayer: _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__["default"],
    Polygon: _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__["default"],
    PolygonsLayer: _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__["default"],
});



/***/ }),

/***/ "./src/marker/Marker.ts":
/*!******************************!*\
  !*** ./src/marker/Marker.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Marker; });
class Marker extends L.Marker {
    constructor(latlng, options) {
        super(latlng, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/marker/MarkersBufferLayer.ts":
/*!******************************************!*\
  !*** ./src/marker/MarkersBufferLayer.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MarkersBufferLayer; });
/* harmony import */ var _MarkersLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MarkersLayer */ "./src/marker/MarkersLayer.ts");

class MarkersBufferLayer extends _MarkersLayer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(map, dataList, options, channelFunc) {
        super(map, dataList, options, channelFunc);
        this.type = 'markerBuffer';
        const defaultBufferOptions = {
            radius: 1000,
            stroke: true,
            weight: 1,
        };
        this.options = Object.assign(this.options, { bufferOptions: defaultBufferOptions }, options);
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.markerLayer) {
            this.map.removeLayer(this.markerLayer);
        }
        if (this.bufferLayer) {
            this.map.removeLayer(this.bufferLayer);
        }
        this.markerLayer = this.configMarkerLayer();
        this.bufferLayer = this.configBufferLayer();
        this.map.addLayer(this.markerLayer);
        this.map.addLayer(this.bufferLayer);
        return this;
    }
    configBufferLayer() {
        const groupLayer = L.layerGroup();
        this.markers.forEach((marker) => {
            const circleLayer = L.circle(marker.getLatLng(), this.options.bufferOptions);
            if (this.options.bufferTooltipAttr) {
                circleLayer.bindTooltip('' + marker.getData()[this.options.bufferTooltipAttr]);
            }
            groupLayer.addLayer(circleLayer);
        });
        return groupLayer;
    }
}


/***/ }),

/***/ "./src/marker/MarkersLayer.ts":
/*!************************************!*\
  !*** ./src/marker/MarkersLayer.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MarkersLayer; });
/* harmony import */ var _Marker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Marker */ "./src/marker/Marker.ts");

class MarkersLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            renderType: 'point',
            renderPointColorType: 'single',
            iconType: 'unicode',
            iconSize: [20, 20],
            iconClass: 'iconfont',
            iconColor: '#3388FF',
            iconAnchor: [10, 10],
            segmentedColors: ['#3388FF'],
            heatOptions: {
                max: 1,
                minOpacity: 1,
            },
        };
        this.type = 'marker';
        this.map = map;
        this.dataList = dataList;
        this.options = Object.assign({}, defaultOptions, options);
        this.channelFunc = channelFunc;
        this.visible = true;
        this.layer = null;
        this.focusedMarker = null;
        this.hoveredMarker = null;
        this.focusedDisplayMarker = null;
        this.markers = [];
        this.markerLayer = null;
        this.heatLayer = null;
        this.clusterLayer = null;
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initMarkers();
    }
    draw(options) {
        this.visible = true;
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        switch (this.options.renderType) {
            case 'point': {
                this.layer = this.configMarkerLayer();
                break;
            }
            case 'cluster': {
                this.layer = this.configClusterLayer();
                break;
            }
            case 'heat': {
                this.layer = this.configHeatLayer();
                break;
            }
            default: {
                throw new Error(`renderType 不支持"${this.options.renderType}"`);
            }
        }
        this.map.addLayer(this.layer);
        return this;
    }
    setOptions(options, redraw = false) {
        this.options = Object.assign(this.options, options);
        if (redraw) {
            this.redraw();
        }
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.markers.length <= 0) {
            return this.map.getBounds();
        }
        return this.markers.map((marker) => [marker.getLatLng().lat, marker.getLatLng().lng]);
    }
    destroy() {
        // TODO: 将事件移除
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.iconColor = color;
        this.redraw();
    }
    changeIcon(iconUnicode) {
        this.options.iconUnicode = iconUnicode;
        this.redraw();
    }
    pitch(id) {
        this.markers.forEach((marker) => {
            if (marker.getData().id === id) {
                marker.fire('click');
                return;
            }
        });
    }
    /** 渲染为散点图 */
    configMarkerLayer() {
        if (this.markerLayer) {
            this.markerLayer.remove();
        }
        // TODO: 优化
        this.initMarkers();
        const canvasIconLayer = L.canvasIconLayer({}).addTo(this.map);
        // 添加点击事件
        canvasIconLayer.addOnClickListener((_, [{ data: marker }]) => {
            this.markerClickHandler(marker);
        });
        // 添加 hover 事件
        canvasIconLayer.addOnHoverListener((_, [{ data: marker }]) => {
            // 之前有 hover 的关闭 tooltip
            if (this.hoveredMarker) {
                this.hoveredMarker.closeTooltip();
            }
            this.hoveredMarker = marker;
            if (this.hoveredMarker.getTooltip()) {
                // 如果已经设置 tooltip 直接展示 tooltip
                this.hoveredMarker.openTooltip();
            }
            else {
                // 否则绑定 tooltip 并展示
                if (this.options.tooltipAttr) {
                    this.hoveredMarker.bindTooltip('' + this.hoveredMarker.getData()[this.options.tooltipAttr]);
                }
            }
        });
        canvasIconLayer.addMarkers(this.markers);
        this.map.on('zoomstart', () => {
            if (!this.visible) {
                return;
            }
            if (this.type === 'marker') {
                if (this.options.renderType === 'point') {
                    this.map.removeLayer(this.markerLayer);
                }
            }
            else {
                this.map.removeLayer(this.markerLayer);
            }
        });
        this.map.on('zoomend', () => {
            if (!this.visible) {
                return;
            }
            if (this.type === 'marker') {
                if (this.options.renderType === 'point') {
                    this.map.addLayer(this.markerLayer);
                }
            }
            else {
                this.map.addLayer(this.markerLayer);
            }
        });
        // 解决初次渲染不出图标问题
        setTimeout(() => {
            this.map.panTo(this.map.getCenter());
        });
        this.markerLayer = canvasIconLayer;
        return this.markerLayer;
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    initMarkers() {
        this.markers = [];
        this.dataList.forEach((data) => {
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            const marker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"]([
                layer.getLatLng().lat,
                layer.getLatLng().lng,
            ], {
                icon: this.getMarkerIcon(data),
            });
            // 将相关值绑定到 marker上
            marker.setData(data);
            this.markers.push(marker);
        });
    }
    // 处理 marker 点击事件
    markerClickHandler(marker) {
        this.focusedMarker = marker;
        // 删除前一个放大图标
        if (this.focusedDisplayMarker) {
            this.focusedDisplayMarker.removeFrom(this.map);
        }
        // 生成当前放大图标
        this.focusedDisplayMarker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"](marker.getLatLng(), {
            icon: this.getLargerMarkerIcon(marker.getData()),
        });
        this.focusedDisplayMarker.addTo(this.map);
        this.focusedDisplayMarker
            .bindPopup(this.getPopupContent(marker.getData()))
            .openPopup();
        this.focusedDisplayMarker.on('popupclose', () => {
            this.focusedDisplayMarker.remove();
        });
        this.map.panTo(this.focusedMarker.getLatLng());
        this.channelFunc('on-click-marker', marker);
    }
    configClusterLayer() {
        // 展示聚合图层
        if (this.clusterLayer) {
            this.clusterLayer.remove();
        }
        this.clusterLayer = L.markerClusterGroup();
        this.clusterLayer.addLayers(this.markers.map((m) => {
            const marker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"](m.getLatLng(), {
                icon: this.getMarkerIcon(m.getData()),
            });
            marker.setData(m.getData());
            marker.bindTooltip('' + marker.getData()[this.options.tooltipAttr]);
            marker.on('click', () => {
                this.markerClickHandler(marker);
            });
            return marker;
        }));
        return this.clusterLayer;
    }
    /** 渲染为热力图 */
    configHeatLayer() {
        if (this.heatLayer) {
            this.heatLayer.remove();
        }
        this.markers.forEach((marker) => {
            const latLng = marker.getLatLng();
            const dimensionAttr = this.options.heatOptions && this.options.heatOptions.dimensionAttr;
            let alt = (dimensionAttr && marker.getData()[dimensionAttr]) ||
                this.options.heatOptions.max;
            if (typeof alt !== 'number') {
                alt = this.options.heatOptions.max;
            }
            marker.setLatLng(L.latLng(latLng.lat, latLng.lng, alt));
        });
        this.heatLayer = L.heatLayer(this.markers.map((it) => it.getLatLng()), 
        // TODO: 使用 mergeConfig 简化
        Object.assign({}, this.options.heatOptions, { minOpacity: 1 }));
        return this.heatLayer;
    }
    getLargerMarkerIcon(data) {
        return this._getMarkerIcon(data, true);
    }
    getMarkerIcon(data) {
        return this._getMarkerIcon(data, false);
    }
    /** 获取当前 marker 需要展示的 icon */
    _getMarkerIcon(data, isLarger) {
        const iconSize = this.options.iconSize;
        const iconAnchor = this.options.iconAnchor;
        const largerIconSize = [iconSize[0] * 1.5, iconSize[1] * 1.5];
        const largerIconAnchor = [iconAnchor[0] * 1.5, iconAnchor[1] * 1.5];
        const iconColor = this.options.iconColor;
        switch (this.options.iconType) {
            case 'image': {
                // return L.icon({
                //   iconUrl: this.options.iconImageUrl,
                //   iconSize: isLarger ? largerIconSize : iconSize,
                //   iconAnchor,
                // })
            }
            case 'font_class':
            case 'symbol':
            case 'unicode': {
                return L.divIcon({
                    html: this.getCustomIconHTML(data, {
                        iconSize: isLarger ? largerIconSize : iconSize,
                        iconColor,
                    }),
                    className: isLarger ? 'large-div-icon-marker' : '',
                    iconSize: isLarger ? largerIconSize : iconSize,
                    iconAnchor: isLarger ? largerIconAnchor : iconAnchor,
                });
            }
            default: {
                throw new Error(`图标类型不支持"${this.options.iconType}"`);
            }
        }
    }
    getCustomIconHTML(data, options) {
        if (this.options.iconRenderer) {
            options = Object.assign({}, this.options, options);
            return this.options.iconRenderer(data, options);
        }
        switch (this.options.renderPointColorType) {
            case 'single': {
                switch (this.options.iconType) {
                    // 使用 class
                    case 'font_class': {
                        return `
              <i class="${this.options.iconClass}"
                style="
                  color: ${options.iconColor};
                  font-size: ${options.iconSize[0]}px;
                "
                />
            `;
                    }
                    // 使用 svg
                    case 'symbol': {
                        return `
              <svg class="icon-symbol" aria-hidden="true">
                <use xlink:href="${this.options.iconSymbol}" />
              </svg>
            `;
                    }
                    // 使用 unicode
                    case 'unicode': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${options.iconColor};
                  font-size: ${options.iconSize[0]}px;
                "
                >
                ${this.options.iconUnicode}
              </i>
            `;
                    }
                }
                break;
            }
            case 'segmented': {
                switch (this.options.iconType) {
                    // 使用 class
                    case 'font_class': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${this.getSegmentedMarkerColor(data)};
                  font-size: ${options.iconSize[0]}px;
                "
                />
            `;
                    }
                    // 使用 svg
                    case 'symbol': {
                        return `
              <svg class="icon-symbol" aria-hidden="true">
                <use xlink:href="${this.options.iconSymbol}" />
              </svg>
            `;
                    }
                    // 使用 unicode
                    case 'unicode': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${this.getSegmentedMarkerColor(data)};
                  font-size: ${options.iconSize[0]}px;
                "
                >
                ${this.options.iconUnicode}
              </i>
            `;
                    }
                }
                break;
            }
            default: {
                throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`);
            }
        }
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
    getSegmentedMarkerColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
    getPopupContent(data) {
        if (!this.options.popupAttr) {
            return '';
        }
        return `${this.options.popupAttr}: ${data[this.options.popupAttr]}`;
    }
}


/***/ }),

/***/ "./src/polygon/Polygon.ts":
/*!********************************!*\
  !*** ./src/polygon/Polygon.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Polygon; });
class Polygon extends L.Polygon {
    constructor(latlngs, options) {
        super(latlngs, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/polygon/PolygonsLayer.ts":
/*!**************************************!*\
  !*** ./src/polygon/PolygonsLayer.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolygonsLayer; });
/* harmony import */ var _Polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Polygon */ "./src/polygon/Polygon.ts");

class PolygonsLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            color: '#3388FF',
            fillColor: '#3388FF',
            renderPolygonColorType: 'single',
            segmentedColors: ['#3388FF'],
        };
        this.type = 'polygon';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polygons = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolygon = null
        this.options = Object.assign({}, defaultOptions, options);
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initPolygons();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolygonLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polygons.length <= 0) {
            return this.map.getBounds();
        }
        return this.polygons.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polygons[0].getBounds());
    }
    destroy() {
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.fillColor = color;
        this.redraw();
    }
    pitch(id) {
        this.polygons.forEach((polygon) => {
            if (polygon.getData().id === id) {
                polygon.fire('click');
                return;
            }
        });
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    initPolygons() {
        this.dataList.forEach((data) => {
            this.cacheSegmentParams();
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            const polygon = new _Polygon__WEBPACK_IMPORTED_MODULE_0__["default"](layer.getLatLngs());
            // 将相关值绑定到 marker上
            polygon.setData(data);
            this.polygons.push(polygon);
        });
    }
    configPolygonLayer() {
        this.polygonLayer = L.layerGroup();
        this.polygons.forEach((polygon) => {
            let color = this.options.color;
            if (this.options.renderPolygonColorType === 'segmented') {
                color = this.getSegmentedPolygonColor(polygon.getData());
            }
            const options = Object.assign({}, this.options, {
                color,
            });
            // 重新应用 options
            const newPolygon = new _Polygon__WEBPACK_IMPORTED_MODULE_0__["default"](polygon.getLatLngs(), options);
            newPolygon.setData(polygon.getData());
            newPolygon.on('click', () => {
                this.polygonClickHandler(polygon);
            });
            if (this.options.tooltipAttr) {
                newPolygon.bindTooltip(this.getToolTipContent(newPolygon.getData()));
            }
            this.polygonLayer.addLayer(newPolygon);
        });
        return this.polygonLayer;
    }
    polygonClickHandler(polygon) {
        // this.focusedPolygon = polygon
        this.channelFunc('on-click-polygon', polygon);
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
    getSegmentedPolygonColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
}


/***/ }),

/***/ "./src/polyline/Polyline.ts":
/*!**********************************!*\
  !*** ./src/polyline/Polyline.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Polyline; });
class Polyline extends L.Polyline {
    constructor(latlngs, options) {
        super(latlngs, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/polyline/PolylinesBufferLayer.ts":
/*!**********************************************!*\
  !*** ./src/polyline/PolylinesBufferLayer.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylinesBufferLayer; });
/* harmony import */ var _PolylinesLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PolylinesLayer */ "./src/polyline/PolylinesLayer.ts");

class PolylinesBufferLayer extends _PolylinesLayer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(map, dataList, options, channelFunc) {
        super(map, dataList, options, channelFunc);
        const defaultOptions = {
            renderPolylineColorType: 'single',
            segmentedColors: ['#3388FF'],
            corridor: 100,
            color: '#3388FF',
            opacity: 0.5,
        };
        this.type = 'polylineBuffer';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polylines = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolyline = null
        this.options = Object.assign({}, defaultOptions, options);
        this.initPolylines();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolylineBufferLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polylines.length <= 0) {
            return this.map.getBounds();
        }
        return this.polylines.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polylines[0].getBounds());
    }
    changeColor(color) {
        this.options.color = color;
        this.redraw();
    }
    configPolylineBufferLayer() {
        this.polylineLayer = L.layerGroup();
        this.polylines.forEach((polyline) => {
            polyline.on('click', () => {
                this.polylineClickHandler(polyline);
            });
            const options = Object.assign({}, this.options, {
                color: this.options.renderPolylineColorType === 'single'
                    ? this.options.color
                    : this.getSegmentedPolylineColor(polyline.getData()),
            });
            const polylineBuffer = L.corridor(polyline.getLatLngs().map((latLng) => L.latLng([latLng.lat, latLng.lng])), options);
            if (this.options.tooltipAttr) {
                polylineBuffer.bindTooltip(this.getToolTipContent(polyline.getData()));
            }
            this.polylineLayer.addLayer(polylineBuffer);
        });
        return this.polylineLayer;
    }
}


/***/ }),

/***/ "./src/polyline/PolylinesLayer.ts":
/*!****************************************!*\
  !*** ./src/polyline/PolylinesLayer.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylinesLayer; });
/* harmony import */ var _Polyline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Polyline */ "./src/polyline/Polyline.ts");

class PolylinesLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            color: '#3388FF',
            renderPolylineColorType: 'single',
            segmentedColors: ['#3388FF'],
        };
        this.type = 'polyline';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polylines = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolyline = null
        this.options = Object.assign({}, defaultOptions, options);
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initPolylines();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolylineLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polylines.length <= 0) {
            return this.map.getBounds();
        }
        return this.polylines.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polylines[0].getBounds());
    }
    destroy() {
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.fillColor = color;
        this.redraw();
    }
    pitch(id) {
        this.polylines.forEach((polyline) => {
            if (polyline.getData().id === id) {
                polyline.fire('click');
                return;
            }
        });
    }
    initPolylines() {
        this.dataList.forEach((data) => {
            this.cacheSegmentParams();
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            let fillColor = this.options.fillColor;
            if (this.options.renderPolylineColorType === 'segmented') {
                fillColor = this.getSegmentedPolylineColor(data);
            }
            const polyline = new _Polyline__WEBPACK_IMPORTED_MODULE_0__["default"](layer.getLatLngs(), Object.assign({}, this.options, { fillColor }));
            // 将相关值绑定到 marker上
            polyline.setData(data);
            this.polylines.push(polyline);
        });
    }
    getSegmentedPolylineColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
    polylineClickHandler(polyline) {
        // this.focusedPolyline = polyline
        this.channelFunc('on-click-polyline', polyline);
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    configPolylineLayer() {
        this.polylineLayer = L.layerGroup();
        this.polylines.forEach((polyline) => {
            const options = Object.assign({}, this.options, {
                color: this.getSegmentedPolylineColor(polyline.getData()),
            });
            const newPolyline = new _Polyline__WEBPACK_IMPORTED_MODULE_0__["default"](polyline.getLatLngs(), options);
            newPolyline.on('click', () => {
                this.polylineClickHandler(polyline);
            });
            newPolyline.setData(polyline.getData());
            if (this.options.tooltipAttr) {
                newPolyline.bindTooltip(this.getToolTipContent(newPolyline.getData()));
            }
            this.polylineLayer.addLayer(newPolyline);
        });
        return this.polylineLayer;
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
}


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/ansi-colors/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-colors/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const colors = { enabled: true, visible: true, styles: {}, keys: {} };

if ('FORCE_COLOR' in process.env) {
  colors.enabled = process.env.FORCE_COLOR !== '0' ? true : false;
}

const ansi = codes => {
  codes.open = `\u001b[${codes[0]}m`;
  codes.close = `\u001b[${codes[1]}m`;
  codes.regex = new RegExp(`\\u001b\\[${codes[1]}m`, 'g');
  return codes;
};

const wrap = (style, str, nl) => {
  let { open, close, regex } = style;
  str = open + (str.includes(close) ? str.replace(regex, open) : str) + close;
  // see https://github.com/chalk/chalk/pull/92, thanks to the
  // chalk contributors for this fix. However, we've confirmed that
  // this issue is also present in Windows terminals
  return nl ? str.replace(/\r?\n/g, `${close}$&${open}`) : str;
};

const style = (input, stack) => {
  if (input === '' || input == null) return '';
  if (colors.enabled === false) return input;
  if (colors.visible === false) return '';
  let str = '' + input;
  let nl = str.includes('\n');
  let n = stack.length;
  while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);
  return str;
};

const define = (name, codes, type) => {
  colors.styles[name] = ansi(codes);
  let t = colors.keys[type] || (colors.keys[type] = []);
  t.push(name);

  Reflect.defineProperty(colors, name, {
    get() {
      let color = input => style(input, color.stack);
      Reflect.setPrototypeOf(color, colors);
      color.stack = this.stack ? this.stack.concat(name) : [name];
      return color;
    }
  });
};

define('reset', [0, 0], 'modifier');
define('bold', [1, 22], 'modifier');
define('dim', [2, 22], 'modifier');
define('italic', [3, 23], 'modifier');
define('underline', [4, 24], 'modifier');
define('inverse', [7, 27], 'modifier');
define('hidden', [8, 28], 'modifier');
define('strikethrough', [9, 29], 'modifier');

define('black', [30, 39], 'color');
define('red', [31, 39], 'color');
define('green', [32, 39], 'color');
define('yellow', [33, 39], 'color');
define('blue', [34, 39], 'color');
define('magenta', [35, 39], 'color');
define('cyan', [36, 39], 'color');
define('white', [37, 39], 'color');
define('gray', [90, 39], 'color');
define('grey', [90, 39], 'color');

define('bgBlack', [40, 49], 'bg');
define('bgRed', [41, 49], 'bg');
define('bgGreen', [42, 49], 'bg');
define('bgYellow', [43, 49], 'bg');
define('bgBlue', [44, 49], 'bg');
define('bgMagenta', [45, 49], 'bg');
define('bgCyan', [46, 49], 'bg');
define('bgWhite', [47, 49], 'bg');

define('blackBright', [90, 39], 'bright');
define('redBright', [91, 39], 'bright');
define('greenBright', [92, 39], 'bright');
define('yellowBright', [93, 39], 'bright');
define('blueBright', [94, 39], 'bright');
define('magentaBright', [95, 39], 'bright');
define('cyanBright', [96, 39], 'bright');
define('whiteBright', [97, 39], 'bright');

define('bgBlackBright', [100, 49], 'bgBright');
define('bgRedBright', [101, 49], 'bgBright');
define('bgGreenBright', [102, 49], 'bgBright');
define('bgYellowBright', [103, 49], 'bgBright');
define('bgBlueBright', [104, 49], 'bgBright');
define('bgMagentaBright', [105, 49], 'bgBright');
define('bgCyanBright', [106, 49], 'bgBright');
define('bgWhiteBright', [107, 49], 'bgBright');

/* eslint-disable no-control-regex */
// ansiRegex modified from node.js readline: https://git.io/fNWFP, which itself
// is adopted from regex used for ansi escape code splitting in ansi-regex
// Adopted from https://github.com/chalk/ansi-regex/blob/master/index.js
// License: MIT, authors: @sindresorhus, Qix-, and arjunmehta Matches all
// ansi escape code sequences in a string
colors.ansiRegex = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/gm;
colors.hasAnsi = str => str && typeof str === 'string' && colors.ansiRegex.test(str);
colors.unstyle = str => typeof str === 'string' ? str.replace(colors.ansiRegex, '') : str;
colors.none = colors.clear = str => str; // noop, for programmatic usage
colors.stripColor = colors.unstyle;
colors.hasColor = colors.hasAnsi;
colors.symbols = __webpack_require__(/*! ./symbols */ "./node_modules/ansi-colors/symbols.js");
module.exports = colors;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/ansi-colors/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/ansi-colors/symbols.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const isWindows = process.platform === 'win32';
const isLinux = process.platform === 'linux';

const windows = {
  bullet: '•',
  check: '√',
  cross: '×',
  ellipsis: '...',
  heart: '❤',
  info: 'i',
  line: '─',
  middot: '·',
  minus: '－',
  plus: '＋',
  question: '?',
  questionSmall: '﹖',
  pointer: '>',
  pointerSmall: '»',
  warning: '‼'
};

const other = {
  ballotCross: '✘',
  bullet: '•',
  check: '✔',
  cross: '✖',
  ellipsis: '…',
  heart: '❤',
  info: 'ℹ',
  line: '─',
  middot: '·',
  minus: '－',
  plus: '＋',
  question: '?',
  questionFull: '？',
  questionSmall: '﹖',
  pointer: isLinux ? '▸' : '❯',
  pointerSmall: isLinux ? '‣' : '›',
  warning: '⚠'
};

module.exports = isWindows ? windows : other;
Reflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });
Reflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./test/src/app.js":
/*!*************************!*\
  !*** ./test/src/app.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _leaflet_layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../leaflet-layer */ "./dist/leaflet-layer.js");
/* harmony import */ var _leaflet_layer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_leaflet_layer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var ansi_colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ansi-colors */ "./node_modules/ansi-colors/index.js");
/* harmony import */ var ansi_colors__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ansi_colors__WEBPACK_IMPORTED_MODULE_1__);
// @ts-ignore



// @ts-ignore
const L = window.L

var position = new L.LatLng(39.90778, 116.401216)
var map = L.map('map').setView(position, 13)

L.tileLayer
  .chinaProvider('GaoDe.Normal.Map', { maxZoom: 18, minZoom: 3 })
  .addTo(map)

// L.marker([32.0304, 118.7968], {
//   icon: L.divIcon({
//     html: '<i class="iconfont" style="font-size: 40px;">&#xe655;</i>',
//     iconSize: [40, 40],
//     className: 'test',
//   }),
// }).addTo(map)
// L.marker([32.0304, 118.7968]).addTo(map)
var dataList = [
  {
    geometry: {
      type: 'Point',
      coordinates: [116.401216, 39.90778],
    },
    price: 2,
  },
]

const layer = new _leaflet_layer__WEBPACK_IMPORTED_MODULE_0___default.a.MarkersLayer(
  map,
  dataList,
  {
    iconUnicode: '&#xe655;',
    iconSize: [20, 20],
    iconAnchor: [10, 20],
    popupAttr: 'price',
    tooltipAttr: 'price',
  },
  function(eventName) {
    console.log(eventName)
  }
)

layer.draw()

L.marker(L.latLng(39.90778, 116.401216)).addTo(map)

L.marker(L.latLng(39.90778, 116.401216), {
  icon: L.divIcon({
    html: `
    <i
      class="iconfont"
      style="
        color: red;
        font-size: 20px;
      "
      >
      &#xe655;
    </i>
  `,
  }),
}).addTo(map)
window.layer = layer


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9sZWFmbGV0LWxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnNpLWNvbG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5zaS1jb2xvcnMvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvc3JjL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsRkE7QUFDQSxJQUFJLElBQXlEO0FBQzdEO0FBQ0EsTUFBTSxFQUsyQjtBQUNqQyxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usa0JBQWtCO0FBQ2xGO0FBQ0EseURBQXlELGNBQWM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUNBQWlDO0FBQ2xGLHdIQUF3SCxtQkFBbUIsRUFBRTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCLEVBQUU7QUFDL0QseUNBQXlDLGVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwrREFBK0Q7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLCtEQUErRCxFQUFFOztBQUVoSztBQUNBLHFHQUFxRyxxRUFBcUUsRUFBRTs7QUFFNUs7QUFDQSwyR0FBMkcsMkVBQTJFLEVBQUU7O0FBRXhMO0FBQ0EsaUdBQWlHLG1FQUFtRSxFQUFFOztBQUV0SztBQUNBLHVHQUF1Ryx5RUFBeUUsRUFBRTs7QUFFbEw7QUFDQSw2R0FBNkcsK0VBQStFLEVBQUU7O0FBRTlMO0FBQ0EsZ0dBQWdHLGlFQUFpRSxFQUFFOztBQUVuSztBQUNBLHNHQUFzRyx1RUFBdUUsRUFBRTs7Ozs7Ozs7OztBQVUvSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7O0FBSUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyxlQUFlLEVBQUU7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRywyQkFBMkIsRUFBRTtBQUM5SDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsc0NBQXNDO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLHFCQUFxQixFQUFFO0FBQ3hIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHdCQUF3QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0EsaURBQWlELGVBQWU7QUFDaEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxpREFBaUQsZUFBZTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCLDZCQUE2QixnQkFBZ0I7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSwyQ0FBMkMsc0JBQXNCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix1QkFBdUI7QUFDakQ7QUFDQSwyQkFBMkI7QUFDM0IsK0JBQStCLG9CQUFvQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHdCQUF3QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQSwyQkFBMkI7QUFDM0IsK0JBQStCLG9CQUFvQjtBQUNuRDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQSwyQkFBMkI7QUFDM0IsK0JBQStCLG9CQUFvQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLHdCQUF3QjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1QkFBdUI7QUFDaEQ7QUFDQSwyQkFBMkI7QUFDM0IsK0JBQStCLG9CQUFvQjtBQUNuRDtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGtDQUFrQztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUIsSUFBSSw2QkFBNkI7QUFDMUU7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyxnQkFBZ0IsRUFBRTtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLHNCQUFzQixFQUFFO0FBQ3pIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLGlCQUFpQixFQUFFO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpR0FBaUcsNkJBQTZCLEVBQUU7QUFDaEk7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpR0FBaUcsdUJBQXVCLEVBQUU7QUFDMUg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1SEFBdUgsaUJBQWlCLFlBQVk7QUFDcEo7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQLFVBQVU7QUFDVixDQUFDO0FBQ0QsMkNBQTJDLGNBQWMsdXhqRjs7Ozs7Ozs7Ozs7O0FDaGxDekQsK0NBQWE7O0FBRWIsZ0JBQWdCLHlDQUF5QyxVQUFVOztBQUVuRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsU0FBUztBQUNsQywwQkFBMEIsU0FBUztBQUNuQyx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBOztBQUVBO0FBQ0EsT0FBTyxxQkFBcUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsTUFBTSxJQUFJLEtBQUs7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsWUFBWSxJQUFJLElBQUksTUFBTSxJQUFJO0FBQ3RFO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLHdEQUFXO0FBQ3BDOzs7Ozs7Ozs7Ozs7OztBQzlHQSwrQ0FBYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQsb0NBQW9DO0FBQ3ZGLGlEQUFpRCxrQ0FBa0M7Ozs7Ozs7Ozs7Ozs7QUM3Q25GO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7Ozs7Ozs7Ozs7Ozs7QUN2THRDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMrQztBQUNkOztBQUVqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsMEJBQTBCO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQsVUFBVTtBQUNuRTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0JBQWtCLHFEQUFVO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0QiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi90ZXN0L3NyYy9hcHAuanNcIik7XG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJsZWFmbGV0TWFwXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImxlYWZsZXRNYXBcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC50c1wiKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL3NyYy9pbmRleC50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9pbmRleC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0LCBNYXJrZXIsIE1hcmtlcnNMYXllciwgTWFya2Vyc0J1ZmZlckxheWVyLCBQb2x5bGluZSwgUG9seWxpbmVzTGF5ZXIsIFBvbHlsaW5lc0J1ZmZlckxheWVyLCBQb2x5Z29uLCBQb2x5Z29uc0xheWVyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9tYXJrZXJfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcmtlci9NYXJrZXIgKi8gXCIuL3NyYy9tYXJrZXIvTWFya2VyLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWFya2VyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX21hcmtlcl9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX21hcmtlcl9NYXJrZXJzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWFya2VyL01hcmtlcnNMYXllciAqLyBcIi4vc3JjL21hcmtlci9NYXJrZXJzTGF5ZXIudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNYXJrZXJzTGF5ZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfbWFya2VyX01hcmtlcnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbWFya2VyX01hcmtlcnNCdWZmZXJMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tYXJrZXIvTWFya2Vyc0J1ZmZlckxheWVyICovIFwiLi9zcmMvbWFya2VyL01hcmtlcnNCdWZmZXJMYXllci50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1hcmtlcnNCdWZmZXJMYXllclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9tYXJrZXJfTWFya2Vyc0J1ZmZlckxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJkZWZhdWx0XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9wb2x5bGluZV9Qb2x5bGluZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wb2x5bGluZS9Qb2x5bGluZSAqLyBcIi4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9seWxpbmVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfcG9seWxpbmVfUG9seWxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcImRlZmF1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvbHlsaW5lX1BvbHlsaW5lc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BvbHlsaW5lL1BvbHlsaW5lc0xheWVyICovIFwiLi9zcmMvcG9seWxpbmUvUG9seWxpbmVzTGF5ZXIudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb2x5bGluZXNMYXllclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9wb2x5bGluZV9Qb2x5bGluZXNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiZGVmYXVsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcG9seWxpbmVfUG9seWxpbmVzQnVmZmVyTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcG9seWxpbmUvUG9seWxpbmVzQnVmZmVyTGF5ZXIgKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNCdWZmZXJMYXllci50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBvbHlsaW5lc0J1ZmZlckxheWVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3BvbHlsaW5lX1BvbHlsaW5lc0J1ZmZlckxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJkZWZhdWx0XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9wb2x5Z29uX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcG9seWdvbi9Qb2x5Z29uICovIFwiLi9zcmMvcG9seWdvbi9Qb2x5Z29uLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9seWdvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9wb2x5Z29uX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcImRlZmF1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvbHlnb25fUG9seWdvbnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wb2x5Z29uL1BvbHlnb25zTGF5ZXIgKi8gXCIuL3NyYy9wb2x5Z29uL1BvbHlnb25zTGF5ZXIudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb2x5Z29uc0xheWVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3BvbHlnb25fUG9seWdvbnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fW1wiZGVmYXVsdFwiXTsgfSk7XG5cblxuXG5cblxuXG5cblxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJkZWZhdWx0XCJdID0gKHtcbiAgICBNYXJrZXI6IF9tYXJrZXJfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdLFxuICAgIE1hcmtlcnNMYXllcjogX21hcmtlcl9NYXJrZXJzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcImRlZmF1bHRcIl0sXG4gICAgTWFya2Vyc0J1ZmZlckxheWVyOiBfbWFya2VyX01hcmtlcnNCdWZmZXJMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiZGVmYXVsdFwiXSxcbiAgICBQb2x5bGluZTogX3BvbHlsaW5lX1BvbHlsaW5lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJkZWZhdWx0XCJdLFxuICAgIFBvbHlsaW5lc0xheWVyOiBfcG9seWxpbmVfUG9seWxpbmVzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcImRlZmF1bHRcIl0sXG4gICAgUG9seWxpbmVzQnVmZmVyTGF5ZXI6IF9wb2x5bGluZV9Qb2x5bGluZXNCdWZmZXJMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiZGVmYXVsdFwiXSxcbiAgICBQb2x5Z29uOiBfcG9seWdvbl9Qb2x5Z29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJkZWZhdWx0XCJdLFxuICAgIFBvbHlnb25zTGF5ZXI6IF9wb2x5Z29uX1BvbHlnb25zTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1tcImRlZmF1bHRcIl0sXG59KTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL21hcmtlci9NYXJrZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9tYXJrZXIvTWFya2VyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWFya2VyOyB9KTtcbmNsYXNzIE1hcmtlciBleHRlbmRzIEwuTWFya2VyIHtcbiAgICBjb25zdHJ1Y3RvcihsYXRsbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobGF0bG5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhO1xuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9tYXJrZXIvTWFya2Vyc0J1ZmZlckxheWVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvbWFya2VyL01hcmtlcnNCdWZmZXJMYXllci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1hcmtlcnNCdWZmZXJMYXllcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01hcmtlcnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NYXJrZXJzTGF5ZXIgKi8gXCIuL3NyYy9tYXJrZXIvTWFya2Vyc0xheWVyLnRzXCIpO1xuXG5jbGFzcyBNYXJrZXJzQnVmZmVyTGF5ZXIgZXh0ZW5kcyBfTWFya2Vyc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdIHtcbiAgICBjb25zdHJ1Y3RvcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYykge1xuICAgICAgICBzdXBlcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYyk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdtYXJrZXJCdWZmZXInO1xuICAgICAgICBjb25zdCBkZWZhdWx0QnVmZmVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJhZGl1czogMTAwMCxcbiAgICAgICAgICAgIHN0cm9rZTogdHJ1ZSxcbiAgICAgICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIHsgYnVmZmVyT3B0aW9uczogZGVmYXVsdEJ1ZmZlck9wdGlvbnMgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGRyYXcob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWFya2VyTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMubWFya2VyTGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlckxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcih0aGlzLmJ1ZmZlckxheWVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtlckxheWVyID0gdGhpcy5jb25maWdNYXJrZXJMYXllcigpO1xuICAgICAgICB0aGlzLmJ1ZmZlckxheWVyID0gdGhpcy5jb25maWdCdWZmZXJMYXllcigpO1xuICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLm1hcmtlckxheWVyKTtcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5idWZmZXJMYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25maWdCdWZmZXJMYXllcigpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBMYXllciA9IEwubGF5ZXJHcm91cCgpO1xuICAgICAgICB0aGlzLm1hcmtlcnMuZm9yRWFjaCgobWFya2VyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaXJjbGVMYXllciA9IEwuY2lyY2xlKG1hcmtlci5nZXRMYXRMbmcoKSwgdGhpcy5vcHRpb25zLmJ1ZmZlck9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWZmZXJUb29sdGlwQXR0cikge1xuICAgICAgICAgICAgICAgIGNpcmNsZUxheWVyLmJpbmRUb29sdGlwKCcnICsgbWFya2VyLmdldERhdGEoKVt0aGlzLm9wdGlvbnMuYnVmZmVyVG9vbHRpcEF0dHJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwTGF5ZXIuYWRkTGF5ZXIoY2lyY2xlTGF5ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGdyb3VwTGF5ZXI7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL21hcmtlci9NYXJrZXJzTGF5ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9tYXJrZXIvTWFya2Vyc0xheWVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWFya2Vyc0xheWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01hcmtlciAqLyBcIi4vc3JjL21hcmtlci9NYXJrZXIudHNcIik7XG5cbmNsYXNzIE1hcmtlcnNMYXllciB7XG4gICAgY29uc3RydWN0b3IobWFwLCBkYXRhTGlzdCwgb3B0aW9ucywgY2hhbm5lbEZ1bmMpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZW5kZXJUeXBlOiAncG9pbnQnLFxuICAgICAgICAgICAgcmVuZGVyUG9pbnRDb2xvclR5cGU6ICdzaW5nbGUnLFxuICAgICAgICAgICAgaWNvblR5cGU6ICd1bmljb2RlJyxcbiAgICAgICAgICAgIGljb25TaXplOiBbMjAsIDIwXSxcbiAgICAgICAgICAgIGljb25DbGFzczogJ2ljb25mb250JyxcbiAgICAgICAgICAgIGljb25Db2xvcjogJyMzMzg4RkYnLFxuICAgICAgICAgICAgaWNvbkFuY2hvcjogWzEwLCAxMF0sXG4gICAgICAgICAgICBzZWdtZW50ZWRDb2xvcnM6IFsnIzMzODhGRiddLFxuICAgICAgICAgICAgaGVhdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBtYXg6IDEsXG4gICAgICAgICAgICAgICAgbWluT3BhY2l0eTogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHlwZSA9ICdtYXJrZXInO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5kYXRhTGlzdCA9IGRhdGFMaXN0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMgPSBjaGFubmVsRnVuYztcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXllciA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNlZE1hcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuaG92ZXJlZE1hcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllciA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVhdExheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbHVzdGVyTGF5ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZE1pbiA9IEluZmluaXR5O1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSAxO1xuICAgICAgICAvLyDnvJPlrZggc2VnbWVudCDnm7jlhbPmlbDmja5cbiAgICAgICAgdGhpcy5jYWNoZVNlZ21lbnRQYXJhbXMoKTtcbiAgICAgICAgdGhpcy5pbml0TWFya2VycygpO1xuICAgIH1cbiAgICBkcmF3KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcmVkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnJlbmRlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BvaW50Jzoge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ01hcmtlckxheWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdjbHVzdGVyJzoge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ0NsdXN0ZXJMYXllcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaGVhdCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyID0gdGhpcy5jb25maWdIZWF0TGF5ZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlbmRlclR5cGUg5LiN5pSv5oyBXCIke3RoaXMub3B0aW9ucy5yZW5kZXJUeXBlfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRPcHRpb25zKG9wdGlvbnMsIHJlZHJhdyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHJlZHJhdykge1xuICAgICAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXRCb3VuZHMoKSB7XG4gICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyh0aGlzLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzKCkge1xuICAgICAgICBpZiAodGhpcy5tYXJrZXJzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5tYXAoKG1hcmtlcikgPT4gW21hcmtlci5nZXRMYXRMbmcoKS5sYXQsIG1hcmtlci5nZXRMYXRMbmcoKS5sbmddKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgLy8gVE9ETzog5bCG5LqL5Lu256e76ZmkXG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvZ2dsZVZpc2libGUodmlzaWJsZSkge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VDb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuaWNvbkNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIGNoYW5nZUljb24oaWNvblVuaWNvZGUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmljb25Vbmljb2RlID0gaWNvblVuaWNvZGU7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIHBpdGNoKGlkKSB7XG4gICAgICAgIHRoaXMubWFya2Vycy5mb3JFYWNoKChtYXJrZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChtYXJrZXIuZ2V0RGF0YSgpLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIG1hcmtlci5maXJlKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiDmuLLmn5PkuLrmlaPngrnlm74gKi9cbiAgICBjb25maWdNYXJrZXJMYXllcigpIHtcbiAgICAgICAgaWYgKHRoaXMubWFya2VyTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFya2VyTGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzog5LyY5YyWXG4gICAgICAgIHRoaXMuaW5pdE1hcmtlcnMoKTtcbiAgICAgICAgY29uc3QgY2FudmFzSWNvbkxheWVyID0gTC5jYW52YXNJY29uTGF5ZXIoe30pLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgLy8g5re75Yqg54K55Ye75LqL5Lu2XG4gICAgICAgIGNhbnZhc0ljb25MYXllci5hZGRPbkNsaWNrTGlzdGVuZXIoKF8sIFt7IGRhdGE6IG1hcmtlciB9XSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXJrZXJDbGlja0hhbmRsZXIobWFya2VyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOa3u+WKoCBob3ZlciDkuovku7ZcbiAgICAgICAgY2FudmFzSWNvbkxheWVyLmFkZE9uSG92ZXJMaXN0ZW5lcigoXywgW3sgZGF0YTogbWFya2VyIH1dKSA9PiB7XG4gICAgICAgICAgICAvLyDkuYvliY3mnIkgaG92ZXIg55qE5YWz6ZetIHRvb2x0aXBcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyZWRNYXJrZXIuY2xvc2VUb29sdGlwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvdmVyZWRNYXJrZXIgPSBtYXJrZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmVkTWFya2VyLmdldFRvb2x0aXAoKSkge1xuICAgICAgICAgICAgICAgIC8vIOWmguaenOW3sue7j+iuvue9riB0b29sdGlwIOebtOaOpeWxleekuiB0b29sdGlwXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkTWFya2VyLm9wZW5Ub29sdGlwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDlkKbliJnnu5HlrpogdG9vbHRpcCDlubblsZXnpLpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJlZE1hcmtlci5iaW5kVG9vbHRpcCgnJyArIHRoaXMuaG92ZXJlZE1hcmtlci5nZXREYXRhKClbdGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzSWNvbkxheWVyLmFkZE1hcmtlcnModGhpcy5tYXJrZXJzKTtcbiAgICAgICAgdGhpcy5tYXAub24oJ3pvb21zdGFydCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ21hcmtlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlclR5cGUgPT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcC5vbignem9vbWVuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ21hcmtlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlclR5cGUgPT09ICdwb2ludCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyDop6PlhrPliJ3mrKHmuLLmn5PkuI3lh7rlm77moIfpl67pophcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hcC5wYW5Ubyh0aGlzLm1hcC5nZXRDZW50ZXIoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcmtlckxheWVyID0gY2FudmFzSWNvbkxheWVyO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXJMYXllcjtcbiAgICB9XG4gICAgZ2V0VG9vbFRpcENvbnRlbnQoZGF0YSkge1xuICAgICAgICByZXR1cm4gJycgKyBkYXRhW3RoaXMub3B0aW9ucy50b29sdGlwQXR0cl07XG4gICAgfVxuICAgIGluaXRNYXJrZXJzKCkge1xuICAgICAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhTGlzdC5mb3JFYWNoKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IEwuZ2VvSlNPTihkYXRhLmdlb21ldHJ5KS5nZXRMYXllcnMoKVswXTtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKFtcbiAgICAgICAgICAgICAgICBsYXllci5nZXRMYXRMbmcoKS5sYXQsXG4gICAgICAgICAgICAgICAgbGF5ZXIuZ2V0TGF0TG5nKCkubG5nLFxuICAgICAgICAgICAgXSwge1xuICAgICAgICAgICAgICAgIGljb246IHRoaXMuZ2V0TWFya2VySWNvbihkYXRhKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8g5bCG55u45YWz5YC857uR5a6a5YiwIG1hcmtlcuS4ilxuICAgICAgICAgICAgbWFya2VyLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8g5aSE55CGIG1hcmtlciDngrnlh7vkuovku7ZcbiAgICBtYXJrZXJDbGlja0hhbmRsZXIobWFya2VyKSB7XG4gICAgICAgIHRoaXMuZm9jdXNlZE1hcmtlciA9IG1hcmtlcjtcbiAgICAgICAgLy8g5Yig6Zmk5YmN5LiA5Liq5pS+5aSn5Zu+5qCHXG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyLnJlbW92ZUZyb20odGhpcy5tYXApO1xuICAgICAgICB9XG4gICAgICAgIC8vIOeUn+aIkOW9k+WJjeaUvuWkp+Wbvuagh1xuICAgICAgICB0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyID0gbmV3IF9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0obWFya2VyLmdldExhdExuZygpLCB7XG4gICAgICAgICAgICBpY29uOiB0aGlzLmdldExhcmdlck1hcmtlckljb24obWFya2VyLmdldERhdGEoKSksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgdGhpcy5mb2N1c2VkRGlzcGxheU1hcmtlclxuICAgICAgICAgICAgLmJpbmRQb3B1cCh0aGlzLmdldFBvcHVwQ29udGVudChtYXJrZXIuZ2V0RGF0YSgpKSlcbiAgICAgICAgICAgIC5vcGVuUG9wdXAoKTtcbiAgICAgICAgdGhpcy5mb2N1c2VkRGlzcGxheU1hcmtlci5vbigncG9wdXBjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcC5wYW5Ubyh0aGlzLmZvY3VzZWRNYXJrZXIuZ2V0TGF0TG5nKCkpO1xuICAgICAgICB0aGlzLmNoYW5uZWxGdW5jKCdvbi1jbGljay1tYXJrZXInLCBtYXJrZXIpO1xuICAgIH1cbiAgICBjb25maWdDbHVzdGVyTGF5ZXIoKSB7XG4gICAgICAgIC8vIOWxleekuuiBmuWQiOWbvuWxglxuICAgICAgICBpZiAodGhpcy5jbHVzdGVyTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY2x1c3RlckxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2x1c3RlckxheWVyID0gTC5tYXJrZXJDbHVzdGVyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5jbHVzdGVyTGF5ZXIuYWRkTGF5ZXJzKHRoaXMubWFya2Vycy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKG0uZ2V0TGF0TG5nKCksIHtcbiAgICAgICAgICAgICAgICBpY29uOiB0aGlzLmdldE1hcmtlckljb24obS5nZXREYXRhKCkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXIuc2V0RGF0YShtLmdldERhdGEoKSk7XG4gICAgICAgICAgICBtYXJrZXIuYmluZFRvb2x0aXAoJycgKyBtYXJrZXIuZ2V0RGF0YSgpW3RoaXMub3B0aW9ucy50b29sdGlwQXR0cl0pO1xuICAgICAgICAgICAgbWFya2VyLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlckNsaWNrSGFuZGxlcihtYXJrZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNsdXN0ZXJMYXllcjtcbiAgICB9XG4gICAgLyoqIOa4suafk+S4uueDreWKm+WbviAqL1xuICAgIGNvbmZpZ0hlYXRMYXllcigpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVhdExheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmhlYXRMYXllci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtlcnMuZm9yRWFjaCgobWFya2VyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsYXRMbmcgPSBtYXJrZXIuZ2V0TGF0TG5nKCk7XG4gICAgICAgICAgICBjb25zdCBkaW1lbnNpb25BdHRyID0gdGhpcy5vcHRpb25zLmhlYXRPcHRpb25zICYmIHRoaXMub3B0aW9ucy5oZWF0T3B0aW9ucy5kaW1lbnNpb25BdHRyO1xuICAgICAgICAgICAgbGV0IGFsdCA9IChkaW1lbnNpb25BdHRyICYmIG1hcmtlci5nZXREYXRhKClbZGltZW5zaW9uQXR0cl0pIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhlYXRPcHRpb25zLm1heDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWx0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGFsdCA9IHRoaXMub3B0aW9ucy5oZWF0T3B0aW9ucy5tYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXJrZXIuc2V0TGF0TG5nKEwubGF0TG5nKGxhdExuZy5sYXQsIGxhdExuZy5sbmcsIGFsdCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oZWF0TGF5ZXIgPSBMLmhlYXRMYXllcih0aGlzLm1hcmtlcnMubWFwKChpdCkgPT4gaXQuZ2V0TGF0TG5nKCkpLCBcbiAgICAgICAgLy8gVE9ETzog5L2/55SoIG1lcmdlQ29uZmlnIOeugOWMllxuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMuaGVhdE9wdGlvbnMsIHsgbWluT3BhY2l0eTogMSB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYXRMYXllcjtcbiAgICB9XG4gICAgZ2V0TGFyZ2VyTWFya2VySWNvbihkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNYXJrZXJJY29uKGRhdGEsIHRydWUpO1xuICAgIH1cbiAgICBnZXRNYXJrZXJJY29uKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1hcmtlckljb24oZGF0YSwgZmFsc2UpO1xuICAgIH1cbiAgICAvKiog6I635Y+W5b2T5YmNIG1hcmtlciDpnIDopoHlsZXnpLrnmoQgaWNvbiAqL1xuICAgIF9nZXRNYXJrZXJJY29uKGRhdGEsIGlzTGFyZ2VyKSB7XG4gICAgICAgIGNvbnN0IGljb25TaXplID0gdGhpcy5vcHRpb25zLmljb25TaXplO1xuICAgICAgICBjb25zdCBpY29uQW5jaG9yID0gdGhpcy5vcHRpb25zLmljb25BbmNob3I7XG4gICAgICAgIGNvbnN0IGxhcmdlckljb25TaXplID0gW2ljb25TaXplWzBdICogMS41LCBpY29uU2l6ZVsxXSAqIDEuNV07XG4gICAgICAgIGNvbnN0IGxhcmdlckljb25BbmNob3IgPSBbaWNvbkFuY2hvclswXSAqIDEuNSwgaWNvbkFuY2hvclsxXSAqIDEuNV07XG4gICAgICAgIGNvbnN0IGljb25Db2xvciA9IHRoaXMub3B0aW9ucy5pY29uQ29sb3I7XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmljb25UeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdpbWFnZSc6IHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gTC5pY29uKHtcbiAgICAgICAgICAgICAgICAvLyAgIGljb25Vcmw6IHRoaXMub3B0aW9ucy5pY29uSW1hZ2VVcmwsXG4gICAgICAgICAgICAgICAgLy8gICBpY29uU2l6ZTogaXNMYXJnZXIgPyBsYXJnZXJJY29uU2l6ZSA6IGljb25TaXplLFxuICAgICAgICAgICAgICAgIC8vICAgaWNvbkFuY2hvcixcbiAgICAgICAgICAgICAgICAvLyB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnZm9udF9jbGFzcyc6XG4gICAgICAgICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICAgICAgY2FzZSAndW5pY29kZSc6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTC5kaXZJY29uKHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogdGhpcy5nZXRDdXN0b21JY29uSFRNTChkYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogaXNMYXJnZXIgPyBsYXJnZXJJY29uU2l6ZSA6IGljb25TaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkNvbG9yLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBpc0xhcmdlciA/ICdsYXJnZS1kaXYtaWNvbi1tYXJrZXInIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBpc0xhcmdlciA/IGxhcmdlckljb25TaXplIDogaWNvblNpemUsXG4gICAgICAgICAgICAgICAgICAgIGljb25BbmNob3I6IGlzTGFyZ2VyID8gbGFyZ2VySWNvbkFuY2hvciA6IGljb25BbmNob3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDlm77moIfnsbvlnovkuI3mlK/mjIFcIiR7dGhpcy5vcHRpb25zLmljb25UeXBlfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q3VzdG9tSWNvbkhUTUwoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmljb25SZW5kZXJlcikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmljb25SZW5kZXJlcihkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5yZW5kZXJQb2ludENvbG9yVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlJzoge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmljb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250X2NsYXNzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCIke3RoaXMub3B0aW9ucy5pY29uQ2xhc3N9XCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIlxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7b3B0aW9ucy5pY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAke29wdGlvbnMuaWNvblNpemVbMF19cHg7XG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDkvb/nlKggc3ZnXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N5bWJvbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJpY29uLXN5bWJvbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cIiR7dGhpcy5vcHRpb25zLmljb25TeW1ib2x9XCIgLz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCB1bmljb2RlXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VuaWNvZGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgIGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuaWNvbkNsYXNzfVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9XCJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke29wdGlvbnMuaWNvbkNvbG9yfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICR7dGhpcy5vcHRpb25zLmljb25Vbmljb2RlfVxuICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnc2VnbWVudGVkJzoge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmljb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250X2NsYXNzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICBjbGFzcz1cIiR7dGhpcy5vcHRpb25zLmljb25DbGFzc31cIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGlzLmdldFNlZ21lbnRlZE1hcmtlckNvbG9yKGRhdGEpfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8g5L2/55SoIHN2Z1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzeW1ib2wnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiaWNvbi1zeW1ib2xcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIke3RoaXMub3B0aW9ucy5pY29uU3ltYm9sfVwiIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDkvb/nlKggdW5pY29kZVxuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmljb2RlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICBjbGFzcz1cIiR7dGhpcy5vcHRpb25zLmljb25DbGFzc31cIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGlzLmdldFNlZ21lbnRlZE1hcmtlckNvbG9yKGRhdGEpfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICR7dGhpcy5vcHRpb25zLmljb25Vbmljb2RlfVxuICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVuZGVyUG9pbnRDb2xvclR5cGUg5LiN5pSv5oyBXCIke3RoaXMub3B0aW9ucy5yZW5kZXJQb2ludENvbG9yVHlwZX1cImApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhY2hlU2VnbWVudFBhcmFtcygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudGVkTGVuZ3RoID0gdGhpcy5vcHRpb25zLnNlZ21lbnRlZENvbG9ycy5sZW5ndGg7XG4gICAgICAgIGxldCBtYXhWYWwgPSAtSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5WYWwgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuZGF0YUxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICAgICAgbWF4VmFsID0gTWF0aC5tYXgobWF4VmFsLCB2YWwpO1xuICAgICAgICAgICAgbWluVmFsID0gTWF0aC5taW4obWluVmFsLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAobWF4VmFsIC0gbWluVmFsICsgMSkgLyBzZWdtZW50ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gbWluVmFsO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSBzdGVwO1xuICAgIH1cbiAgICBnZXRTZWdtZW50ZWRNYXJrZXJDb2xvcihkYXRhKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMub3B0aW9ucy5zZWdtZW50ZWRDb2xvcnNbKHZhbCAtIHRoaXMuc2VnbWVudGVkTWluKSAvIHRoaXMuc2VnbWVudGVkU3RlcF07XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgZ2V0UG9wdXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucG9wdXBBdHRyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMub3B0aW9ucy5wb3B1cEF0dHJ9OiAke2RhdGFbdGhpcy5vcHRpb25zLnBvcHVwQXR0cl19YDtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvcG9seWdvbi9Qb2x5Z29uLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wb2x5Z29uL1BvbHlnb24udHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbHlnb247IH0pO1xuY2xhc3MgUG9seWdvbiBleHRlbmRzIEwuUG9seWdvbiB7XG4gICAgY29uc3RydWN0b3IobGF0bG5ncywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihsYXRsbmdzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhO1xuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wb2x5Z29uL1BvbHlnb25zTGF5ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BvbHlnb24vUG9seWdvbnNMYXllci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUG9seWdvbnNMYXllcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUG9seWdvbiAqLyBcIi4vc3JjL3BvbHlnb24vUG9seWdvbi50c1wiKTtcblxuY2xhc3MgUG9seWdvbnNMYXllciB7XG4gICAgY29uc3RydWN0b3IobWFwLCBkYXRhTGlzdCwgb3B0aW9ucywgY2hhbm5lbEZ1bmMpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjb2xvcjogJyMzMzg4RkYnLFxuICAgICAgICAgICAgZmlsbENvbG9yOiAnIzMzODhGRicsXG4gICAgICAgICAgICByZW5kZXJQb2x5Z29uQ29sb3JUeXBlOiAnc2luZ2xlJyxcbiAgICAgICAgICAgIHNlZ21lbnRlZENvbG9yczogWycjMzM4OEZGJ10sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHlwZSA9ICdwb2x5Z29uJztcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuZGF0YUxpc3QgPSBkYXRhTGlzdDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jaGFubmVsRnVuYyA9IGNoYW5uZWxGdW5jO1xuICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnBvbHlnb25zID0gW107XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkU3RlcCA9IDE7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlnb24gPSBudWxsXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgLy8g57yT5a2YIHNlZ21lbnQg55u45YWz5pWw5o2uXG4gICAgICAgIHRoaXMuY2FjaGVTZWdtZW50UGFyYW1zKCk7XG4gICAgICAgIHRoaXMuaW5pdFBvbHlnb25zKCk7XG4gICAgfVxuICAgIGRyYXcob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXllciA9IHRoaXMuY29uZmlnUG9seWdvbkxheWVyKCk7XG4gICAgICAgIHRoaXMubWFwLmFkZExheWVyKHRoaXMubGF5ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZml0Qm91bmRzKCkge1xuICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHModGhpcy5nZXRCb3VuZHMoKSk7XG4gICAgfVxuICAgIGdldEJvdW5kcygpIHtcbiAgICAgICAgaWYgKHRoaXMucG9seWdvbnMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wb2x5Z29ucy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYuZXh0ZW5kKGN1cnIuZ2V0Qm91bmRzKCkpLCB0aGlzLnBvbHlnb25zWzBdLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9nZ2xlVmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgIGlmICghdGhpcy5sYXllcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMubGF5ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYW5nZUNvbG9yKGNvbG9yKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcGl0Y2goaWQpIHtcbiAgICAgICAgdGhpcy5wb2x5Z29ucy5mb3JFYWNoKChwb2x5Z29uKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9seWdvbi5nZXREYXRhKCkuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcG9seWdvbi5maXJlKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFRvb2xUaXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuICcnICsgZGF0YVt0aGlzLm9wdGlvbnMudG9vbHRpcEF0dHJdO1xuICAgIH1cbiAgICBpbml0UG9seWdvbnMoKSB7XG4gICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlZ21lbnRQYXJhbXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gTC5nZW9KU09OKGRhdGEuZ2VvbWV0cnkpLmdldExheWVycygpWzBdO1xuICAgICAgICAgICAgY29uc3QgcG9seWdvbiA9IG5ldyBfUG9seWdvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXShsYXllci5nZXRMYXRMbmdzKCkpO1xuICAgICAgICAgICAgLy8g5bCG55u45YWz5YC857uR5a6a5YiwIG1hcmtlcuS4ilxuICAgICAgICAgICAgcG9seWdvbi5zZXREYXRhKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5wb2x5Z29ucy5wdXNoKHBvbHlnb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uZmlnUG9seWdvbkxheWVyKCkge1xuICAgICAgICB0aGlzLnBvbHlnb25MYXllciA9IEwubGF5ZXJHcm91cCgpO1xuICAgICAgICB0aGlzLnBvbHlnb25zLmZvckVhY2goKHBvbHlnb24pID0+IHtcbiAgICAgICAgICAgIGxldCBjb2xvciA9IHRoaXMub3B0aW9ucy5jb2xvcjtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVuZGVyUG9seWdvbkNvbG9yVHlwZSA9PT0gJ3NlZ21lbnRlZCcpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IHRoaXMuZ2V0U2VnbWVudGVkUG9seWdvbkNvbG9yKHBvbHlnb24uZ2V0RGF0YSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8g6YeN5paw5bqU55SoIG9wdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IG5ld1BvbHlnb24gPSBuZXcgX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0ocG9seWdvbi5nZXRMYXRMbmdzKCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgbmV3UG9seWdvbi5zZXREYXRhKHBvbHlnb24uZ2V0RGF0YSgpKTtcbiAgICAgICAgICAgIG5ld1BvbHlnb24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucG9seWdvbkNsaWNrSGFuZGxlcihwb2x5Z29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50b29sdGlwQXR0cikge1xuICAgICAgICAgICAgICAgIG5ld1BvbHlnb24uYmluZFRvb2x0aXAodGhpcy5nZXRUb29sVGlwQ29udGVudChuZXdQb2x5Z29uLmdldERhdGEoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb2x5Z29uTGF5ZXIuYWRkTGF5ZXIobmV3UG9seWdvbik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5Z29uTGF5ZXI7XG4gICAgfVxuICAgIHBvbHlnb25DbGlja0hhbmRsZXIocG9seWdvbikge1xuICAgICAgICAvLyB0aGlzLmZvY3VzZWRQb2x5Z29uID0gcG9seWdvblxuICAgICAgICB0aGlzLmNoYW5uZWxGdW5jKCdvbi1jbGljay1wb2x5Z29uJywgcG9seWdvbik7XG4gICAgfVxuICAgIGNhY2hlU2VnbWVudFBhcmFtcygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudGVkTGVuZ3RoID0gdGhpcy5vcHRpb25zLnNlZ21lbnRlZENvbG9ycy5sZW5ndGg7XG4gICAgICAgIGxldCBtYXhWYWwgPSAtSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5WYWwgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuZGF0YUxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICAgICAgbWF4VmFsID0gTWF0aC5tYXgobWF4VmFsLCB2YWwpO1xuICAgICAgICAgICAgbWluVmFsID0gTWF0aC5taW4obWluVmFsLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAobWF4VmFsIC0gbWluVmFsICsgMSkgLyBzZWdtZW50ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gbWluVmFsO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSBzdGVwO1xuICAgIH1cbiAgICBnZXRTZWdtZW50ZWRQb2x5Z29uQ29sb3IoZGF0YSkge1xuICAgICAgICBjb25zdCB2YWwgPSBkYXRhW3RoaXMub3B0aW9ucy5zZWdtZW50ZWRBdHRyXTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLm9wdGlvbnMuc2VnbWVudGVkQ29sb3JzWyh2YWwgLSB0aGlzLnNlZ21lbnRlZE1pbikgLyB0aGlzLnNlZ21lbnRlZFN0ZXBdO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbHlsaW5lOyB9KTtcbmNsYXNzIFBvbHlsaW5lIGV4dGVuZHMgTC5Qb2x5bGluZSB7XG4gICAgY29uc3RydWN0b3IobGF0bG5ncywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihsYXRsbmdzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhO1xuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNCdWZmZXJMYXllci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNCdWZmZXJMYXllci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQb2x5bGluZXNCdWZmZXJMYXllcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BvbHlsaW5lc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BvbHlsaW5lc0xheWVyICovIFwiLi9zcmMvcG9seWxpbmUvUG9seWxpbmVzTGF5ZXIudHNcIik7XG5cbmNsYXNzIFBvbHlsaW5lc0J1ZmZlckxheWVyIGV4dGVuZHMgX1BvbHlsaW5lc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdIHtcbiAgICBjb25zdHJ1Y3RvcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYykge1xuICAgICAgICBzdXBlcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgcmVuZGVyUG9seWxpbmVDb2xvclR5cGU6ICdzaW5nbGUnLFxuICAgICAgICAgICAgc2VnbWVudGVkQ29sb3JzOiBbJyMzMzg4RkYnXSxcbiAgICAgICAgICAgIGNvcnJpZG9yOiAxMDAsXG4gICAgICAgICAgICBjb2xvcjogJyMzMzg4RkYnLFxuICAgICAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnR5cGUgPSAncG9seWxpbmVCdWZmZXInO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5kYXRhTGlzdCA9IGRhdGFMaXN0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNoYW5uZWxGdW5jID0gY2hhbm5lbEZ1bmM7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMucG9seWxpbmVzID0gW107XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkU3RlcCA9IDE7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlsaW5lID0gbnVsbFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuaW5pdFBvbHlsaW5lcygpO1xuICAgIH1cbiAgICBkcmF3KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcmVkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ1BvbHlsaW5lQnVmZmVyTGF5ZXIoKTtcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmaXRCb3VuZHMoKSB7XG4gICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyh0aGlzLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzKCkge1xuICAgICAgICBpZiAodGhpcy5wb2x5bGluZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wb2x5bGluZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2LmV4dGVuZChjdXJyLmdldEJvdW5kcygpKSwgdGhpcy5wb2x5bGluZXNbMF0uZ2V0Qm91bmRzKCkpO1xuICAgIH1cbiAgICBjaGFuZ2VDb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgY29uZmlnUG9seWxpbmVCdWZmZXJMYXllcigpIHtcbiAgICAgICAgdGhpcy5wb2x5bGluZUxheWVyID0gTC5sYXllckdyb3VwKCk7XG4gICAgICAgIHRoaXMucG9seWxpbmVzLmZvckVhY2goKHBvbHlsaW5lKSA9PiB7XG4gICAgICAgICAgICBwb2x5bGluZS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb2x5bGluZUNsaWNrSGFuZGxlcihwb2x5bGluZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5vcHRpb25zLnJlbmRlclBvbHlsaW5lQ29sb3JUeXBlID09PSAnc2luZ2xlJ1xuICAgICAgICAgICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5jb2xvclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZ2V0U2VnbWVudGVkUG9seWxpbmVDb2xvcihwb2x5bGluZS5nZXREYXRhKCkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBwb2x5bGluZUJ1ZmZlciA9IEwuY29ycmlkb3IocG9seWxpbmUuZ2V0TGF0TG5ncygpLm1hcCgobGF0TG5nKSA9PiBMLmxhdExuZyhbbGF0TG5nLmxhdCwgbGF0TG5nLmxuZ10pKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyKSB7XG4gICAgICAgICAgICAgICAgcG9seWxpbmVCdWZmZXIuYmluZFRvb2x0aXAodGhpcy5nZXRUb29sVGlwQ29udGVudChwb2x5bGluZS5nZXREYXRhKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9seWxpbmVMYXllci5hZGRMYXllcihwb2x5bGluZUJ1ZmZlcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5bGluZUxheWVyO1xuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNMYXllci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNMYXllci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQb2x5bGluZXNMYXllcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BvbHlsaW5lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BvbHlsaW5lICovIFwiLi9zcmMvcG9seWxpbmUvUG9seWxpbmUudHNcIik7XG5cbmNsYXNzIFBvbHlsaW5lc0xheWVyIHtcbiAgICBjb25zdHJ1Y3RvcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYykge1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzMzODhGRicsXG4gICAgICAgICAgICByZW5kZXJQb2x5bGluZUNvbG9yVHlwZTogJ3NpbmdsZScsXG4gICAgICAgICAgICBzZWdtZW50ZWRDb2xvcnM6IFsnIzMzODhGRiddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnR5cGUgPSAncG9seWxpbmUnO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5kYXRhTGlzdCA9IGRhdGFMaXN0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNoYW5uZWxGdW5jID0gY2hhbm5lbEZ1bmM7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMucG9seWxpbmVzID0gW107XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gSW5maW5pdHk7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkU3RlcCA9IDE7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlsaW5lID0gbnVsbFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIC8vIOe8k+WtmCBzZWdtZW50IOebuOWFs+aVsOaNrlxuICAgICAgICB0aGlzLmNhY2hlU2VnbWVudFBhcmFtcygpO1xuICAgICAgICB0aGlzLmluaXRQb2x5bGluZXMoKTtcbiAgICB9XG4gICAgZHJhdyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIHJlZHJhdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXllcikge1xuICAgICAgICAgICAgdGhpcy5sYXllci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxheWVyID0gdGhpcy5jb25maWdQb2x5bGluZUxheWVyKCk7XG4gICAgICAgIHRoaXMubWFwLmFkZExheWVyKHRoaXMubGF5ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZml0Qm91bmRzKCkge1xuICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHModGhpcy5nZXRCb3VuZHMoKSk7XG4gICAgfVxuICAgIGdldEJvdW5kcygpIHtcbiAgICAgICAgaWYgKHRoaXMucG9seWxpbmVzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucG9seWxpbmVzLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5leHRlbmQoY3Vyci5nZXRCb3VuZHMoKSksIHRoaXMucG9seWxpbmVzWzBdLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9nZ2xlVmlzaWJsZSh2aXNpYmxlKSB7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgIGlmICghdGhpcy5sYXllcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMubGF5ZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYW5nZUNvbG9yKGNvbG9yKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5maWxsQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcGl0Y2goaWQpIHtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMuZm9yRWFjaCgocG9seWxpbmUpID0+IHtcbiAgICAgICAgICAgIGlmIChwb2x5bGluZS5nZXREYXRhKCkuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcG9seWxpbmUuZmlyZSgnY2xpY2snKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0UG9seWxpbmVzKCkge1xuICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZWdtZW50UGFyYW1zKCk7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IEwuZ2VvSlNPTihkYXRhLmdlb21ldHJ5KS5nZXRMYXllcnMoKVswXTtcbiAgICAgICAgICAgIGxldCBmaWxsQ29sb3IgPSB0aGlzLm9wdGlvbnMuZmlsbENvbG9yO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW5kZXJQb2x5bGluZUNvbG9yVHlwZSA9PT0gJ3NlZ21lbnRlZCcpIHtcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3IgPSB0aGlzLmdldFNlZ21lbnRlZFBvbHlsaW5lQ29sb3IoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IG5ldyBfUG9seWxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0obGF5ZXIuZ2V0TGF0TG5ncygpLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHsgZmlsbENvbG9yIH0pKTtcbiAgICAgICAgICAgIC8vIOWwhuebuOWFs+WAvOe7keWumuWIsCBtYXJrZXLkuIpcbiAgICAgICAgICAgIHBvbHlsaW5lLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnBvbHlsaW5lcy5wdXNoKHBvbHlsaW5lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFNlZ21lbnRlZFBvbHlsaW5lQ29sb3IoZGF0YSkge1xuICAgICAgICBjb25zdCB2YWwgPSBkYXRhW3RoaXMub3B0aW9ucy5zZWdtZW50ZWRBdHRyXTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLm9wdGlvbnMuc2VnbWVudGVkQ29sb3JzWyh2YWwgLSB0aGlzLnNlZ21lbnRlZE1pbikgLyB0aGlzLnNlZ21lbnRlZFN0ZXBdO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHBvbHlsaW5lQ2xpY2tIYW5kbGVyKHBvbHlsaW5lKSB7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlsaW5lID0gcG9seWxpbmVcbiAgICAgICAgdGhpcy5jaGFubmVsRnVuYygnb24tY2xpY2stcG9seWxpbmUnLCBwb2x5bGluZSk7XG4gICAgfVxuICAgIGdldFRvb2xUaXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuICcnICsgZGF0YVt0aGlzLm9wdGlvbnMudG9vbHRpcEF0dHJdO1xuICAgIH1cbiAgICBjb25maWdQb2x5bGluZUxheWVyKCkge1xuICAgICAgICB0aGlzLnBvbHlsaW5lTGF5ZXIgPSBMLmxheWVyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMuZm9yRWFjaCgocG9seWxpbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5nZXRTZWdtZW50ZWRQb2x5bGluZUNvbG9yKHBvbHlsaW5lLmdldERhdGEoKSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BvbHlsaW5lID0gbmV3IF9Qb2x5bGluZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXShwb2x5bGluZS5nZXRMYXRMbmdzKCksIG9wdGlvbnMpO1xuICAgICAgICAgICAgbmV3UG9seWxpbmUub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucG9seWxpbmVDbGlja0hhbmRsZXIocG9seWxpbmUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXdQb2x5bGluZS5zZXREYXRhKHBvbHlsaW5lLmdldERhdGEoKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyKSB7XG4gICAgICAgICAgICAgICAgbmV3UG9seWxpbmUuYmluZFRvb2x0aXAodGhpcy5nZXRUb29sVGlwQ29udGVudChuZXdQb2x5bGluZS5nZXREYXRhKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9seWxpbmVMYXllci5hZGRMYXllcihuZXdQb2x5bGluZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5wb2x5bGluZUxheWVyO1xuICAgIH1cbiAgICBjYWNoZVNlZ21lbnRQYXJhbXMoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRlZExlbmd0aCA9IHRoaXMub3B0aW9ucy5zZWdtZW50ZWRDb2xvcnMubGVuZ3RoO1xuICAgICAgICBsZXQgbWF4VmFsID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgbWluVmFsID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAoY29uc3QgZGF0YSBvZiB0aGlzLmRhdGFMaXN0KSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBkYXRhW3RoaXMub3B0aW9ucy5zZWdtZW50ZWRBdHRyXTtcbiAgICAgICAgICAgIG1heFZhbCA9IE1hdGgubWF4KG1heFZhbCwgdmFsKTtcbiAgICAgICAgICAgIG1pblZhbCA9IE1hdGgubWluKG1pblZhbCwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGVwID0gKG1heFZhbCAtIG1pblZhbCArIDEpIC8gc2VnbWVudGVkTGVuZ3RoO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZE1pbiA9IG1pblZhbDtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRTdGVwID0gc3RlcDtcbiAgICB9XG59XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OXNaV0ZtYkdWMFRXRndMM2RsWW5CaFkyc3ZkVzVwZG1WeWMyRnNUVzlrZFd4bFJHVm1hVzVwZEdsdmJpSXNJbmRsWW5CaFkyczZMeTlzWldGbWJHVjBUV0Z3TDNkbFluQmhZMnN2WW05dmRITjBjbUZ3SWl3aWQyVmljR0ZqYXpvdkwyeGxZV1pzWlhSTllYQXZMaTl6Y21NdmFXNWtaWGd1ZEhNaUxDSjNaV0p3WVdOck9pOHZiR1ZoWm14bGRFMWhjQzh1TDNOeVl5OXRZWEpyWlhJdlRXRnlhMlZ5TG5Seklpd2lkMlZpY0dGamF6b3ZMMnhsWVdac1pYUk5ZWEF2TGk5emNtTXZiV0Z5YTJWeUwwMWhjbXRsY25OQ2RXWm1aWEpNWVhsbGNpNTBjeUlzSW5kbFluQmhZMnM2THk5c1pXRm1iR1YwVFdGd0x5NHZjM0pqTDIxaGNtdGxjaTlOWVhKclpYSnpUR0Y1WlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2YkdWaFpteGxkRTFoY0M4dUwzTnlZeTl3YjJ4NVoyOXVMMUJ2YkhsbmIyNHVkSE1pTENKM1pXSndZV05yT2k4dmJHVmhabXhsZEUxaGNDOHVMM055WXk5d2IyeDVaMjl1TDFCdmJIbG5iMjV6VEdGNVpYSXVkSE1pTENKM1pXSndZV05yT2k4dmJHVmhabXhsZEUxaGNDOHVMM055WXk5d2IyeDViR2x1WlM5UWIyeDViR2x1WlM1MGN5SXNJbmRsWW5CaFkyczZMeTlzWldGbWJHVjBUV0Z3THk0dmMzSmpMM0J2Ykhsc2FXNWxMMUJ2Ykhsc2FXNWxjMEoxWm1abGNreGhlV1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMnhsWVdac1pYUk5ZWEF2TGk5emNtTXZjRzlzZVd4cGJtVXZVRzlzZVd4cGJtVnpUR0Y1WlhJdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTEU4N1FVTldRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdPMEZCUjBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHdEVRVUV3UXl4blEwRkJaME03UVVGRE1VVTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SVUZCZDBRc2EwSkJRV3RDTzBGQlF6RkZPMEZCUTBFc2VVUkJRV2xFTEdOQlFXTTdRVUZETDBRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdsRVFVRjVReXhwUTBGQmFVTTdRVUZETVVVc2QwaEJRV2RJTEcxQ1FVRnRRaXhGUVVGRk8wRkJRM0pKTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVOQlFUSkNMREJDUVVFd1FpeEZRVUZGTzBGQlEzWkVMSGxEUVVGcFF5eGxRVUZsTzBGQlEyaEVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTERoRVFVRnpSQ3dyUkVGQkswUTdPMEZCUlhKSU8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN096czdPenM3T3pzN096czdRVU5zUmtFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCYjBNN1FVRkRXVHRCUVVOWk8wRkJRMnhDTzBGQlExazdRVUZEV1R0QlFVTXpRanRCUVVOWk8wRkJSVzVFTEN0RVFVRmxPMGxCUTJJc09FUkJRVTA3U1VGRFRpd3dSVUZCV1R0SlFVTmFMSE5HUVVGclFqdEpRVU5zUWl4dlJVRkJVVHRKUVVOU0xHZEdRVUZqTzBsQlEyUXNORVpCUVc5Q08wbEJRM0JDTEdsRlFVRlBPMGxCUTFBc05rVkJRV0U3UTBGRFpEdEJRVlZCT3pzN096czdPenM3T3pzN08wRkRNVUpFTzBGQlFVRTdRVUZCWlN4TlFVRk5MRTFCUVU4c1UwRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRUdEpRVWN4UXl4WlFVRlpMRTFCUVRCQ0xFVkJRVVVzVDBGQmVVSTdVVUZETDBRc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeFBRVUZQTEVOQlFVTTdTVUZEZUVJc1EwRkJRenRKUVVOTkxFOUJRVThzUTBGQlF5eEpRVUZyUWp0UlFVTXZRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVazdTVUZEY0VJc1EwRkJRenRKUVVOTkxFOUJRVTg3VVVGRFdpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5PMGxCUTNCQ0xFTkJRVU03UTBGRFJqczdPenM3T3pzN096czdPenRCUTJKRU8wRkJRVUU3UVVGQlFUdEJRVUZyUlR0QlFVdHVSQ3hOUVVGTkxHdENRVUZ0UWl4VFFVRlJMSEZFUVVGWk8wbEJSekZFTEZsQlEwVXNSMEZCVlN4RlFVTldMRkZCUVhkQ0xFVkJRM2hDTEU5QlFXdERMRVZCUTJ4RExGZEJRWGRDTzFGQlJYaENMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVOHNSVUZCUlN4WFFVRlhMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4alFVRmpPMUZCUXpGQ0xFMUJRVTBzYjBKQlFXOUNMRWRCUVRCQ08xbEJRMnhFTEUxQlFVMHNSVUZCUlN4SlFVRkpPMWxCUTFvc1RVRkJUU3hGUVVGRkxFbEJRVWs3V1VGRFdpeE5RVUZOTEVWQlFVVXNRMEZCUXp0VFFVTldPMUZCUTBRc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVTXhRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVU5hTEVWQlFVVXNZVUZCWVN4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEVWQlEzWkRMRTlCUVU4c1EwRkRVanRKUVVOSUxFTkJRVU03U1VGRlRTeEpRVUZKTEVOQlFVTXNUMEZCYlVNN1VVRkROME1zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTI1RUxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTjBRaXhEUVVGRE8wbEJSVTBzVFVGQlRUdFJRVU5ZTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRMnBDTEU5QlFVMDdVMEZEVUR0UlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdFpRVU53UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRPMU5CUTNaRE8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZPMWxCUTNCQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU03VTBGRGRrTTdVVUZEUkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSVHRSUVVNelF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0UlFVTXpReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTTdVVUZEYmtNc1QwRkJUeXhKUVVGSk8wbEJRMklzUTBGQlF6dEpRVVZQTEdsQ1FVRnBRanRSUVVOMlFpeE5RVUZOTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xRkJRMnBETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVTdXVUZET1VJc1RVRkJUU3hYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZETVVJc1RVRkJUU3hEUVVGRExGTkJRVk1zUlVGQlJTeEZRVU5zUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGRE0wSTdXVUZEUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1owSkJRMnhETEZkQlFWY3NRMEZCUXl4WFFVRlhMRU5CUTNKQ0xFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVOMFJEdGhRVU5HTzFsQlEwUXNWVUZCVlN4RFFVRkRMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVU03VVVGRGJFTXNRMEZCUXl4RFFVRkRPMUZCUTBZc1QwRkJUeXhWUVVGVk8wbEJRMjVDTEVOQlFVTTdRMEZEUmpzN096czdPenM3T3pzN096dEJRMnhGUkR0QlFVRkJPMEZCUVVFN1FVRkJOa0k3UVVGelJHUXNUVUZCVFN4WlFVRlpPMGxCTWtJdlFpeFpRVU5GTEVkQlFWVXNSVUZEVml4UlFVRjNRaXhGUVVONFFpeFBRVUUwUWl4RlFVTTFRaXhYUVVGM1FqdFJRVVY0UWl4TlFVRk5MR05CUVdNc1IwRkJkMEk3V1VGRE1VTXNWVUZCVlN4RlFVRkZMRTlCUVU4N1dVRkRia0lzYjBKQlFXOUNMRVZCUVVVc1VVRkJVVHRaUVVNNVFpeFJRVUZSTEVWQlFVVXNVMEZCVXp0WlFVTnVRaXhSUVVGUkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUTJ4Q0xGTkJRVk1zUlVGQlJTeFZRVUZWTzFsQlEzSkNMRk5CUVZNc1JVRkJSU3hUUVVGVE8xbEJRM0JDTEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRGNFSXNaVUZCWlN4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRE8xbEJRelZDTEZkQlFWY3NSVUZCUlR0blFrRkRXQ3hIUVVGSExFVkJRVVVzUTBGQlF6dG5Ra0ZEVGl4VlFVRlZMRVZCUVVVc1EwRkJRenRoUVVOa08xTkJRMFk3VVVGRFJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRkZCUVZFN1VVRkRjRUlzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhPMUZCUTJRc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTzFGQlEzaENMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1kwRkJZeXhGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU42UkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmM3VVVGRk9VSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSk8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTVHRSUVVOcVFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrN1VVRkRla0lzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1IwRkJSeXhKUVVGSk8xRkJRMmhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1JVRkJSVHRSUVVOcVFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrN1VVRkRka0lzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1R0UlFVVjRRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZGQlFWRTdVVUZETlVJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETzFGQlJYUkNMR3RDUVVGclFqdFJRVU5zUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdVVUZEZWtJc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdEpRVU53UWl4RFFVRkRPMGxCUTAwc1NVRkJTU3hEUVVGRExFOUJRVFpDTzFGQlEzWkRMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNUdFJRVU51UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRGJrUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRM1JDTEVOQlFVTTdTVUZEVFN4TlFVRk5PMUZCUTFnc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdXVUZEYWtJc1QwRkJUVHRUUVVOUU8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUTJRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVTdVMEZEY0VJN1VVRkRSQ3hSUVVGUkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RlFVRkZPMWxCUXk5Q0xFdEJRVXNzVDBGQlR5eERRVUZETEVOQlFVTTdaMEpCUTFvc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVU3WjBKQlEzSkRMRTFCUVVzN1lVRkRUanRaUVVORUxFdEJRVXNzVTBGQlV5eERRVUZETEVOQlFVTTdaMEpCUTJRc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVU3WjBKQlEzUkRMRTFCUVVzN1lVRkRUanRaUVVORUxFdEJRVXNzVFVGQlRTeERRVUZETEVOQlFVTTdaMEpCUTFnc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVRkZPMmRDUVVOdVF5eE5RVUZMTzJGQlEwNDdXVUZEUkN4UFFVRlBMRU5CUVVNc1EwRkJRenRuUWtGRFVDeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMR3RDUVVGclFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRE8yRkJRemxFTzFOQlEwWTdVVUZEUkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUXpkQ0xFOUJRVThzU1VGQlNUdEpRVU5pTEVOQlFVTTdTVUZEVFN4VlFVRlZMRU5CUVVNc1QwRkJORUlzUlVGQlJTeE5RVUZOTEVkQlFVY3NTMEZCU3p0UlFVTTFSQ3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTTdVVUZEYmtRc1NVRkJTU3hOUVVGTkxFVkJRVVU3V1VGRFZpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMU5CUTJRN1NVRkRTQ3hEUVVGRE8wbEJRMDBzVTBGQlV6dFJRVU5rTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTjBReXhEUVVGRE8wbEJRMDBzVTBGQlV6dFJRVU5rTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlF6VkNMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVTdVMEZETlVJN1VVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVTnlRaXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlExUXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRWEZDTEVOQlEzWkZPMGxCUTBnc1EwRkJRenRKUVVOTkxFOUJRVTg3VVVGRFdpeGpRVUZqTzFGQlEyUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRMlFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVN1UwRkRjRUk3U1VGRFNDeERRVUZETzBsQlEwMHNZVUZCWVN4RFFVRkRMRTlCUVdkQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUenRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVObUxFOUJRVTA3VTBGRFVEdFJRVU5FTEVsQlFVa3NUMEZCVHl4RlFVRkZPMWxCUTFnc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRUUVVNNVFqdGhRVUZOTzFsQlEwd3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTnFRenRKUVVOSUxFTkJRVU03U1VGRFRTeFhRVUZYTEVOQlFVTXNTMEZCWVR0UlFVTTVRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkxPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEWml4RFFVRkRPMGxCUTAwc1ZVRkJWU3hEUVVGRExGZEJRVzFDTzFGQlEyNURMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWYzdVVUZEZEVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEpRVU5tTEVOQlFVTTdTVUZEVFN4TFFVRkxMRU5CUVVNc1JVRkJWVHRSUVVOeVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlF6bENMRWxCUVVrc1RVRkJUU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVN1owSkJRemxDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8yZENRVU53UWl4UFFVRk5PMkZCUTFBN1VVRkRTQ3hEUVVGRExFTkJRVU03U1VGRFNpeERRVUZETzBsQlEwUXNZVUZCWVR0SlFVTklMR2xDUVVGcFFqdFJRVU42UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3V1VGRGNFSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVU3VTBGRE1VSTdVVUZEUkN4WFFVRlhPMUZCUTFnc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdFJRVU5zUWl4TlFVRk5MR1ZCUVdVc1IwRkJSeXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzFGQlF6ZEVMRk5CUVZNN1VVRkRWQ3hsUVVGbExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRE0wUXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEUxQlFXZENMRU5CUVVNN1VVRkRNME1zUTBGQlF5eERRVUZETzFGQlEwWXNZMEZCWXp0UlFVTmtMR1ZCUVdVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVNelJDeDNRa0ZCZDBJN1dVRkRlRUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZPMmRDUVVOMFFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSVHRoUVVOc1F6dFpRVU5FTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1RVRkJaMEk3V1VGRmNrTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGVkJRVlVzUlVGQlJTeEZRVUZGTzJkQ1FVTnVReXc0UWtGQk9FSTdaMEpCUXpsQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNWMEZCVnl4RlFVRkZPMkZCUTJwRE8ybENRVUZOTzJkQ1FVTk1MRzFDUVVGdFFqdG5Ra0ZEYmtJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSVUZCUlR0dlFrRkROVUlzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4WFFVRlhMRU5CUXpWQ0xFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUXpWRU8ybENRVU5HTzJGQlEwWTdVVUZEU0N4RFFVRkRMRU5CUVVNN1VVRkRSaXhsUVVGbExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkZlRU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxFZEJRVWNzUlVGQlJUdFpRVU0xUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdG5Ra0ZEYWtJc1QwRkJUVHRoUVVOUU8xbEJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGRE1VSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUzBGQlN5eFBRVUZQTEVWQlFVVTdiMEpCUTNaRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU03YVVKQlEzWkRPMkZCUTBZN2FVSkJRVTA3WjBKQlEwd3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXp0aFFVTjJRenRSUVVOSUxFTkJRVU1zUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExGTkJRVk1zUlVGQlJTeEhRVUZITEVWQlFVVTdXVUZETVVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUTJwQ0xFOUJRVTA3WVVGRFVEdFpRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFVkJRVVU3WjBKQlF6RkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEV0QlFVc3NUMEZCVHl4RlFVRkZPMjlDUVVOMlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETzJsQ1FVTndRenRoUVVOR08ybENRVUZOTzJkQ1FVTk1MRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNN1lVRkRjRU03VVVGRFNDeERRVUZETEVOQlFVTTdVVUZGUml4bFFVRmxPMUZCUTJZc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdFpRVU5rTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1VVRkRkRU1zUTBGQlF5eERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhsUVVGbE8xRkJRMnhETEU5QlFVOHNTVUZCU1N4RFFVRkRMRmRCUVZjN1NVRkRla0lzUTBGQlF6dEpRVU5UTEdsQ1FVRnBRaXhEUVVGRExFbEJRV3RDTzFGQlF6VkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJRenRKUVVNMVF5eERRVUZETzBsQlEwOHNWMEZCVnp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVTdVVUZEYWtJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVNM1FpeE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRmNrUXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3dyUTBGQlRTeERRVU4yUWp0blFrRkRSeXhMUVVGclFpeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRWRCUVVjN1owSkJRMnhETEV0QlFXdENMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUjBGQlJ6dGhRVU53UXl4RlFVTkVPMmRDUVVORkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJRenRoUVVNdlFpeERRVU5HTzFsQlJVUXNhMEpCUVd0Q08xbEJRMnhDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJSWEJDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU16UWl4RFFVRkRMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJRMFFzYVVKQlFXbENPMGxCUTFRc2EwSkJRV3RDTEVOQlFVTXNUVUZCWXp0UlFVTjJReXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEUxQlFVMDdVVUZETTBJc1dVRkJXVHRSUVVOYUxFbEJRVWtzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVGRk8xbEJRemRDTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRUUVVNdlF6dFJRVU5FTEZkQlFWYzdVVUZEV0N4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N3clEwRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCUlR0WlFVTjZSQ3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0VFFVTnFSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUlhwRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJN1lVRkRkRUlzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEYWtRc1UwRkJVeXhGUVVGRk8xRkJRMlFzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVWQlFVVXNSMEZCUnl4RlFVRkZPMWxCUXpsRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFVkJRVVU3VVVGRGNFTXNRMEZCUXl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMRTFCUVUwc1EwRkJRenRKUVVNM1F5eERRVUZETzBsQlEwOHNhMEpCUVd0Q08xRkJRM2hDTEZOQlFWTTdVVUZEVkN4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGNrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVU3VTBGRE0wSTdVVUZEUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRSUVVNeFF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkRla0lzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdFpRVU55UWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxDdERRVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hGUVVGRk8yZENRVU4yUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1lVRkRkRU1zUTBGQlF6dFpRVU5HTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzFsQlF6TkNMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUTI1RkxFMUJRVTBzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSVHRuUWtGRGRFSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTnFReXhEUVVGRExFTkJRVU03V1VGRFJpeFBRVUZQTEUxQlFVMDdVVUZEWml4RFFVRkRMRU5CUVVNc1EwRkRTRHRSUVVORUxFOUJRVThzU1VGQlNTeERRVUZETEZsQlFWazdTVUZETVVJc1EwRkJRenRKUVVWRUxHRkJRV0U3U1VGRFRDeGxRVUZsTzFGQlEzSkNMRWxCUVVrc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUdFpRVU5zUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUlVGQlJUdFRRVU40UWp0UlFVTkVMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVN1dVRkRPVUlzVFVGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1JVRkJSVHRaUVVOcVF5eE5RVUZOTEdGQlFXRXNSMEZEYWtJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zWVVGQllUdFpRVU53UlN4SlFVRkpMRWRCUVVjc1IwRkRUQ3hEUVVGRExHRkJRV0VzU1VGQlNTeE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03WjBKQlEyeEVMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVYzdXVUZET1VJc1NVRkJTU3hQUVVGUExFZEJRVWNzUzBGQlN5eFJRVUZSTEVWQlFVVTdaMEpCUXpOQ0xFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1EwRkJReXhIUVVGSE8yRkJRMjVETzFsQlEwUXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTjZSQ3hEUVVGRExFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRekZDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03VVVGRGVFTXNNRUpCUVRCQ08xRkJRekZDTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RlFVRkZMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlF5OUVPMUZCUTBRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV6dEpRVU4yUWl4RFFVRkRPMGxCUlU4c2JVSkJRVzFDTEVOQlFVTXNTVUZCYTBJN1VVRkROVU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU03U1VGRGVFTXNRMEZCUXp0SlFVVlBMR0ZCUVdFc1EwRkJReXhKUVVGclFqdFJRVU4wUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeEZRVUZGTEV0QlFVc3NRMEZCUXp0SlFVTjZReXhEUVVGRE8wbEJSVVFzTmtKQlFUWkNPMGxCUTNKQ0xHTkJRV01zUTBGRGNFSXNTVUZCYTBJc1JVRkRiRUlzVVVGQmFVSTdVVUZGYWtJc1RVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJPMUZCUTNSRExFMUJRVTBzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWVHRSUVVNeFF5eE5RVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGSE0wUTdVVUZEUkN4TlFVRk5MR2RDUVVGblFpeEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVkcVJUdFJRVVZFTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV6dFJRVVY0UXl4UlFVRlJMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTzFsQlF6ZENMRXRCUVVzc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlExb3NhMEpCUVd0Q08yZENRVU5zUWl4M1EwRkJkME03WjBKQlEzaERMRzlFUVVGdlJEdG5Ra0ZEY0VRc1owSkJRV2RDTzJkQ1FVTm9RaXhMUVVGTE8yRkJRMDQ3V1VGRFJDeExRVUZMTEZsQlFWa3NRMEZCUXp0WlFVTnNRaXhMUVVGTExGRkJRVkVzUTBGQlF6dFpRVU5rTEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNN1owSkJRMlFzVDBGQlR5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRPMjlDUVVObUxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTzNkQ1FVTnFReXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkU3ZDBKQlF6bERMRk5CUVZNN2NVSkJRMVlzUTBGQlF6dHZRa0ZEUml4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdHZRa0ZEYkVRc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUk8yOUNRVU01UXl4VlFVRlZMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zVlVGQlZUdHBRa0ZEY2tRc1EwRkJRenRoUVVOSU8xbEJRMFFzVDBGQlR5eERRVUZETEVOQlFVTTdaMEpCUTFBc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hIUVVGSExFTkJRVU03WVVGRGNrUTdVMEZEUmp0SlFVTklMRU5CUVVNN1NVRkRUeXhwUWtGQmFVSXNRMEZEZGtJc1NVRkJhMElzUlVGRGJFSXNUMEZCT0VJN1VVRkZPVUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1JVRkJSVHRaUVVNM1FpeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNN1dVRkRiRVFzVDBGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETzFOQlEyaEVPMUZCUTBRc1VVRkJVU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEc5Q1FVRnZRaXhGUVVGRk8xbEJRM3BETEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNN1owSkJRMklzVVVGQlVTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSVHR2UWtGRE4wSXNWMEZCVnp0dlFrRkRXQ3hMUVVGTExGbEJRVmtzUTBGQlF5eERRVUZETzNkQ1FVTnFRaXhQUVVGUE96QkNRVU5QTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVenM3TWtKQlJYSkNMRTlCUVU4c1EwRkJReXhUUVVGVE95dENRVU5pTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE96czdZVUZIY2tNN2NVSkJRMFk3YjBKQlEwUXNVMEZCVXp0dlFrRkRWQ3hMUVVGTExGRkJRVkVzUTBGQlF5eERRVUZETzNkQ1FVTmlMRTlCUVU4N08yMURRVVZuUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlU3TzJGQlJUZERPM0ZDUVVOR08yOUNRVU5FTEdGQlFXRTdiMEpCUTJJc1MwRkJTeXhUUVVGVExFTkJRVU1zUTBGQlF6dDNRa0ZEWkN4UFFVRlBPenQ1UWtGRlRTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNN096SkNRVVZ3UWl4UFFVRlBMRU5CUVVNc1UwRkJVenNyUWtGRFlpeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJRenM3TzJ0Q1FVZG9ReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWYzdPMkZCUlRkQ08zRkNRVU5HTzJsQ1FVTkdPMmRDUVVORUxFMUJRVXM3WVVGRFRqdFpRVU5FTEV0QlFVc3NWMEZCVnl4RFFVRkRMRU5CUVVNN1owSkJRMmhDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVU3YjBKQlF6ZENMRmRCUVZjN2IwSkJRMWdzUzBGQlN5eFpRVUZaTEVOQlFVTXNRMEZCUXp0M1FrRkRha0lzVDBGQlR6czdlVUpCUlUwc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUT3pzeVFrRkZjRUlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExFbEJRVWtzUTBGQlF6c3JRa0ZET1VJc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdPenRoUVVkeVF6dHhRa0ZEUmp0dlFrRkRSQ3hUUVVGVE8yOUNRVU5VTEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNN2QwSkJRMklzVDBGQlR6czdiVU5CUldkQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlRzN1lVRkZOME03Y1VKQlEwWTdiMEpCUTBRc1lVRkJZVHR2UWtGRFlpeExRVUZMTEZOQlFWTXNRMEZCUXl4RFFVRkRPM2RDUVVOa0xFOUJRVTg3TzNsQ1FVVk5MRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV6czdNa0pCUlhCQ0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU03SzBKQlF6bENMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZET3pzN2EwSkJSMmhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWenM3WVVGRk4wSTdjVUpCUTBZN2FVSkJRMFk3WjBKQlEwUXNUVUZCU3p0aFFVTk9PMWxCUTBRc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlExQXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkRZaXcwUWtGQk5FSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4RFFVTnFSVHRoUVVOR08xTkJRMFk3U1VGRFNDeERRVUZETzBsQlEwOHNhMEpCUVd0Q08xRkJRM2hDTEUxQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWlVGQlpTeERRVUZETEUxQlFVMDdVVUZETTBRc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eFJRVUZSTzFGQlEzUkNMRWxCUVVrc1RVRkJUU3hIUVVGSExGRkJRVkU3VVVGRGNrSXNTMEZCU3l4TlFVRk5MRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzFsQlEyaERMRTFCUVUwc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJRenRaUVVNMVF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETzFsQlF6bENMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNN1UwRkRMMEk3VVVGRFJDeE5RVUZOTEVsQlFVa3NSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NaVUZCWlR0UlFVTndSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEUxQlFVMDdVVUZETVVJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTzBsQlF6TkNMRU5CUVVNN1NVRkRUeXgxUWtGQmRVSXNRMEZCUXl4SlFVRnJRanRSUVVOb1JDeE5RVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTTdVVUZETlVNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUTNoRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVU12UXp0UlFVTkVMRTlCUVU4c1MwRkJTenRKUVVOa0xFTkJRVU03U1VGRFR5eGxRVUZsTEVOQlFVTXNTVUZCYTBJN1VVRkRlRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRek5DTEU5QlFVOHNSVUZCUlR0VFFVTldPMUZCUTBRc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4TFFVRkxMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4RlFVRkZPMGxCUTNKRkxFTkJRVU03UTBGRFJqczdPenM3T3pzN096czdPenRCUXpGb1FrUTdRVUZCUVR0QlFVRmxMRTFCUVUwc1QwRkJVU3hUUVVGUkxFTkJRVU1zUTBGQlF5eFBRVUZQTzBsQlJ6VkRMRmxCUTBVc1QwRkhORUlzUlVGRE5VSXNUMEZCTWtJN1VVRkZNMElzUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNN1NVRkRla0lzUTBGQlF6dEpRVU5OTEU5QlFVOHNRMEZCUXl4SlFVRnJRanRSUVVNdlFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrN1NVRkRjRUlzUTBGQlF6dEpRVU5OTEU5QlFVODdVVUZEV2l4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTk8wbEJRM0JDTEVOQlFVTTdRMEZEUmpzN096czdPenM3T3pzN096dEJRMjVDUkR0QlFVRkJPMEZCUVVFN1FVRkJLMEk3UVVGclFtaENMRTFCUVUwc1lVRkJZVHRKUVdkQ2FFTXNXVUZEUlN4SFFVRlZMRVZCUTFZc1VVRkJkMElzUlVGRGVFSXNUMEZCTkVJc1JVRkROVUlzVjBGQmQwSTdVVUZGZUVJc1RVRkJUU3hqUVVGakxFZEJRWGRDTzFsQlF6RkRMRXRCUVVzc1JVRkJSU3hUUVVGVE8xbEJRMmhDTEZOQlFWTXNSVUZCUlN4VFFVRlRPMWxCUTNCQ0xITkNRVUZ6UWl4RlFVRkZMRkZCUVZFN1dVRkRhRU1zWlVGQlpTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRPMU5CUXpkQ08xRkJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4VFFVRlRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnp0UlFVTmtMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVUdFJRVU40UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVTg3VVVGRGRFSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhYUVVGWE8xRkJSVGxDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTVHRSUVVOdVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVN1VVRkRiRUlzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NRMEZCUXp0UlFVTjBRaXcyUWtGQk5rSTdVVUZGTjBJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hqUVVGakxFVkJRVVVzVDBGQlR5eERRVUZETzFGQlJYcEVMR3RDUVVGclFqdFJRVU5zUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdVVUZEZWtJc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJUdEpRVU55UWl4RFFVRkRPMGxCUTAwc1NVRkJTU3hEUVVGRExFOUJRVFpDTzFGQlEzWkRMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU51UkN4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRGRFSXNRMEZCUXp0SlFVTk5MRTFCUVUwN1VVRkRXQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTnFRaXhQUVVGTk8xTkJRMUE3VVVGRFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0VFFVTndRanRSUVVORUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFGQlEzUkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkROMElzVDBGQlR5eEpRVUZKTzBsQlEySXNRMEZCUXp0SlFVTk5MRk5CUVZNN1VVRkRaQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03U1VGRGRFTXNRMEZCUXp0SlFVTk5MRk5CUVZNN1VVRkRaQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVNM1FpeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRk8xTkJRelZDTzFGQlEwUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGRGVrSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eEZRVU0zUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVTTNRanRKUVVOSUxFTkJRVU03U1VGRFRTeFBRVUZQTzFGQlExb3NTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRMlFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVN1UwRkRjRUk3U1VGRFNDeERRVUZETzBsQlEwMHNZVUZCWVN4RFFVRkRMRTlCUVdkQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUenRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVObUxFOUJRVTA3VTBGRFVEdFJRVU5FTEVsQlFVa3NUMEZCVHl4RlFVRkZPMWxCUTFnc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRUUVVNNVFqdGhRVUZOTzFsQlEwd3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTnFRenRKUVVOSUxFTkJRVU03U1VGRFRTeFhRVUZYTEVOQlFVTXNTMEZCWVR0UlFVTTVRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkxPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEWml4RFFVRkRPMGxCUTAwc1MwRkJTeXhEUVVGRExFVkJRVlU3VVVGRGNrSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlR0WlFVTm9ReXhKUVVGSkxFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRk8yZENRVU12UWl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dG5Ra0ZEY2tJc1QwRkJUVHRoUVVOUU8xRkJRMGdzUTBGQlF5eERRVUZETzBsQlEwb3NRMEZCUXp0SlFVTlRMR2xDUVVGcFFpeERRVUZETEVsQlFXdENPMUZCUXpWRExFOUJRVThzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF6dEpRVU0xUXl4RFFVRkRPMGxCUTA4c1dVRkJXVHRSUVVOc1FpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlF6ZENMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlR0WlFVVjZRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja1FzVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4blJFRkJUeXhEUVVGRkxFdEJRVzFDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNN1dVRkZPVVFzYTBKQlFXdENPMWxCUTJ4Q0xFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUlhKQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVNM1FpeERRVUZETEVOQlFVTTdTVUZEU2l4RFFVRkRPMGxCUTA4c2EwSkJRV3RDTzFGQlEzaENMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eERRVUZETEZWQlFWVXNSVUZCUlR0UlFVTnNReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRMmhETEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN6dFpRVU01UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zYzBKQlFYTkNMRXRCUVVzc1YwRkJWeXhGUVVGRk8yZENRVU4yUkN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6dGhRVU42UkR0WlFVTkVMRTFCUVUwc1QwRkJUeXhIUVVGelFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzJkQ1FVTnFSU3hMUVVGTE8yRkJRMDRzUTBGQlF6dFpRVU5HTEdWQlFXVTdXVUZEWml4TlFVRk5MRlZCUVZVc1IwRkJSeXhKUVVGSkxHZEVRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF6dFpRVU0zUkN4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0WlFVTnlReXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVN1owSkJRekZDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTTdXVUZEYmtNc1EwRkJReXhEUVVGRE8xbEJRMFlzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSVHRuUWtGRE5VSXNWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEY2tVN1dVRkZSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRlRU1zUTBGQlF5eERRVUZETzFGQlEwWXNUMEZCVHl4SlFVRkpMRU5CUVVNc1dVRkJXVHRKUVVNeFFpeERRVUZETzBsQlEwOHNiVUpCUVcxQ0xFTkJRVU1zVDBGQlowSTdVVUZETVVNc1owTkJRV2RETzFGQlEyaERMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1QwRkJUeXhEUVVGRE8wbEJReTlETEVOQlFVTTdTVUZEVHl4clFrRkJhMEk3VVVGRGVFSXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlFVTXNUVUZCVFR0UlFVTXpSQ3hKUVVGSkxFMUJRVTBzUjBGQlJ5eERRVUZETEZGQlFWRTdVVUZEZEVJc1NVRkJTU3hOUVVGTkxFZEJRVWNzVVVGQlVUdFJRVU55UWl4TFFVRkxMRTFCUVUwc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEYUVNc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRE8xbEJRelZETEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTTdXVUZET1VJc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJRenRUUVVNdlFqdFJRVU5FTEUxQlFVMHNTVUZCU1N4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4bFFVRmxPMUZCUTNCRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NUVUZCVFR0UlFVTXhRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVazdTVUZETTBJc1EwRkJRenRKUVVOUExIZENRVUYzUWl4RFFVRkRMRWxCUVd0Q08xRkJRMnBFTEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXp0UlFVTTFReXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkRlRU1zUTBGQlF5eEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlF5OURPMUZCUTBRc1QwRkJUeXhMUVVGTE8wbEJRMlFzUTBGQlF6dERRVU5HT3pzN096czdPenM3T3pzN08wRkRja3hFTzBGQlFVRTdRVUZCWlN4TlFVRk5MRkZCUVZNc1UwRkJVU3hEUVVGRExFTkJRVU1zVVVGQlVUdEpRVWM1UXl4WlFVRlpMRTlCUVhkQ0xFVkJRVVVzVDBGQk1rSTdVVUZETDBRc1MwRkJTeXhEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVOTkxFOUJRVThzUTBGQlF5eEpRVUZyUWp0UlFVTXZRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVazdTVUZEY0VJc1EwRkJRenRKUVVOTkxFOUJRVTg3VVVGRFdpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5PMGxCUTNCQ0xFTkJRVU03UTBGRFJqczdPenM3T3pzN096czdPenRCUTJSRU8wRkJRVUU3UVVGQlFUdEJRVUUyUXp0QlFXdENPVUlzVFVGQlRTeHZRa0ZCY1VJc1UwRkJVU3gxUkVGQll6dEpRVWM1UkN4WlFVTkZMRWRCUVZVc1JVRkRWaXhSUVVGM1FpeEZRVU40UWl4UFFVRnRReXhGUVVOdVF5eFhRVUYzUWp0UlFVVjRRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1YwRkJWeXhEUVVGRE8xRkJRekZETEUxQlFVMHNZMEZCWXl4SFFVRXJRanRaUVVOcVJDeDFRa0ZCZFVJc1JVRkJSU3hSUVVGUk8xbEJRMnBETEdWQlFXVXNSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJRenRaUVVNMVFpeFJRVUZSTEVWQlFVVXNSMEZCUnp0WlFVTmlMRXRCUVVzc1JVRkJSU3hUUVVGVE8xbEJRMmhDTEU5QlFVOHNSVUZCUlN4SFFVRkhPMU5CUTJJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEdkQ1FVRm5RanRSUVVNMVFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjN1VVRkRaQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRTdVVUZEZUVJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTzFGQlEzUkNMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVjBGQlZ6dFJRVVU1UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWs3VVVGRGJrSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRk8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1VVRkJVVHRSUVVNMVFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRU5CUVVNN1VVRkRkRUlzT0VKQlFUaENPMUZCUlRsQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzWTBGQll5eEZRVUZGTEU5QlFVOHNRMEZCUXp0UlFVTjZSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTzBsQlEzUkNMRU5CUVVNN1NVRkRUU3hKUVVGSkxFTkJRVU1zVDBGQmIwTTdVVUZET1VNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETzFGQlEyNUVMRTlCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEpRVU4wUWl4RFFVRkRPMGxCUTAwc1RVRkJUVHRSUVVOWUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMWxCUTJwQ0xFOUJRVTA3VTBGRFVEdFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVOa0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZPMU5CUTNCQ08xRkJRMFFzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVTdVVUZETjBNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVNM1FpeFBRVUZQTEVsQlFVazdTVUZEWWl4RFFVRkRPMGxCUTAwc1UwRkJVenRSUVVOa0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dEpRVU4wUXl4RFFVRkRPMGxCUTAwc1UwRkJVenRSUVVOa0xFbEJRVWtzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhGUVVGRk8xbEJRemxDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVU3VTBGRE5VSTdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVU14UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVWQlF6ZERMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUXpsQ08wbEJRMGdzUTBGQlF6dEpRVU5OTEZkQlFWY3NRMEZCUXl4TFFVRmhPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzN1VVRkRNVUlzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTm1MRU5CUVVNN1NVRkRUeXg1UWtGQmVVSTdVVUZETDBJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETEVOQlFVTXNWVUZCVlN4RlFVRkZPMUZCUTI1RExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVU3V1VGRGJFTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTzJkQ1FVTjRRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRE8xbEJRM0pETEVOQlFVTXNRMEZCUXp0WlFVTkdMRTFCUVUwc1QwRkJUeXhIUVVFclFpeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVTjJSQ3hGUVVGRkxFVkJRMFlzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZEV2p0blFrRkRSU3hMUVVGTExFVkJRMGdzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4MVFrRkJkVUlzUzBGQlN5eFJRVUZSTzI5Q1FVTXZReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxPMjlDUVVOd1FpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRoUVVONlJDeERRVU5HTzFsQlJVUXNUVUZCVFN4alFVRmpMRWRCUVVjc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGRE9VSXNVVUZCVVN4RFFVRkRMRlZCUVZVc1JVRkJhVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1JVRkJSU3hEUVVOdVJDeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkRia01zUlVGRFJDeFBRVUZQTEVOQlExSTdXVUZEUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEZRVUZGTzJkQ1FVTTFRaXhqUVVGakxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRoUVVOMlJUdFpRVU5FTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF6dFJRVU0zUXl4RFFVRkRMRU5CUVVNN1VVRkRSaXhQUVVGUExFbEJRVWtzUTBGQlF5eGhRVUZoTzBsQlF6TkNMRU5CUVVNN1EwRkRSanM3T3pzN096czdPenM3T3p0QlF5OUhSRHRCUVVGQk8wRkJRVUU3UVVGQmMwUTdRVUZyUW5aRExFMUJRVTBzWTBGQll6dEpRV1ZxUXl4WlFVTkZMRWRCUVZVc1JVRkRWaXhSUVVGM1FpeEZRVU40UWl4UFFVRTJRaXhGUVVNM1FpeFhRVUYzUWp0UlFVVjRRaXhOUVVGTkxHTkJRV01zUjBGQmVVSTdXVUZETTBNc1MwRkJTeXhGUVVGRkxGTkJRVk03V1VGRGFFSXNkVUpCUVhWQ0xFVkJRVVVzVVVGQlVUdFpRVU5xUXl4bFFVRmxMRVZCUVVVc1EwRkJReXhUUVVGVExFTkJRVU03VTBGRE4wSTdVVUZEUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExGVkJRVlU3VVVGRGRFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSE8xRkJRMlFzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4UlFVRlJPMUZCUTNoQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEZkQlFWYzdVVUZGT1VJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTzFGQlEyNUNMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJUdFJRVU51UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExGRkJRVkU3VVVGRE5VSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVGRE8xRkJRM1JDTERoQ1FVRTRRanRSUVVVNVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEdOQlFXTXNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkZla1FzYTBKQlFXdENPMUZCUTJ4Q0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRSUVVONlFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZPMGxCUTNSQ0xFTkJRVU03U1VGRFRTeEpRVUZKTEVOQlFVTXNUMEZCT0VJN1VVRkRlRU1zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTI1RUxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0SlFVTjBRaXhEUVVGRE8wbEJRMDBzVFVGQlRUdFJRVU5ZTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xbEJRMnBDTEU5QlFVMDdVMEZEVUR0UlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU5rTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRk8xTkJRM0JDTzFGQlEwUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVN1VVRkRka01zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU0zUWl4UFFVRlBMRWxCUVVrN1NVRkRZaXhEUVVGRE8wbEJRMDBzVTBGQlV6dFJRVU5rTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTjBReXhEUVVGRE8wbEJRMDBzVTBGQlV6dFJRVU5rTEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlF6bENMRTlCUVU4c1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVTdVMEZETlVJN1VVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVTXhRaXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRVZCUXpkRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRemxDTzBsQlEwZ3NRMEZCUXp0SlFVTk5MRTlCUVU4N1VVRkRXaXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEWkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJUdFRRVU53UWp0SlFVTklMRU5CUVVNN1NVRkRUU3hoUVVGaExFTkJRVU1zVDBGQlowSTdVVUZEYmtNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTzFGQlEzUkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzFsQlEyWXNUMEZCVFR0VFFVTlFPMUZCUTBRc1NVRkJTU3hQUVVGUExFVkJRVVU3V1VGRFdDeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFOQlF6bENPMkZCUVUwN1dVRkRUQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE8xTkJRMnBETzBsQlEwZ3NRMEZCUXp0SlFVTk5MRmRCUVZjc1EwRkJReXhMUVVGaE8xRkJRemxDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXM3VVVGRE9VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVObUxFTkJRVU03U1VGRFRTeExRVUZMTEVOQlFVTXNSVUZCVlR0UlFVTnlRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRk8xbEJRMnhETEVsQlFVa3NVVUZCVVN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVTdaMEpCUTJoRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRPMmRDUVVOMFFpeFBRVUZOTzJGQlExQTdVVUZEU0N4RFFVRkRMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJRMU1zWVVGQllUdFJRVU55UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUXpkQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRaUVVWNlFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGNrUXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTzFsQlEzUkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eDFRa0ZCZFVJc1MwRkJTeXhYUVVGWExFVkJRVVU3WjBKQlEzaEVMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1NVRkJTU3hEUVVGRE8yRkJRMnBFTzFsQlEwUXNUVUZCVFN4UlFVRlJMRWRCUVVjc1NVRkJTU3hwUkVGQlVTeERRVU14UWl4TFFVRnZRaXhEUVVGRExGVkJRVlVzUlVGQmNVSXNSVUZEY2tRc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJTeERRVUZETEVOQlF5OURPMWxCUlVRc2EwSkJRV3RDTzFsQlEyeENMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETzFsQlJYUkNMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXp0UlFVTXZRaXhEUVVGRExFTkJRVU03U1VGRFNpeERRVUZETzBsQlExTXNlVUpCUVhsQ0xFTkJRVU1zU1VGQmEwSTdVVUZEY0VRc1RVRkJUU3hIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRE8xRkJRelZETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWlVGQlpTeERRVU40UXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkRMME03VVVGRFJDeFBRVUZQTEV0QlFVczdTVUZEWkN4RFFVRkRPMGxCUTFNc2IwSkJRVzlDTEVOQlFVTXNVVUZCYTBJN1VVRkRMME1zYTBOQlFXdERPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVVzVVVGQlVTeERRVUZETzBsQlEycEVMRU5CUVVNN1NVRkRVeXhwUWtGQmFVSXNRMEZCUXl4SlFVRnJRanRSUVVNMVF5eFBRVUZQTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTTdTVUZETlVNc1EwRkJRenRKUVVOUExHMUNRVUZ0UWp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVOQlFVTXNRMEZCUXl4VlFVRlZMRVZCUVVVN1VVRkRia01zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJUdFpRVU5zUXl4TlFVRk5MRTlCUVU4c1IwRkJjMElzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdG5Ra0ZEYWtVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdZVUZETVVRc1EwRkJRenRaUVVOR0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVsQlFVa3NhVVJCUVZFc1EwRkRPVUlzVVVGQlVTeERRVUZETEZWQlFWVXNSVUZCY1VJc1JVRkRlRU1zVDBGQlR5eERRVU5TTzFsQlEwUXNWMEZCVnl4RFFVRkRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEZRVUZGTzJkQ1FVTXpRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRE8xbEJRM0pETEVOQlFVTXNRMEZCUXp0WlFVTkdMRmRCUVZjc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMWxCUTNaRExFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRVZCUVVVN1owSkJRelZDTEZkQlFWY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETzJGQlEzWkZPMWxCUTBRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUXpGRExFTkJRVU1zUTBGQlF6dFJRVU5HTEU5QlFVOHNTVUZCU1N4RFFVRkRMR0ZCUVdFN1NVRkRNMElzUTBGQlF6dEpRVU5QTEd0Q1FVRnJRanRSUVVONFFpeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUTBGQlF5eE5RVUZOTzFGQlF6TkVMRWxCUVVrc1RVRkJUU3hIUVVGSExFTkJRVU1zVVVGQlVUdFJRVU4wUWl4SlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUk8xRkJRM0pDTEV0QlFVc3NUVUZCVFN4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdFpRVU5vUXl4TlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNN1dVRkROVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF6dFpRVU01UWl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRPMU5CUXk5Q08xRkJRMFFzVFVGQlRTeEpRVUZKTEVkQlFVY3NRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEdWQlFXVTdVVUZEY0VRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eE5RVUZOTzFGQlF6RkNMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzU1VGQlNUdEpRVU16UWl4RFFVRkRPME5CUTBZaUxDSm1hV3hsSWpvaWJHVmhabXhsZEMxc1lYbGxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQjNaV0p3WVdOclZXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JseDBYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwWEc1Y2RGeDBaR1ZtYVc1bEtGdGRMQ0JtWVdOMGIzSjVLVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwWlhod2IzSjBjMXRjSW14bFlXWnNaWFJOWVhCY0lsMGdQU0JtWVdOMGIzSjVLQ2s3WEc1Y2RHVnNjMlZjYmx4MFhIUnliMjkwVzF3aWJHVmhabXhsZEUxaGNGd2lYU0E5SUdaaFkzUnZjbmtvS1R0Y2JuMHBLSGRwYm1SdmR5d2dablZ1WTNScGIyNG9LU0I3WEc1eVpYUjFjbTRnSWl3aUlGeDBMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1SUZ4MGRtRnlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTWdQU0I3ZlR0Y2JseHVJRngwTHk4Z1ZHaGxJSEpsY1hWcGNtVWdablZ1WTNScGIyNWNiaUJjZEdaMWJtTjBhVzl1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2JXOWtkV3hsU1dRcElIdGNibHh1SUZ4MFhIUXZMeUJEYUdWamF5QnBaaUJ0YjJSMWJHVWdhWE1nYVc0Z1kyRmphR1ZjYmlCY2RGeDBhV1lvYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBwSUh0Y2JpQmNkRngwWEhSeVpYUjFjbTRnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1Wlhod2IzSjBjenRjYmlCY2RGeDBmVnh1SUZ4MFhIUXZMeUJEY21WaGRHVWdZU0J1WlhjZ2JXOWtkV3hsSUNoaGJtUWdjSFYwSUdsMElHbHVkRzhnZEdobElHTmhZMmhsS1Z4dUlGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzRnWEhSY2RGeDBhVG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMxY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaR1ZtYVc1bElHZGxkSFJsY2lCbWRXNWpkR2x2YmlCbWIzSWdhR0Z5Ylc5dWVTQmxlSEJ2Y25SelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQm1kVzVqZEdsdmJpaGxlSEJ2Y25SekxDQnVZVzFsTENCblpYUjBaWElwSUh0Y2JpQmNkRngwYVdZb0lWOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieWhsZUhCdmNuUnpMQ0J1WVcxbEtTa2dlMXh1SUZ4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCdVlXMWxMQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2daMlYwZEdWeUlIMHBPMXh1SUZ4MFhIUjlYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1gxOWxjMDF2WkhWc1pTQnZiaUJsZUhCdmNuUnpYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0JtZFc1amRHbHZiaWhsZUhCdmNuUnpLU0I3WEc0Z1hIUmNkR2xtS0hSNWNHVnZaaUJUZVcxaWIyd2dJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeWtnZTF4dUlGeDBYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3NJSHNnZG1Gc2RXVTZJQ2ROYjJSMWJHVW5JSDBwTzF4dUlGeDBYSFI5WEc0Z1hIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENBblgxOWxjMDF2WkhWc1pTY3NJSHNnZG1Gc2RXVTZJSFJ5ZFdVZ2ZTazdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QmpjbVZoZEdVZ1lTQm1ZV3RsSUc1aGJXVnpjR0ZqWlNCdlltcGxZM1JjYmlCY2RDOHZJRzF2WkdVZ0ppQXhPaUIyWVd4MVpTQnBjeUJoSUcxdlpIVnNaU0JwWkN3Z2NtVnhkV2x5WlNCcGRGeHVJRngwTHk4Z2JXOWtaU0FtSURJNklHMWxjbWRsSUdGc2JDQndjbTl3WlhKMGFXVnpJRzltSUhaaGJIVmxJR2x1ZEc4Z2RHaGxJRzV6WEc0Z1hIUXZMeUJ0YjJSbElDWWdORG9nY21WMGRYSnVJSFpoYkhWbElIZG9aVzRnWVd4eVpXRmtlU0J1Y3lCdlltcGxZM1JjYmlCY2RDOHZJRzF2WkdVZ0ppQTRmREU2SUdKbGFHRjJaU0JzYVd0bElISmxjWFZwY21WY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1ZENBOUlHWjFibU4wYVc5dUtIWmhiSFZsTENCdGIyUmxLU0I3WEc0Z1hIUmNkR2xtS0cxdlpHVWdKaUF4S1NCMllXeDFaU0E5SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2RtRnNkV1VwTzF4dUlGeDBYSFJwWmlodGIyUmxJQ1lnT0NrZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUZ4MFhIUnBaaWdvYlc5a1pTQW1JRFFwSUNZbUlIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkbUZzZFdVZ0ppWWdkbUZzZFdVdVgxOWxjMDF2WkhWc1pTa2djbVYwZFhKdUlIWmhiSFZsTzF4dUlGeDBYSFIyWVhJZ2JuTWdQU0JQWW1wbFkzUXVZM0psWVhSbEtHNTFiR3dwTzF4dUlGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5Jb2JuTXBPMXh1SUZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvYm5Nc0lDZGtaV1poZFd4MEp5d2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0IyWVd4MVpUb2dkbUZzZFdVZ2ZTazdYRzRnWEhSY2RHbG1LRzF2WkdVZ0ppQXlJQ1ltSUhSNWNHVnZaaUIyWVd4MVpTQWhQU0FuYzNSeWFXNW5KeWtnWm05eUtIWmhjaUJyWlhrZ2FXNGdkbUZzZFdVcElGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ2h1Y3l3Z2EyVjVMQ0JtZFc1amRHbHZiaWhyWlhrcElIc2djbVYwZFhKdUlIWmhiSFZsVzJ0bGVWMDdJSDB1WW1sdVpDaHVkV3hzTENCclpYa3BLVHRjYmlCY2RGeDBjbVYwZFhKdUlHNXpPMXh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdaMlYwUkdWbVlYVnNkRVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm1iM0lnWTI5dGNHRjBhV0pwYkdsMGVTQjNhWFJvSUc1dmJpMW9ZWEp0YjI1NUlHMXZaSFZzWlhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YmlBOUlHWjFibU4wYVc5dUtHMXZaSFZzWlNrZ2UxeHVJRngwWEhSMllYSWdaMlYwZEdWeUlEMGdiVzlrZFd4bElDWW1JRzF2WkhWc1pTNWZYMlZ6VFc5a2RXeGxJRDljYmlCY2RGeDBYSFJtZFc1amRHbHZiaUJuWlhSRVpXWmhkV3gwS0NrZ2V5QnlaWFIxY200Z2JXOWtkV3hsV3lka1pXWmhkV3gwSjEwN0lIMGdPbHh1SUZ4MFhIUmNkR1oxYm1OMGFXOXVJR2RsZEUxdlpIVnNaVVY0Y0c5eWRITW9LU0I3SUhKbGRIVnliaUJ0YjJSMWJHVTdJSDA3WEc0Z1hIUmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNoblpYUjBaWElzSUNkaEp5d2daMlYwZEdWeUtUdGNiaUJjZEZ4MGNtVjBkWEp1SUdkbGRIUmxjanRjYmlCY2RIMDdYRzVjYmlCY2RDOHZJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiRnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2tnZXlCeVpYUjFjbTRnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwT3lCOU8xeHVYRzRnWEhRdkx5QmZYM2RsWW5CaFkydGZjSFZpYkdsalgzQmhkR2hmWDF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV3SUQwZ1hDSmNJanRjYmx4dVhHNGdYSFF2THlCTWIyRmtJR1Z1ZEhKNUlHMXZaSFZzWlNCaGJtUWdjbVYwZFhKdUlHVjRjRzl5ZEhOY2JpQmNkSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y3lBOUlGd2lMaTl6Y21NdmFXNWtaWGd1ZEhOY0lpazdYRzRpTENKcGJYQnZjblFnVFdGeWEyVnlJR1p5YjIwZ0p5NHZiV0Z5YTJWeUwwMWhjbXRsY2lkY2JtbHRjRzl5ZENCTllYSnJaWEp6VEdGNVpYSWdabkp2YlNBbkxpOXRZWEpyWlhJdlRXRnlhMlZ5YzB4aGVXVnlKMXh1YVcxd2IzSjBJRTFoY210bGNuTkNkV1ptWlhKTVlYbGxjaUJtY205dElDY3VMMjFoY210bGNpOU5ZWEpyWlhKelFuVm1abVZ5VEdGNVpYSW5YRzVwYlhCdmNuUWdVRzlzZVd4cGJtVWdabkp2YlNBbkxpOXdiMng1YkdsdVpTOVFiMng1YkdsdVpTZGNibWx0Y0c5eWRDQlFiMng1YkdsdVpYTk1ZWGxsY2lCbWNtOXRJQ2N1TDNCdmJIbHNhVzVsTDFCdmJIbHNhVzVsYzB4aGVXVnlKMXh1YVcxd2IzSjBJRkJ2Ykhsc2FXNWxjMEoxWm1abGNreGhlV1Z5SUdaeWIyMGdKeTR2Y0c5c2VXeHBibVV2VUc5c2VXeHBibVZ6UW5WbVptVnlUR0Y1WlhJblhHNXBiWEJ2Y25RZ1VHOXNlV2R2YmlCbWNtOXRJQ2N1TDNCdmJIbG5iMjR2VUc5c2VXZHZiaWRjYm1sdGNHOXlkQ0JRYjJ4NVoyOXVjMHhoZVdWeUlHWnliMjBnSnk0dmNHOXNlV2R2Ymk5UWIyeDVaMjl1YzB4aGVXVnlKMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3WEc0Z0lFMWhjbXRsY2l4Y2JpQWdUV0Z5YTJWeWMweGhlV1Z5TEZ4dUlDQk5ZWEpyWlhKelFuVm1abVZ5VEdGNVpYSXNYRzRnSUZCdmJIbHNhVzVsTEZ4dUlDQlFiMng1YkdsdVpYTk1ZWGxsY2l4Y2JpQWdVRzlzZVd4cGJtVnpRblZtWm1WeVRHRjVaWElzWEc0Z0lGQnZiSGxuYjI0c1hHNGdJRkJ2YkhsbmIyNXpUR0Y1WlhJc1hHNTlYRzVsZUhCdmNuUWdlMXh1SUNCTllYSnJaWElzWEc0Z0lFMWhjbXRsY25OTVlYbGxjaXhjYmlBZ1RXRnlhMlZ5YzBKMVptWmxja3hoZVdWeUxGeHVJQ0JRYjJ4NWJHbHVaU3hjYmlBZ1VHOXNlV3hwYm1WelRHRjVaWElzWEc0Z0lGQnZiSGxzYVc1bGMwSjFabVpsY2t4aGVXVnlMRnh1SUNCUWIyeDVaMjl1TEZ4dUlDQlFiMng1WjI5dWMweGhlV1Z5TEZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUkdGMFlVeHBjM1JKZEdWdElIMGdabkp2YlNBbkxpNHZaR1ZtYVc1cGRHbHZibk1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRTFoY210bGNpQmxlSFJsYm1SeklFd3VUV0Z5YTJWeUlIdGNiaUFnTHk4Z2RITnNhVzUwT21ScGMyRmliR1V0Ym1WNGRDMXNhVzVsT25aaGNtbGhZbXhsTFc1aGJXVmNiaUFnY0hKcGRtRjBaU0JmWDJSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlZ4dUlDQmpiMjV6ZEhKMVkzUnZjaWhzWVhSc2JtYzZJRXd1VEdGMFRHNW5SWGh3Y21WemMybHZiaXdnYjNCMGFXOXVjejg2SUV3dVRXRnlhMlZ5VDNCMGFXOXVjeWtnZTF4dUlDQWdJSE4xY0dWeUtHeGhkR3h1Wnl3Z2IzQjBhVzl1Y3lsY2JpQWdmVnh1SUNCd2RXSnNhV01nYzJWMFJHRjBZU2hrWVhSaE9pQkVZWFJoVEdsemRFbDBaVzBwSUh0Y2JpQWdJQ0IwYUdsekxsOWZaR0YwWVNBOUlHUmhkR0ZjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdaMlYwUkdGMFlTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWDJSaGRHRmNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUkdGMFlVeHBjM1JKZEdWdExDQkRhR0Z1Ym1Wc1JuVnVZeUI5SUdaeWIyMGdKeTR1TDJSbFptbHVhWFJwYjI1ekoxeHVhVzF3YjNKMElFMWhjbXRsY25OTVlYbGxjaXdnZXlCTllYSnJaWEp6VEdGNVpYSlBjSFJwYjI1eklIMGdabkp2YlNBbkxpOU5ZWEpyWlhKelRHRjVaWEluWEc1cGJuUmxjbVpoWTJVZ1RXRnlhMlZ5YzBKMVptWmxja3hoZVdWeVQzQjBhVzl1Y3lCbGVIUmxibVJ6SUUxaGNtdGxjbk5NWVhsbGNrOXdkR2x2Ym5NZ2UxeHVJQ0JpZFdabVpYSlViMjlzZEdsd1FYUjBjam9nYzNSeWFXNW5YRzRnSUdKMVptWmxjazl3ZEdsdmJuTTZJRXd1UTJseVkyeGxUV0Z5YTJWeVQzQjBhVzl1YzF4dWZWeHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFdGeWEyVnljMEoxWm1abGNreGhlV1Z5SUdWNGRHVnVaSE1nVFdGeWEyVnljMHhoZVdWeUlIdGNiaUFnY0hWaWJHbGpJRzl3ZEdsdmJuTTZJRTFoY210bGNuTkNkV1ptWlhKTVlYbGxjazl3ZEdsdmJuTmNiaUFnY0hKcGRtRjBaU0JpZFdabVpYSk1ZWGxsY2pvZ1RDNU1ZWGxsY2tkeWIzVndYRzRnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUcxaGNEb2dUQzVOWVhBc1hHNGdJQ0FnWkdGMFlVeHBjM1E2SUVSaGRHRk1hWE4wU1hSbGJWdGRMRnh1SUNBZ0lHOXdkR2x2Ym5NNklFMWhjbXRsY25OQ2RXWm1aWEpNWVhsbGNrOXdkR2x2Ym5Nc1hHNGdJQ0FnWTJoaGJtNWxiRVoxYm1NNklFTm9ZVzV1Wld4R2RXNWpYRzRnSUNrZ2UxeHVJQ0FnSUhOMWNHVnlLRzFoY0N3Z1pHRjBZVXhwYzNRc0lHOXdkR2x2Ym5Nc0lHTm9ZVzV1Wld4R2RXNWpLVnh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2R0WVhKclpYSkNkV1ptWlhJblhHNGdJQ0FnWTI5dWMzUWdaR1ZtWVhWc2RFSjFabVpsY2s5d2RHbHZibk02SUV3dVEybHlZMnhsVFdGeWEyVnlUM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJSEpoWkdsMWN6b2dNVEF3TUN4Y2JpQWdJQ0FnSUhOMGNtOXJaVG9nZEhKMVpTeGNiaUFnSUNBZ0lIZGxhV2RvZERvZ01TeGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdUMkpxWldOMExtRnpjMmxuYmloY2JpQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5eGNiaUFnSUNBZ0lIc2dZblZtWm1WeVQzQjBhVzl1Y3pvZ1pHVm1ZWFZzZEVKMVptWmxjazl3ZEdsdmJuTWdmU3hjYmlBZ0lDQWdJRzl3ZEdsdmJuTmNiaUFnSUNBcFhHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ1pISmhkeWh2Y0hScGIyNXpQem9nVFdGeWEyVnljMEoxWm1abGNreGhlV1Z5VDNCMGFXOXVjeWtnZTF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZEdocGN5NXZjSFJwYjI1ekxDQnZjSFJwYjI1ektWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaSEpoZHlncFhHNGdJSDFjYmx4dUlDQndkV0pzYVdNZ2NtVmtjbUYzS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRnlhMlZ5VEdGNVpYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRndMbkpsYlc5MlpVeGhlV1Z5S0hSb2FYTXViV0Z5YTJWeVRHRjVaWElwWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxtSjFabVpsY2t4aGVXVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtMWhjQzV5WlcxdmRtVk1ZWGxsY2loMGFHbHpMbUoxWm1abGNreGhlV1Z5S1Z4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG0xaGNtdGxja3hoZVdWeUlEMGdkR2hwY3k1amIyNW1hV2ROWVhKclpYSk1ZWGxsY2lncFhHNGdJQ0FnZEdocGN5NWlkV1ptWlhKTVlYbGxjaUE5SUhSb2FYTXVZMjl1Wm1sblFuVm1abVZ5VEdGNVpYSW9LVnh1SUNBZ0lIUm9hWE11YldGd0xtRmtaRXhoZVdWeUtIUm9hWE11YldGeWEyVnlUR0Y1WlhJcFhHNGdJQ0FnZEdocGN5NXRZWEF1WVdSa1RHRjVaWElvZEdocGN5NWlkV1ptWlhKTVlYbGxjaWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JqYjI1bWFXZENkV1ptWlhKTVlYbGxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQm5jbTkxY0V4aGVXVnlJRDBnVEM1c1lYbGxja2R5YjNWd0tDbGNiaUFnSUNCMGFHbHpMbTFoY210bGNuTXVabTl5UldGamFDZ29iV0Z5YTJWeUtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQmphWEpqYkdWTVlYbGxjaUE5SUV3dVkybHlZMnhsS0Z4dUlDQWdJQ0FnSUNCdFlYSnJaWEl1WjJWMFRHRjBURzVuS0Nrc1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCMGFXOXVjeTVpZFdabVpYSlBjSFJwYjI1elhHNGdJQ0FnSUNBcFhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG1KMVptWmxjbFJ2YjJ4MGFYQkJkSFJ5S1NCN1hHNGdJQ0FnSUNBZ0lHTnBjbU5zWlV4aGVXVnlMbUpwYm1SVWIyOXNkR2x3S0Z4dUlDQWdJQ0FnSUNBZ0lDY25JQ3NnYldGeWEyVnlMbWRsZEVSaGRHRW9LVnQwYUdsekxtOXdkR2x2Ym5NdVluVm1abVZ5Vkc5dmJIUnBjRUYwZEhKZFhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHZHliM1Z3VEdGNVpYSXVZV1JrVEdGNVpYSW9ZMmx5WTJ4bFRHRjVaWElwWEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z1ozSnZkWEJNWVhsbGNseHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJFWVhSaFRHbHpkRWwwWlcwc0lFTm9ZVzV1Wld4R2RXNWpJSDBnWm5KdmJTQW5MaTR2WkdWbWFXNXBkR2x2Ym5NblhHNXBiWEJ2Y25RZ1RXRnlhMlZ5SUdaeWIyMGdKeTR2VFdGeWEyVnlKMXh1WEc0dktpb2c1cml5NXArVDVxQzM1YnlQSU9hVm8rZUN1WHpuZzYzbGlwdmxtNzRnS2k5Y2JuUjVjR1VnVFdGeWEyVnljMHhoZVdWeVVtVnVaR1Z5Vkhsd1pTQTlJQ2R3YjJsdWRDY2dmQ0FuYUdWaGRDY2dmQ0FuWTJ4MWMzUmxjaWRjYmx4dUx5b3FJT2E0c3VhZmsrbWluT2lKc3VhZ3QrVzhqeURsalpYb2liSjg1WWlHNXE2MUlDb3ZYRzUwZVhCbElFMWhjbXRsY25OTVlYbGxjbEpsYm1SbGNsQnZhVzUwUTI5c2IzSlVlWEJsSUQwZ0ozTnBibWRzWlNjZ2ZDQW5jMlZuYldWdWRHVmtKMXh1WEc0dktpb2c1cFdqNTRLNTVadSs1cUNINTdHNzVaNkxJR2xqYjI1bWIyNTBmSE4yWjN4cGJXRm5aU0FxTDF4dWRIbHdaU0JOWVhKclpYSnpUR0Y1WlhKSlkyOXVWSGx3WlNBOUlDZG1iMjUwWDJOc1lYTnpKeUI4SUNkMWJtbGpiMlJsSnlCOElDZHplVzFpYjJ3bklId2dKMmx0WVdkbEoxeHVYRzVwYm5SbGNtWmhZMlVnU1dOdmJsSmxibVJsY2taMWJtTlBjSFJwYjI0Z2UxeHVJQ0JwWTI5dVUybDZaVG9nVzI1MWJXSmxjaXdnYm5WdFltVnlYVnh1SUNCcFkyOXVRMjlzYjNJNklITjBjbWx1WjF4dWZWeHVkSGx3WlNCSlkyOXVVbVZ1WkdWeVJuVnVZeUE5SUNoY2JpQWdaR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRMRnh1SUNCd1lYSmhiWE02SUVsamIyNVNaVzVrWlhKR2RXNWpUM0IwYVc5dVhHNHBJRDArSUhOMGNtbHVaMXh1WEc1bGVIQnZjblFnYVc1MFpYSm1ZV05sSUUxaGNtdGxjbk5NWVhsbGNrOXdkR2x2Ym5NZ2UxeHVJQ0J5Wlc1a1pYSlVlWEJsT2lCTllYSnJaWEp6VEdGNVpYSlNaVzVrWlhKVWVYQmxYRzRnSUhKbGJtUmxjbEJ2YVc1MFEyOXNiM0pVZVhCbE9pQk5ZWEpyWlhKelRHRjVaWEpTWlc1a1pYSlFiMmx1ZEVOdmJHOXlWSGx3WlZ4dUlDQnBZMjl1Vkhsd1pUb2dUV0Z5YTJWeWMweGhlV1Z5U1dOdmJsUjVjR1ZjYmx4dUlDQnBZMjl1U1cxaFoyVlZjbXcvT2lCemRISnBibWRjYmlBZ2FXTnZibE5wZW1VL09pQmJiblZ0WW1WeUxDQnVkVzFpWlhKZFhHNGdJR2xqYjI1RGJHRnpjejg2SUhOMGNtbHVaMXh1SUNCcFkyOXVWVzVwWTI5a1pUODZJSE4wY21sdVoxeHVJQ0JwWTI5dVUzbHRZbTlzUHpvZ2MzUnlhVzVuWEc0Z0lHbGpiMjVEYjJ4dmNqODZJSE4wY21sdVoxeHVJQ0JwWTI5dVFXNWphRzl5UHpvZ1cyNTFiV0psY2l3Z2JuVnRZbVZ5WFZ4dUlDQnBZMjl1VW1WdVpHVnlaWEkvT2lCSlkyOXVVbVZ1WkdWeVJuVnVZMXh1WEc0Z0lDOHFLaUJ3YjNCMWNDRGxzWlhucExybHJaZm1yclVnS2k5Y2JpQWdjRzl3ZFhCQmRIUnlQem9nYzNSeWFXNW5YRzRnSUM4cUtpQjBiMjlzZEdsd0lPV3hsZWVrdXVXdGwrYXV0U0FxTDF4dUlDQjBiMjlzZEdsd1FYUjBjajg2SUhOMGNtbHVaMXh1WEc0Z0lHOXdZV05wZEhrL09pQnVkVzFpWlhKY2JseHVJQ0F2S2lvZzVZaUc1cTYxNXJpeTVwK1Q1N3VmNks2aDVhMlg1cTYxSUNvdlhHNGdJSE5sWjIxbGJuUmxaRUYwZEhJL09pQnpkSEpwYm1kY2JpQWdjMlZuYldWdWRHVmtRMjlzYjNKelB6b2djM1J5YVc1blcxMWNibHh1SUNCb1pXRjBUM0IwYVc5dWN6ODZJRTFoY210bGNuTklaV0YwVEdGNVpYSlBjSFJwYjI1elhHNGdJR05zZFhOMFpYSlBjSFJwYjI1elB6b2dUQzVOWVhKclpYSnpRMngxYzNSbGNrOXdkR2x2Ym5OY2JuMWNibHh1THlvcUlPaTlyT1dNbHVTNHV1ZURyZVdLbStXYnZ1ZWFoQ0J2Y0hScGIyNXpJQ292WEc1cGJuUmxjbVpoWTJVZ1RXRnlhMlZ5YzBobFlYUk1ZWGxsY2s5d2RHbHZibk1nWlhoMFpXNWtjeUJNTGtobFlYUk1ZWGxsY2s5d2RHbHZibk1nZTF4dUlDQmthVzFsYm5OcGIyNUJkSFJ5UHpvZ2MzUnlhVzVuWEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUUxaGNtdGxjbk5NWVhsbGNpQjdYRzRnSUhCMVlteHBZeUJ0WVhBNklFd3VUV0Z3WEc0Z0lIQjFZbXhwWXlCa1lYUmhUR2x6ZERvZ1JHRjBZVXhwYzNSSmRHVnRXMTFjYmlBZ2NIVmliR2xqSUc5d2RHbHZibk02SUUxaGNtdGxjbk5NWVhsbGNrOXdkR2x2Ym5OY2JpQWdjSFZpYkdsaklHTm9ZVzV1Wld4R2RXNWpPaUJEYUdGdWJtVnNSblZ1WTF4dVhHNGdJSEIxWW14cFl5QjBlWEJsT2lCemRISnBibWRjYmx4dUlDQndjbTkwWldOMFpXUWdiV0Z5YTJWeWN6b2dUV0Z5YTJWeVcxMWNibHh1SUNCd2NtOTBaV04wWldRZ1ptOWpkWE5sWkUxaGNtdGxjam9nVFdGeWEyVnlYRzRnSUhCeWIzUmxZM1JsWkNCb2IzWmxjbVZrVFdGeWEyVnlPaUJOWVhKclpYSmNiaUFnTHlvcUlPbWNnT2ltZ2VXeGxlZWt1dWVhaE9hVXZ1V2twK2VhaE9XYnZ1YWdoeUFxTDF4dUlDQndjbTkwWldOMFpXUWdabTlqZFhObFpFUnBjM0JzWVhsTllYSnJaWEk2SUUxaGNtdGxjbHh1SUNCd2NtOTBaV04wWldRZ2JXRnlhMlZ5VEdGNVpYSTZJRXd1UTJGdWRtRnpTV052Ymt4aGVXVnlYRzVjYmlBZ2NISnZkR1ZqZEdWa0lIWnBjMmxpYkdVNklHSnZiMnhsWVc1Y2JpQWdjSEp2ZEdWamRHVmtJR3hoZVdWeU9seHVJQ0FnSUh3Z1RDNURZVzUyWVhOSlkyOXVUR0Y1WlhKY2JpQWdJQ0I4SUV3dVNHVmhkRXhoZVdWeVhHNGdJQ0FnZkNCTUxrMWhjbXRsY25ORGJIVnpkR1Z5WEc0Z0lDQWdmQ0JNTGt4aGVXVnlSM0p2ZFhCY2JpQWdjSEpwZG1GMFpTQm9aV0YwVEdGNVpYSTZJRXd1U0dWaGRFeGhlV1Z5WEc0Z0lIQnlhWFpoZEdVZ1kyeDFjM1JsY2t4aGVXVnlPaUJNTGsxaGNtdGxjbk5EYkhWemRHVnlYRzVjYmlBZ2NISnBkbUYwWlNCelpXZHRaVzUwWldSTmFXNDZJRzUxYldKbGNseHVJQ0J3Y21sMllYUmxJSE5sWjIxbGJuUmxaRk4wWlhBNklHNTFiV0psY2x4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQnRZWEE2SUV3dVRXRndMRnh1SUNBZ0lHUmhkR0ZNYVhOME9pQkVZWFJoVEdsemRFbDBaVzFiWFN4Y2JpQWdJQ0J2Y0hScGIyNXpPaUJOWVhKclpYSnpUR0Y1WlhKUGNIUnBiMjV6TEZ4dUlDQWdJR05vWVc1dVpXeEdkVzVqT2lCRGFHRnVibVZzUm5WdVkxeHVJQ0FwSUh0Y2JpQWdJQ0JqYjI1emRDQmtaV1poZFd4MFQzQjBhVzl1Y3pvZ1RXRnlhMlZ5YzB4aGVXVnlUM0IwYVc5dWN5QTlJSHRjYmlBZ0lDQWdJSEpsYm1SbGNsUjVjR1U2SUNkd2IybHVkQ2NzWEc0Z0lDQWdJQ0J5Wlc1a1pYSlFiMmx1ZEVOdmJHOXlWSGx3WlRvZ0ozTnBibWRzWlNjc1hHNGdJQ0FnSUNCcFkyOXVWSGx3WlRvZ0ozVnVhV052WkdVbkxGeHVJQ0FnSUNBZ2FXTnZibE5wZW1VNklGc3lNQ3dnTWpCZExGeHVJQ0FnSUNBZ2FXTnZia05zWVhOek9pQW5hV052Ym1admJuUW5MRnh1SUNBZ0lDQWdhV052YmtOdmJHOXlPaUFuSXpNek9EaEdSaWNzWEc0Z0lDQWdJQ0JwWTI5dVFXNWphRzl5T2lCYk1UQXNJREV3WFN4Y2JpQWdJQ0FnSUhObFoyMWxiblJsWkVOdmJHOXljem9nV3ljak16TTRPRVpHSjEwc1hHNGdJQ0FnSUNCb1pXRjBUM0IwYVc5dWN6b2dlMXh1SUNBZ0lDQWdJQ0J0WVhnNklERXNYRzRnSUNBZ0lDQWdJRzFwYms5d1lXTnBkSGs2SURFc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxuUjVjR1VnUFNBbmJXRnlhMlZ5SjF4dUlDQWdJSFJvYVhNdWJXRndJRDBnYldGd1hHNGdJQ0FnZEdocGN5NWtZWFJoVEdsemRDQTlJR1JoZEdGTWFYTjBYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWkdWbVlYVnNkRTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ2RHaHBjeTVqYUdGdWJtVnNSblZ1WXlBOUlHTm9ZVzV1Wld4R2RXNWpYRzVjYmlBZ0lDQjBhR2x6TG5acGMybGliR1VnUFNCMGNuVmxYRzRnSUNBZ2RHaHBjeTVzWVhsbGNpQTlJRzUxYkd4Y2JpQWdJQ0IwYUdsekxtWnZZM1Z6WldSTllYSnJaWElnUFNCdWRXeHNYRzRnSUNBZ2RHaHBjeTVvYjNabGNtVmtUV0Z5YTJWeUlEMGdiblZzYkZ4dUlDQWdJSFJvYVhNdVptOWpkWE5sWkVScGMzQnNZWGxOWVhKclpYSWdQU0J1ZFd4c1hHNGdJQ0FnZEdocGN5NXRZWEpyWlhKeklEMGdXMTFjYmlBZ0lDQjBhR2x6TG0xaGNtdGxja3hoZVdWeUlEMGdiblZzYkZ4dUlDQWdJSFJvYVhNdWFHVmhkRXhoZVdWeUlEMGdiblZzYkZ4dUlDQWdJSFJvYVhNdVkyeDFjM1JsY2t4aGVXVnlJRDBnYm5Wc2JGeHVYRzRnSUNBZ2RHaHBjeTV6WldkdFpXNTBaV1JOYVc0Z1BTQkpibVpwYm1sMGVWeHVJQ0FnSUhSb2FYTXVjMlZuYldWdWRHVmtVM1JsY0NBOUlERmNibHh1SUNBZ0lDOHZJT2U4aytXdG1DQnpaV2R0Wlc1MElPZWJ1T1dGcythVnNPYU5ybHh1SUNBZ0lIUm9hWE11WTJGamFHVlRaV2R0Wlc1MFVHRnlZVzF6S0NsY2JpQWdJQ0IwYUdsekxtbHVhWFJOWVhKclpYSnpLQ2xjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdaSEpoZHlodmNIUnBiMjV6UHpvZ1RXRnlhMlZ5YzB4aGVXVnlUM0IwYVc5dWN5a2dlMXh1SUNBZ0lIUm9hWE11ZG1semFXSnNaU0E5SUhSeWRXVmNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11YjNCMGFXOXVjeXdnYjNCMGFXOXVjeWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldSeVlYY29LVnh1SUNCOVhHNGdJSEIxWW14cFl5QnlaV1J5WVhjb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxuWnBjMmxpYkdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdocGN5NXNZWGxsY2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVzWVhsbGNpNXlaVzF2ZG1Vb0tWeHVJQ0FnSUgxY2JpQWdJQ0J6ZDJsMFkyZ2dLSFJvYVhNdWIzQjBhVzl1Y3k1eVpXNWtaWEpVZVhCbEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkd2IybHVkQ2M2SUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWVhsbGNpQTlJSFJvYVhNdVkyOXVabWxuVFdGeWEyVnlUR0Y1WlhJb0tWeHVJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTJGelpTQW5ZMngxYzNSbGNpYzZJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNZWGxsY2lBOUlIUm9hWE11WTI5dVptbG5RMngxYzNSbGNreGhlV1Z5S0NsY2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oYzJVZ0oyaGxZWFFuT2lCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdGNVpYSWdQU0IwYUdsekxtTnZibVpwWjBobFlYUk1ZWGxsY2lncFhHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JrWldaaGRXeDBPaUI3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnY21WdVpHVnlWSGx3WlNEa3VJM21sSy9taklGY0lpUjdkR2hwY3k1dmNIUnBiMjV6TG5KbGJtUmxjbFI1Y0dWOVhDSmdLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbTFoY0M1aFpHUk1ZWGxsY2loMGFHbHpMbXhoZVdWeUtWeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmlBZ2NIVmliR2xqSUhObGRFOXdkR2x2Ym5Nb2IzQjBhVzl1Y3pvZ1RXRnlhMlZ5YzB4aGVXVnlUM0IwYVc5dWN5d2djbVZrY21GM0lEMGdabUZzYzJVcElIdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11YjNCMGFXOXVjeXdnYjNCMGFXOXVjeWxjYmlBZ0lDQnBaaUFvY21Wa2NtRjNLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuSmxaSEpoZHlncFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhCMVlteHBZeUJtYVhSQ2IzVnVaSE1vS1NCN1hHNGdJQ0FnZEdocGN5NXRZWEF1Wm1sMFFtOTFibVJ6S0hSb2FYTXVaMlYwUW05MWJtUnpLQ2twWEc0Z0lIMWNiaUFnY0hWaWJHbGpJR2RsZEVKdmRXNWtjeWdwT2lCTUxreGhkRXh1WjBKdmRXNWtjMFY0Y0hKbGMzTnBiMjRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbTFoY210bGNuTXViR1Z1WjNSb0lEdzlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtMWhjQzVuWlhSQ2IzVnVaSE1vS1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhKclpYSnpMbTFoY0NoY2JpQWdJQ0FnSUNodFlYSnJaWElwSUQwK1hHNGdJQ0FnSUNBZ0lGdHRZWEpyWlhJdVoyVjBUR0YwVEc1bktDa3ViR0YwTENCdFlYSnJaWEl1WjJWMFRHRjBURzVuS0NrdWJHNW5YU0JoY3lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkWEc0Z0lDQWdLVnh1SUNCOVhHNGdJSEIxWW14cFl5QmtaWE4wY205NUtDa2dlMXh1SUNBZ0lDOHZJRlJQUkU4NklPV3dodVM2aStTN3R1ZW51K21acEZ4dUlDQWdJR2xtSUNoMGFHbHpMbXhoZVdWeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG14aGVXVnlMbkpsYlc5MlpTZ3BYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCMGIyZG5iR1ZXYVhOcFlteGxLSFpwYzJsaWJHVTZJR0p2YjJ4bFlXNHBJSHRjYmlBZ0lDQjBhR2x6TG5acGMybGliR1VnUFNCMmFYTnBZbXhsWEc0Z0lDQWdhV1lnS0NGMGFHbHpMbXhoZVdWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViV0Z3TG1Ga1pFeGhlV1Z5S0hSb2FYTXViR0Y1WlhJcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRndMbkpsYlc5MlpVeGhlV1Z5S0hSb2FYTXViR0Y1WlhJcFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhCMVlteHBZeUJqYUdGdVoyVkRiMnh2Y2loamIyeHZjam9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1samIyNURiMnh2Y2lBOUlHTnZiRzl5WEc0Z0lDQWdkR2hwY3k1eVpXUnlZWGNvS1Z4dUlDQjlYRzRnSUhCMVlteHBZeUJqYUdGdVoyVkpZMjl1S0dsamIyNVZibWxqYjJSbE9pQnpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTXVhV052YmxWdWFXTnZaR1VnUFNCcFkyOXVWVzVwWTI5a1pWeHVJQ0FnSUhSb2FYTXVjbVZrY21GM0tDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2NHbDBZMmdvYVdRNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhSb2FYTXViV0Z5YTJWeWN5NW1iM0pGWVdOb0tDaHRZWEpyWlhJcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNodFlYSnJaWEl1WjJWMFJHRjBZU2dwTG1sa0lEMDlQU0JwWkNrZ2UxeHVJQ0FnSUNBZ0lDQnRZWEpyWlhJdVptbHlaU2duWTJ4cFkyc25LVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0I5WEc0Z0lDOHFLaURtdUxMbW41UGt1THJtbGFQbmdybmxtNzRnS2k5Y2JpQWdjSEp2ZEdWamRHVmtJR052Ym1acFowMWhjbXRsY2t4aGVXVnlLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbTFoY210bGNreGhlV1Z5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTFoY210bGNreGhlV1Z5TG5KbGJXOTJaU2dwWEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRlJQUkU4NklPUzhtT1dNbGx4dUlDQWdJSFJvYVhNdWFXNXBkRTFoY210bGNuTW9LVnh1SUNBZ0lHTnZibk4wSUdOaGJuWmhjMGxqYjI1TVlYbGxjaUE5SUV3dVkyRnVkbUZ6U1dOdmJreGhlV1Z5S0h0OUtTNWhaR1JVYnloMGFHbHpMbTFoY0NsY2JpQWdJQ0F2THlEbXQ3dmxpcURuZ3JubGg3dmt1b3ZrdTdaY2JpQWdJQ0JqWVc1MllYTkpZMjl1VEdGNVpYSXVZV1JrVDI1RGJHbGphMHhwYzNSbGJtVnlLQ2hmTENCYmV5QmtZWFJoT2lCdFlYSnJaWElnZlYwcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRnlhMlZ5UTJ4cFkydElZVzVrYkdWeUtHMWhjbXRsY2lCaGN5Qk5ZWEpyWlhJcFhHNGdJQ0FnZlNsY2JpQWdJQ0F2THlEbXQ3dmxpcUFnYUc5MlpYSWc1THFMNUx1MlhHNGdJQ0FnWTJGdWRtRnpTV052Ymt4aGVXVnlMbUZrWkU5dVNHOTJaWEpNYVhOMFpXNWxjaWdvWHl3Z1czc2daR0YwWVRvZ2JXRnlhMlZ5SUgxZEtTQTlQaUI3WEc0Z0lDQWdJQ0F2THlEa3VZdmxpWTNtbklrZ2FHOTJaWElnNTVxRTVZV3o2WmV0SUhSdmIyeDBhWEJjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbWh2ZG1WeVpXUk5ZWEpyWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b2IzWmxjbVZrVFdGeWEyVnlMbU5zYjNObFZHOXZiSFJwY0NncFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbWh2ZG1WeVpXUk5ZWEpyWlhJZ1BTQnRZWEpyWlhJZ1lYTWdUV0Z5YTJWeVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtaHZkbVZ5WldSTllYSnJaWEl1WjJWMFZHOXZiSFJwY0NncEtTQjdYRzRnSUNBZ0lDQWdJQzh2SU9XbWd1YWVuT1czc3VlN2oraXV2dWU5cmlCMGIyOXNkR2x3SU9lYnRPYU9wZVd4bGVla3VpQjBiMjlzZEdsd1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUc5MlpYSmxaRTFoY210bGNpNXZjR1Z1Vkc5dmJIUnBjQ2dwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlEbGtLYmxpSm5udTVIbHJwb2dkRzl2YkhScGNDRGx1YmJsc1pYbnBMcGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NTBiMjlzZEdsd1FYUjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YUc5MlpYSmxaRTFoY210bGNpNWlhVzVrVkc5dmJIUnBjQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDY25JQ3NnZEdocGN5NW9iM1psY21Wa1RXRnlhMlZ5TG1kbGRFUmhkR0VvS1Z0MGFHbHpMbTl3ZEdsdmJuTXVkRzl2YkhScGNFRjBkSEpkWEc0Z0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTbGNiaUFnSUNCallXNTJZWE5KWTI5dVRHRjVaWEl1WVdSa1RXRnlhMlZ5Y3loMGFHbHpMbTFoY210bGNuTXBYRzVjYmlBZ0lDQjBhR2x6TG0xaGNDNXZiaWduZW05dmJYTjBZWEowSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acGMybGliR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTUwZVhCbElEMDlQU0FuYldGeWEyVnlKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNIUnBiMjV6TG5KbGJtUmxjbFI1Y0dVZ1BUMDlJQ2R3YjJsdWRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoY0M1eVpXMXZkbVZNWVhsbGNpaDBhR2x6TG0xaGNtdGxja3hoZVdWeUtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xaGNDNXlaVzF2ZG1WTVlYbGxjaWgwYUdsekxtMWhjbXRsY2t4aGVXVnlLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBYRzRnSUNBZ2RHaHBjeTV0WVhBdWIyNG9KM3B2YjIxbGJtUW5MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWx6YVdKc1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuUjVjR1VnUFQwOUlDZHRZWEpyWlhJbktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVjbVZ1WkdWeVZIbHdaU0E5UFQwZ0ozQnZhVzUwSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRndMbUZrWkV4aGVXVnlLSFJvYVhNdWJXRnlhMlZ5VEdGNVpYSXBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXRndMbUZrWkV4aGVXVnlLSFJvYVhNdWJXRnlhMlZ5VEdGNVpYSXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTbGNibHh1SUNBZ0lDOHZJT2lubytXR3MrV0luZWFzb2VhNHN1YWZrK1M0amVXSHV1V2J2dWFnaCttWHJ1bWltRnh1SUNBZ0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTV0WVhBdWNHRnVWRzhvZEdocGN5NXRZWEF1WjJWMFEyVnVkR1Z5S0NrcFhHNGdJQ0FnZlNsY2JseHVJQ0FnSUhSb2FYTXViV0Z5YTJWeVRHRjVaWElnUFNCallXNTJZWE5KWTI5dVRHRjVaWEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhKclpYSk1ZWGxsY2x4dUlDQjlYRzRnSUhCeWIzUmxZM1JsWkNCblpYUlViMjlzVkdsd1EyOXVkR1Z1ZENoa1lYUmhPaUJFWVhSaFRHbHpkRWwwWlcwcElIdGNiaUFnSUNCeVpYUjFjbTRnSnljZ0t5QmtZWFJoVzNSb2FYTXViM0IwYVc5dWN5NTBiMjlzZEdsd1FYUjBjbDFjYmlBZ2ZWeHVJQ0J3Y21sMllYUmxJR2x1YVhSTllYSnJaWEp6S0NrZ2UxeHVJQ0FnSUhSb2FYTXViV0Z5YTJWeWN5QTlJRnRkWEc0Z0lDQWdkR2hwY3k1a1lYUmhUR2x6ZEM1bWIzSkZZV05vS0Noa1lYUmhLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0JzWVhsbGNpQTlJRXd1WjJWdlNsTlBUaWhrWVhSaExtZGxiMjFsZEhKNUtTNW5aWFJNWVhsbGNuTW9LVnN3WFZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0J0WVhKclpYSWdQU0J1WlhjZ1RXRnlhMlZ5S0Z4dUlDQWdJQ0FnSUNCYlhHNGdJQ0FnSUNBZ0lDQWdLR3hoZVdWeUlHRnpJRXd1VFdGeWEyVnlLUzVuWlhSTVlYUk1ibWNvS1M1c1lYUXNYRzRnSUNBZ0lDQWdJQ0FnS0d4aGVXVnlJR0Z6SUV3dVRXRnlhMlZ5S1M1blpYUk1ZWFJNYm1jb0tTNXNibWNzWEc0Z0lDQWdJQ0FnSUYwc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWTI5dU9pQjBhR2x6TG1kbGRFMWhjbXRsY2tsamIyNG9aR0YwWVNrc1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDbGNibHh1SUNBZ0lDQWdMeThnNWJDRzU1dTQ1WVd6NVlDODU3dVI1YTZhNVlpd0lHMWhjbXRsY3VTNGlseHVJQ0FnSUNBZ2JXRnlhMlZ5TG5ObGRFUmhkR0VvWkdGMFlTbGNibHh1SUNBZ0lDQWdkR2hwY3k1dFlYSnJaWEp6TG5CMWMyZ29iV0Z5YTJWeUtWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ0x5OGc1YVNFNTVDR0lHMWhjbXRsY2lEbmdybmxoN3ZrdW92a3U3WmNiaUFnY0hKcGRtRjBaU0J0WVhKclpYSkRiR2xqYTBoaGJtUnNaWElvYldGeWEyVnlPaUJOWVhKclpYSXBJSHRjYmlBZ0lDQjBhR2x6TG1adlkzVnpaV1JOWVhKclpYSWdQU0J0WVhKclpYSmNiaUFnSUNBdkx5RGxpS0RwbWFUbGlZM2t1SURrdUtybWxMN2xwS2ZsbTc3bW9JZGNiaUFnSUNCcFppQW9kR2hwY3k1bWIyTjFjMlZrUkdsemNHeGhlVTFoY210bGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1bWIyTjFjMlZrUkdsemNHeGhlVTFoY210bGNpNXlaVzF2ZG1WR2NtOXRLSFJvYVhNdWJXRndLVnh1SUNBZ0lIMWNiaUFnSUNBdkx5RG5sSi9taUpEbHZaUGxpWTNtbEw3bHBLZmxtNzdtb0lkY2JpQWdJQ0IwYUdsekxtWnZZM1Z6WldSRWFYTndiR0Y1VFdGeWEyVnlJRDBnYm1WM0lFMWhjbXRsY2lodFlYSnJaWEl1WjJWMFRHRjBURzVuS0Nrc0lIdGNiaUFnSUNBZ0lHbGpiMjQ2SUhSb2FYTXVaMlYwVEdGeVoyVnlUV0Z5YTJWeVNXTnZiaWh0WVhKclpYSXVaMlYwUkdGMFlTZ3BLU3hjYmlBZ0lDQjlLVnh1SUNBZ0lIUm9hWE11Wm05amRYTmxaRVJwYzNCc1lYbE5ZWEpyWlhJdVlXUmtWRzhvZEdocGN5NXRZWEFwWEc1Y2JpQWdJQ0IwYUdsekxtWnZZM1Z6WldSRWFYTndiR0Y1VFdGeWEyVnlYRzRnSUNBZ0lDQXVZbWx1WkZCdmNIVndLSFJvYVhNdVoyVjBVRzl3ZFhCRGIyNTBaVzUwS0cxaGNtdGxjaTVuWlhSRVlYUmhLQ2twS1Z4dUlDQWdJQ0FnTG05d1pXNVFiM0IxY0NncFhHNGdJQ0FnZEdocGN5NW1iMk4xYzJWa1JHbHpjR3hoZVUxaGNtdGxjaTV2YmlnbmNHOXdkWEJqYkc5elpTY3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11Wm05amRYTmxaRVJwYzNCc1lYbE5ZWEpyWlhJdWNtVnRiM1psS0NsY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnZEdocGN5NXRZWEF1Y0dGdVZHOG9kR2hwY3k1bWIyTjFjMlZrVFdGeWEyVnlMbWRsZEV4aGRFeHVaeWdwS1Z4dUlDQWdJSFJvYVhNdVkyaGhibTVsYkVaMWJtTW9KMjl1TFdOc2FXTnJMVzFoY210bGNpY3NJRzFoY210bGNpbGNiaUFnZlZ4dUlDQndjbWwyWVhSbElHTnZibVpwWjBOc2RYTjBaWEpNWVhsbGNpZ3BJSHRjYmlBZ0lDQXZMeURsc1pYbnBMcm9nWnJsa0lqbG03N2xzWUpjYmlBZ0lDQnBaaUFvZEdocGN5NWpiSFZ6ZEdWeVRHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMngxYzNSbGNreGhlV1Z5TG5KbGJXOTJaU2dwWEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11WTJ4MWMzUmxja3hoZVdWeUlEMGdUQzV0WVhKclpYSkRiSFZ6ZEdWeVIzSnZkWEFvS1Z4dUlDQWdJSFJvYVhNdVkyeDFjM1JsY2t4aGVXVnlMbUZrWkV4aGVXVnljeWhjYmlBZ0lDQWdJSFJvYVhNdWJXRnlhMlZ5Y3k1dFlYQW9LRzBwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRnlhMlZ5SUQwZ2JtVjNJRTFoY210bGNpaHRMbWRsZEV4aGRFeHVaeWdwTENCN1hHNGdJQ0FnSUNBZ0lDQWdhV052YmpvZ2RHaHBjeTVuWlhSTllYSnJaWEpKWTI5dUtHMHVaMlYwUkdGMFlTZ3BLU3hjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ2JXRnlhMlZ5TG5ObGRFUmhkR0VvYlM1blpYUkVZWFJoS0NrcFhHNGdJQ0FnSUNBZ0lHMWhjbXRsY2k1aWFXNWtWRzl2YkhScGNDZ25KeUFySUcxaGNtdGxjaTVuWlhSRVlYUmhLQ2xiZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCQmRIUnlYU2xjYmlBZ0lDQWdJQ0FnYldGeWEyVnlMbTl1S0NkamJHbGpheWNzSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFoY210bGNrTnNhV05yU0dGdVpHeGxjaWh0WVhKclpYSXBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ0WVhKclpYSmNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0tWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNkWE4wWlhKTVlYbGxjbHh1SUNCOVhHNWNiaUFnTHlvcUlPYTRzdWFmaytTNHV1ZURyZVdLbStXYnZpQXFMMXh1SUNCd2NtbDJZWFJsSUdOdmJtWnBaMGhsWVhSTVlYbGxjaWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVvWldGMFRHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhR1ZoZEV4aGVXVnlMbkpsYlc5MlpTZ3BYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXViV0Z5YTJWeWN5NW1iM0pGWVdOb0tDaHRZWEpyWlhJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHeGhkRXh1WnlBOUlHMWhjbXRsY2k1blpYUk1ZWFJNYm1jb0tWeHVJQ0FnSUNBZ1kyOXVjM1FnWkdsdFpXNXphVzl1UVhSMGNpQTlYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1b1pXRjBUM0IwYVc5dWN5QW1KaUIwYUdsekxtOXdkR2x2Ym5NdWFHVmhkRTl3ZEdsdmJuTXVaR2x0Wlc1emFXOXVRWFIwY2x4dUlDQWdJQ0FnYkdWMElHRnNkQ0E5WEc0Z0lDQWdJQ0FnSUNoa2FXMWxibk5wYjI1QmRIUnlJQ1ltSUcxaGNtdGxjaTVuWlhSRVlYUmhLQ2xiWkdsdFpXNXphVzl1UVhSMGNsMHBJSHg4WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NW9aV0YwVDNCMGFXOXVjeTV0WVhoY2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1lXeDBJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQmhiSFFnUFNCMGFHbHpMbTl3ZEdsdmJuTXVhR1ZoZEU5d2RHbHZibk11YldGNFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCdFlYSnJaWEl1YzJWMFRHRjBURzVuS0V3dWJHRjBURzVuS0d4aGRFeHVaeTVzWVhRc0lHeGhkRXh1Wnk1c2JtY3NJR0ZzZENrcFhHNGdJQ0FnZlNsY2JpQWdJQ0IwYUdsekxtaGxZWFJNWVhsbGNpQTlJRXd1YUdWaGRFeGhlV1Z5S0Z4dUlDQWdJQ0FnZEdocGN5NXRZWEpyWlhKekxtMWhjQ2dvYVhRcElEMCtJR2wwTG1kbGRFeGhkRXh1WnlncEtTeGNiaUFnSUNBZ0lDOHZJRlJQUkU4NklPUzl2K2VVcUNCdFpYSm5aVU52Ym1acFp5RG5yb0RsakpaY2JpQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUhSb2FYTXViM0IwYVc5dWN5NW9aV0YwVDNCMGFXOXVjeXdnZXlCdGFXNVBjR0ZqYVhSNU9pQXhJSDBwWEc0Z0lDQWdLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWhsWVhSTVlYbGxjbHh1SUNCOVhHNWNiaUFnY0hKcGRtRjBaU0JuWlhSTVlYSm5aWEpOWVhKclpYSkpZMjl1S0dSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOW5aWFJOWVhKclpYSkpZMjl1S0dSaGRHRXNJSFJ5ZFdVcFhHNGdJSDFjYmx4dUlDQndjbWwyWVhSbElHZGxkRTFoY210bGNrbGpiMjRvWkdGMFlUb2dSR0YwWVV4cGMzUkpkR1Z0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyZGxkRTFoY210bGNrbGpiMjRvWkdGMFlTd2dabUZzYzJVcFhHNGdJSDFjYmx4dUlDQXZLaW9nNkk2MzVZK1c1YjJUNVltTklHMWhjbXRsY2lEcG5JRG9wb0hsc1pYbnBMcm5tb1FnYVdOdmJpQXFMMXh1SUNCd2NtbDJZWFJsSUY5blpYUk5ZWEpyWlhKSlkyOXVLRnh1SUNBZ0lHUmhkR0U2SUVSaGRHRk1hWE4wU1hSbGJTeGNiaUFnSUNCcGMweGhjbWRsY2pvZ1ltOXZiR1ZoYmx4dUlDQXBPaUJNTGtsamIyNGdmQ0JNTGtScGRrbGpiMjRnZTF4dUlDQWdJR052Ym5OMElHbGpiMjVUYVhwbElEMGdkR2hwY3k1dmNIUnBiMjV6TG1samIyNVRhWHBsWEc0Z0lDQWdZMjl1YzNRZ2FXTnZia0Z1WTJodmNpQTlJSFJvYVhNdWIzQjBhVzl1Y3k1cFkyOXVRVzVqYUc5eVhHNGdJQ0FnWTI5dWMzUWdiR0Z5WjJWeVNXTnZibE5wZW1VZ1BTQmJhV052YmxOcGVtVmJNRjBnS2lBeExqVXNJR2xqYjI1VGFYcGxXekZkSUNvZ01TNDFYU0JoY3lCYlhHNGdJQ0FnSUNCdWRXMWlaWElzWEc0Z0lDQWdJQ0J1ZFcxaVpYSmNiaUFnSUNCZFhHNGdJQ0FnWTI5dWMzUWdiR0Z5WjJWeVNXTnZia0Z1WTJodmNpQTlJRnRwWTI5dVFXNWphRzl5V3pCZElDb2dNUzQxTENCcFkyOXVRVzVqYUc5eVd6RmRJQ29nTVM0MVhTQmhjeUJiWEc0Z0lDQWdJQ0J1ZFcxaVpYSXNYRzRnSUNBZ0lDQnVkVzFpWlhKY2JpQWdJQ0JkWEc1Y2JpQWdJQ0JqYjI1emRDQnBZMjl1UTI5c2IzSWdQU0IwYUdsekxtOXdkR2x2Ym5NdWFXTnZia052Ykc5eVhHNWNiaUFnSUNCemQybDBZMmdnS0hSb2FYTXViM0IwYVc5dWN5NXBZMjl1Vkhsd1pTa2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFXMWhaMlVuT2lCN1hHNGdJQ0FnSUNBZ0lDOHZJSEpsZEhWeWJpQk1MbWxqYjI0b2UxeHVJQ0FnSUNBZ0lDQXZMeUFnSUdsamIyNVZjbXc2SUhSb2FYTXViM0IwYVc5dWN5NXBZMjl1U1cxaFoyVlZjbXdzWEc0Z0lDQWdJQ0FnSUM4dklDQWdhV052YmxOcGVtVTZJR2x6VEdGeVoyVnlJRDhnYkdGeVoyVnlTV052YmxOcGVtVWdPaUJwWTI5dVUybDZaU3hjYmlBZ0lDQWdJQ0FnTHk4Z0lDQnBZMjl1UVc1amFHOXlMRnh1SUNBZ0lDQWdJQ0F2THlCOUtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyRnpaU0FuWm05dWRGOWpiR0Z6Y3ljNlhHNGdJQ0FnSUNCallYTmxJQ2R6ZVcxaWIyd25PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRXNXBZMjlrWlNjNklIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFd3VaR2wyU1dOdmJpaDdYRzRnSUNBZ0lDQWdJQ0FnYUhSdGJEb2dkR2hwY3k1blpYUkRkWE4wYjIxSlkyOXVTRlJOVENoa1lYUmhMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBZMjl1VTJsNlpUb2dhWE5NWVhKblpYSWdQeUJzWVhKblpYSkpZMjl1VTJsNlpTQTZJR2xqYjI1VGFYcGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXTnZia052Ykc5eUxGeHVJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUb2dhWE5NWVhKblpYSWdQeUFuYkdGeVoyVXRaR2wyTFdsamIyNHRiV0Z5YTJWeUp5QTZJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lHbGpiMjVUYVhwbE9pQnBjMHhoY21kbGNpQS9JR3hoY21kbGNrbGpiMjVUYVhwbElEb2dhV052YmxOcGVtVXNYRzRnSUNBZ0lDQWdJQ0FnYVdOdmJrRnVZMmh2Y2pvZ2FYTk1ZWEpuWlhJZ1B5QnNZWEpuWlhKSlkyOXVRVzVqYUc5eUlEb2dhV052YmtGdVkyaHZjaXhjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdSbFptRjFiSFE2SUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dEbG03N21vSWZuc2J2bG5vdmt1STNtbEsvbWpJRmNJaVI3ZEdocGN5NXZjSFJwYjI1ekxtbGpiMjVVZVhCbGZWd2lZQ2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjSEpwZG1GMFpTQm5aWFJEZFhOMGIyMUpZMjl1U0ZSTlRDaGNiaUFnSUNCa1lYUmhPaUJFWVhSaFRHbHpkRWwwWlcwc1hHNGdJQ0FnYjNCMGFXOXVjejg2SUVsamIyNVNaVzVrWlhKR2RXNWpUM0IwYVc5dVhHNGdJQ2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NXBZMjl1VW1WdVpHVnlaWElwSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCMGFHbHpMbTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV2Y0hScGIyNXpMbWxqYjI1U1pXNWtaWEpsY2loa1lYUmhMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lIMWNiaUFnSUNCemQybDBZMmdnS0hSb2FYTXViM0IwYVc5dWN5NXlaVzVrWlhKUWIybHVkRU52Ykc5eVZIbHdaU2tnZTF4dUlDQWdJQ0FnWTJGelpTQW5jMmx1WjJ4bEp6b2dlMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFJvYVhNdWIzQjBhVzl1Y3k1cFkyOXVWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SU9TOXYrZVVxQ0JqYkdGemMxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyWnZiblJmWTJ4aGMzTW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFTQmpiR0Z6Y3oxY0lpUjdkR2hwY3k1dmNIUnBiMjV6TG1samIyNURiR0Z6YzMxY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0pIdHZjSFJwYjI1ekxtbGpiMjVEYjJ4dmNuMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjI1MExYTnBlbVU2SUNSN2IzQjBhVzl1Y3k1cFkyOXVVMmw2WlZzd1hYMXdlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQzh2SU9TOXYrZVVxQ0J6ZG1kY2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkemVXMWliMnduT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM1puSUdOc1lYTnpQVndpYVdOdmJpMXplVzFpYjJ4Y0lpQmhjbWxoTFdocFpHUmxiajFjSW5SeWRXVmNJajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4ZFhObElIaHNhVzVyT21oeVpXWTlYQ0lrZTNSb2FYTXViM0IwYVc5dWN5NXBZMjl1VTNsdFltOXNmVndpSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmMzWm5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lGeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBdkx5RGt2Yi9ubEtnZ2RXNXBZMjlrWlZ4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNWdWFXTnZaR1VuT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThhVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelBWd2lKSHQwYUdsekxtOXdkR2x2Ym5NdWFXTnZia05zWVhOemZWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdVOVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eU9pQWtlMjl3ZEdsdmJuTXVhV052YmtOdmJHOXlmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmJuUXRjMmw2WlRvZ0pIdHZjSFJwYjI1ekxtbGpiMjVUYVhwbFd6QmRmWEI0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjdkR2hwY3k1dmNIUnBiMjV6TG1samIyNVZibWxqYjJSbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyaytYRzRnSUNBZ0lDQWdJQ0FnSUNCZ1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZWE5sSUNkelpXZHRaVzUwWldRbk9pQjdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kR2hwY3k1dmNIUnBiMjV6TG1samIyNVVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnNUwyLzU1U29JR05zWVhOelhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblptOXVkRjlqYkdGemN5YzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4cFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM005WENJa2UzUm9hWE11YjNCMGFXOXVjeTVwWTI5dVEyeGhjM045WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVDFjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k2SUNSN2RHaHBjeTVuWlhSVFpXZHRaVzUwWldSTllYSnJaWEpEYjJ4dmNpaGtZWFJoS1gwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iMjUwTFhOcGVtVTZJQ1I3YjNCMGFXOXVjeTVwWTI5dVUybDZaVnN3WFgxd2VEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJT1M5ditlVXFDQnpkbWRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2R6ZVcxaWIyd25PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzWm5JR05zWVhOelBWd2lhV052YmkxemVXMWliMnhjSWlCaGNtbGhMV2hwWkdSbGJqMWNJblJ5ZFdWY0lqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThkWE5sSUhoc2FXNXJPbWh5WldZOVhDSWtlM1JvYVhNdWIzQjBhVzl1Y3k1cFkyOXVVM2x0WW05c2ZWd2lJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YzNablBseHVJQ0FnSUNBZ0lDQWdJQ0FnWUZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0F2THlEa3ZiL25sS2dnZFc1cFkyOWtaVnh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1Z1YVdOdlpHVW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aUpIdDBhR2x6TG05d2RHbHZibk11YVdOdmJrTnNZWE56ZlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBa2UzUm9hWE11WjJWMFUyVm5iV1Z1ZEdWa1RXRnlhMlZ5UTI5c2IzSW9aR0YwWVNsOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl1ZEMxemFYcGxPaUFrZTI5d2RHbHZibk11YVdOdmJsTnBlbVZiTUYxOWNIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkh0MGFHbHpMbTl3ZEdsdmJuTXVhV052YmxWdWFXTnZaR1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdSbFptRjFiSFE2SUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lHQnlaVzVrWlhKUWIybHVkRU52Ykc5eVZIbHdaU0RrdUkzbWxLL21qSUZjSWlSN2RHaHBjeTV2Y0hScGIyNXpMbkpsYm1SbGNsQnZhVzUwUTI5c2IzSlVlWEJsZlZ3aVlGeHVJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIQnlhWFpoZEdVZ1kyRmphR1ZUWldkdFpXNTBVR0Z5WVcxektDa2dlMXh1SUNBZ0lHTnZibk4wSUhObFoyMWxiblJsWkV4bGJtZDBhQ0E5SUhSb2FYTXViM0IwYVc5dWN5NXpaV2R0Wlc1MFpXUkRiMnh2Y25NdWJHVnVaM1JvWEc0Z0lDQWdiR1YwSUcxaGVGWmhiQ0E5SUMxSmJtWnBibWwwZVZ4dUlDQWdJR3hsZENCdGFXNVdZV3dnUFNCSmJtWnBibWwwZVZ4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnWkdGMFlTQnZaaUIwYUdsekxtUmhkR0ZNYVhOMEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMllXd2dQU0JrWVhSaFczUm9hWE11YjNCMGFXOXVjeTV6WldkdFpXNTBaV1JCZEhSeVhWeHVJQ0FnSUNBZ2JXRjRWbUZzSUQwZ1RXRjBhQzV0WVhnb2JXRjRWbUZzTENCMllXd3BYRzRnSUNBZ0lDQnRhVzVXWVd3Z1BTQk5ZWFJvTG0xcGJpaHRhVzVXWVd3c0lIWmhiQ2xjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYzNSbGNDQTlJQ2h0WVhoV1lXd2dMU0J0YVc1V1lXd2dLeUF4S1NBdklITmxaMjFsYm5SbFpFeGxibWQwYUZ4dUlDQWdJSFJvYVhNdWMyVm5iV1Z1ZEdWa1RXbHVJRDBnYldsdVZtRnNYRzRnSUNBZ2RHaHBjeTV6WldkdFpXNTBaV1JUZEdWd0lEMGdjM1JsY0Z4dUlDQjlYRzRnSUhCeWFYWmhkR1VnWjJWMFUyVm5iV1Z1ZEdWa1RXRnlhMlZ5UTI5c2IzSW9aR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRLVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQmpiMjV6ZENCMllXd2dQU0JrWVhSaFczUm9hWE11YjNCMGFXOXVjeTV6WldkdFpXNTBaV1JCZEhSeVhWeHVJQ0FnSUdOdmJuTjBJR052Ykc5eUlEMGdkR2hwY3k1dmNIUnBiMjV6TG5ObFoyMWxiblJsWkVOdmJHOXljMXRjYmlBZ0lDQWdJQ2gyWVd3Z0xTQjBhR2x6TG5ObFoyMWxiblJsWkUxcGJpa2dMeUIwYUdsekxuTmxaMjFsYm5SbFpGTjBaWEJjYmlBZ0lDQmRYRzRnSUNBZ2NtVjBkWEp1SUdOdmJHOXlYRzRnSUgxY2JpQWdjSEpwZG1GMFpTQm5aWFJRYjNCMWNFTnZiblJsYm5Rb1pHRjBZVG9nUkdGMFlVeHBjM1JKZEdWdEtTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtOXdkR2x2Ym5NdWNHOXdkWEJCZEhSeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5ZGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0FrZTNSb2FYTXViM0IwYVc5dWN5NXdiM0IxY0VGMGRISjlPaUFrZTJSaGRHRmJkR2hwY3k1dmNIUnBiMjV6TG5CdmNIVndRWFIwY2wxOVlGeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJFWVhSaFRHbHpkRWwwWlcwZ2ZTQm1jbTl0SUNjdUxpOWtaV1pwYm1sMGFXOXVjeWRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzlzZVdkdmJpQmxlSFJsYm1SeklFd3VVRzlzZVdkdmJpQjdYRzRnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwMllYSnBZV0pzWlMxdVlXMWxYRzRnSUhCeWFYWmhkR1VnWDE5a1lYUmhPaUJFWVhSaFRHbHpkRWwwWlcxY2JpQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdiR0YwYkc1bmN6cGNiaUFnSUNBZ0lId2dUQzVNWVhSTWJtZEZlSEJ5WlhOemFXOXVXMTFjYmlBZ0lDQWdJSHdnVEM1TVlYUk1ibWRGZUhCeVpYTnphVzl1VzExYlhWeHVJQ0FnSUNBZ2ZDQk1Ma3hoZEV4dVowVjRjSEpsYzNOcGIyNWJYVnRkVzEwc1hHNGdJQ0FnYjNCMGFXOXVjejg2SUV3dVVHOXNlV3hwYm1WUGNIUnBiMjV6WEc0Z0lDa2dlMXh1SUNBZ0lITjFjR1Z5S0d4aGRHeHVaM01zSUc5d2RHbHZibk1wWEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZEVSaGRHRW9aR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRLU0I3WEc0Z0lDQWdkR2hwY3k1ZlgyUmhkR0VnUFNCa1lYUmhYRzRnSUgxY2JpQWdjSFZpYkdsaklHZGxkRVJoZEdFb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMTlrWVhSaFhHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJRVJoZEdGTWFYTjBTWFJsYlN3Z1EyaGhibTVsYkVaMWJtTWdmU0JtY205dElDY3VMaTlrWldacGJtbDBhVzl1Y3lkY2JtbHRjRzl5ZENCUWIyeDVaMjl1SUdaeWIyMGdKeTR2VUc5c2VXZHZiaWRjYmx4dUx5b3FJT2E0c3VhZmsrbWluT2lKc3VhZ3QrVzhqeURsalpYb2liSjg1WWlHNXE2MUlDb3ZYRzUwZVhCbElGQnZiSGxuYjI1TVlYbGxjbEpsYm1SbGNrTnZiRzl5Vkhsd1pTQTlJQ2R6YVc1bmJHVW5JSHdnSjNObFoyMWxiblJsWkNkY2JtbHVkR1Z5Wm1GalpTQlFiMng1WjI5dVRHRjVaWEpQY0hScGIyNXpJR1Y0ZEdWdVpITWdUQzVRYjJ4NWJHbHVaVTl3ZEdsdmJuTWdlMXh1SUNCeVpXNWtaWEpRYjJ4NVoyOXVRMjlzYjNKVWVYQmxPaUJRYjJ4NVoyOXVUR0Y1WlhKU1pXNWtaWEpEYjJ4dmNsUjVjR1ZjYmx4dUlDQXZLaW9nY0c5d2RYQWc1YkdWNTZTNjVhMlg1cTYxSUNvdlhHNGdJSEJ2Y0hWd1FYUjBjajg2SUhOMGNtbHVaMXh1SUNBdktpb2dkRzl2YkhScGNDRGxzWlhucExybHJaZm1yclVnS2k5Y2JpQWdkRzl2YkhScGNFRjBkSEkvT2lCemRISnBibWRjYmx4dUlDQnZjR0ZqYVhSNVB6b2diblZ0WW1WeVhHNWNiaUFnTHlvcUlPV0lodWF1dGVhNHN1YWZrK2U3bitpdW9lV3RsK2F1dFNBcUwxeHVJQ0J6WldkdFpXNTBaV1JCZEhSeVB6b2djM1J5YVc1blhHNGdJSE5sWjIxbGJuUmxaRU52Ykc5eWN6ODZJSE4wY21sdVoxdGRYRzU5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlFiMng1WjI5dWMweGhlV1Z5SUh0Y2JpQWdjSFZpYkdsaklIUjVjR1U2SUhOMGNtbHVaMXh1WEc0Z0lIQnliM1JsWTNSbFpDQjJhWE5wWW14bE9pQmliMjlzWldGdVhHNGdJSEJ5YjNSbFkzUmxaQ0JzWVhsbGNqb2dUQzVNWVhsbGNrZHliM1Z3WEc1Y2JpQWdjSEpwZG1GMFpTQnRZWEE2SUV3dVRXRndYRzRnSUhCeWFYWmhkR1VnWkdGMFlVeHBjM1E2SUVSaGRHRk1hWE4wU1hSbGJWdGRYRzRnSUhCeWFYWmhkR1VnYjNCMGFXOXVjem9nVUc5c2VXZHZia3hoZVdWeVQzQjBhVzl1YzF4dUlDQndjbWwyWVhSbElHTm9ZVzV1Wld4R2RXNWpPaUJEYUdGdWJtVnNSblZ1WTF4dUlDQndjbWwyWVhSbElIQnZiSGxuYjI1ek9pQlFiMng1WjI5dVcxMWNiaUFnY0hKcGRtRjBaU0J6WldkdFpXNTBaV1JOYVc0NklHNTFiV0psY2x4dUlDQndjbWwyWVhSbElITmxaMjFsYm5SbFpGTjBaWEE2SUc1MWJXSmxjbHh1SUNBdkx5QndjbWwyWVhSbElHWnZZM1Z6WldSUWIyeDVaMjl1T2lCUWIyeDVaMjl1WEc0Z0lIQnlhWFpoZEdVZ2NHOXNlV2R2Ymt4aGVXVnlPaUJNTGt4aGVXVnlSM0p2ZFhCY2JseHVJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0J0WVhBNklFd3VUV0Z3TEZ4dUlDQWdJR1JoZEdGTWFYTjBPaUJFWVhSaFRHbHpkRWwwWlcxYlhTeGNiaUFnSUNCdmNIUnBiMjV6T2lCUWIyeDVaMjl1VEdGNVpYSlBjSFJwYjI1ekxGeHVJQ0FnSUdOb1lXNXVaV3hHZFc1ak9pQkRhR0Z1Ym1Wc1JuVnVZMXh1SUNBcElIdGNiaUFnSUNCamIyNXpkQ0JrWldaaGRXeDBUM0IwYVc5dWN6b2dVRzlzZVdkdmJreGhlV1Z5VDNCMGFXOXVjeUE5SUh0Y2JpQWdJQ0FnSUdOdmJHOXlPaUFuSXpNek9EaEdSaWNzWEc0Z0lDQWdJQ0JtYVd4c1EyOXNiM0k2SUNjak16TTRPRVpHSnl4Y2JpQWdJQ0FnSUhKbGJtUmxjbEJ2YkhsbmIyNURiMnh2Y2xSNWNHVTZJQ2R6YVc1bmJHVW5MRnh1SUNBZ0lDQWdjMlZuYldWdWRHVmtRMjlzYjNKek9pQmJKeU16TXpnNFJrWW5YU3hjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTUwZVhCbElEMGdKM0J2YkhsbmIyNG5YRzRnSUNBZ2RHaHBjeTV0WVhBZ1BTQnRZWEJjYmlBZ0lDQjBhR2x6TG1SaGRHRk1hWE4wSUQwZ1pHRjBZVXhwYzNSY2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1elhHNGdJQ0FnZEdocGN5NWphR0Z1Ym1Wc1JuVnVZeUE5SUdOb1lXNXVaV3hHZFc1alhHNWNiaUFnSUNCMGFHbHpMblpwYzJsaWJHVWdQU0IwY25WbFhHNGdJQ0FnZEdocGN5NXdiMng1WjI5dWN5QTlJRnRkWEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwWldSTmFXNGdQU0JKYm1acGJtbDBlVnh1SUNBZ0lIUm9hWE11YzJWbmJXVnVkR1ZrVTNSbGNDQTlJREZjYmlBZ0lDQXZMeUIwYUdsekxtWnZZM1Z6WldSUWIyeDVaMjl1SUQwZ2JuVnNiRnh1WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z1pHVm1ZWFZzZEU5d2RHbHZibk1zSUc5d2RHbHZibk1wWEc1Y2JpQWdJQ0F2THlEbnZKUGxyWmdnYzJWbmJXVnVkQ0RubTdqbGhiUG1sYkRtamE1Y2JpQWdJQ0IwYUdsekxtTmhZMmhsVTJWbmJXVnVkRkJoY21GdGN5Z3BYRzRnSUNBZ2RHaHBjeTVwYm1sMFVHOXNlV2R2Ym5Nb0tWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCa2NtRjNLRzl3ZEdsdmJuTS9PaUJRYjJ4NVoyOXVUR0Y1WlhKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdUMkpxWldOMExtRnpjMmxuYmloMGFHbHpMbTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZrY21GM0tDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2NtVmtjbUYzS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViR0Y1WlhJdWNtVnRiM1psS0NsY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1c1lYbGxjaUE5SUhSb2FYTXVZMjl1Wm1sblVHOXNlV2R2Ymt4aGVXVnlLQ2xjYmlBZ0lDQjBhR2x6TG0xaGNDNWhaR1JNWVhsbGNpaDBhR2x6TG14aGVXVnlLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JpQWdjSFZpYkdsaklHWnBkRUp2ZFc1a2N5Z3BJSHRjYmlBZ0lDQjBhR2x6TG0xaGNDNW1hWFJDYjNWdVpITW9kR2hwY3k1blpYUkNiM1Z1WkhNb0tTbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ1oyVjBRbTkxYm1SektDazZJRXd1VEdGMFRHNW5RbTkxYm1SelJYaHdjbVZ6YzJsdmJpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNHOXNlV2R2Ym5NdWJHVnVaM1JvSUR3OUlEQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xaGNDNW5aWFJDYjNWdVpITW9LVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXdiMng1WjI5dWN5NXlaV1IxWTJVb1hHNGdJQ0FnSUNBb2NISmxkaXdnWTNWeWNpa2dQVDRnY0hKbGRpNWxlSFJsYm1Rb1kzVnljaTVuWlhSQ2IzVnVaSE1vS1Nrc1hHNGdJQ0FnSUNCMGFHbHpMbkJ2YkhsbmIyNXpXekJkTG1kbGRFSnZkVzVrY3lncFhHNGdJQ0FnS1Z4dUlDQjlYRzRnSUhCMVlteHBZeUJrWlhOMGNtOTVLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbXhoZVdWeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG14aGVXVnlMbkpsYlc5MlpTZ3BYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCMGIyZG5iR1ZXYVhOcFlteGxLSFpwYzJsaWJHVTZJR0p2YjJ4bFlXNHBJSHRjYmlBZ0lDQjBhR2x6TG5acGMybGliR1VnUFNCMmFYTnBZbXhsWEc0Z0lDQWdhV1lnS0NGMGFHbHpMbXhoZVdWeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViV0Z3TG1Ga1pFeGhlV1Z5S0hSb2FYTXViR0Y1WlhJcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRndMbkpsYlc5MlpVeGhlV1Z5S0hSb2FYTXViR0Y1WlhJcFhHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhCMVlteHBZeUJqYUdGdVoyVkRiMnh2Y2loamIyeHZjam9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1acGJHeERiMnh2Y2lBOUlHTnZiRzl5WEc0Z0lDQWdkR2hwY3k1eVpXUnlZWGNvS1Z4dUlDQjlYRzRnSUhCMVlteHBZeUJ3YVhSamFDaHBaRG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdkR2hwY3k1d2IyeDVaMjl1Y3k1bWIzSkZZV05vS0Nod2IyeDVaMjl1S1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvY0c5c2VXZHZiaTVuWlhSRVlYUmhLQ2t1YVdRZ1BUMDlJR2xrS1NCN1hHNGdJQ0FnSUNBZ0lIQnZiSGxuYjI0dVptbHlaU2duWTJ4cFkyc25LVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0I5WEc0Z0lIQnliM1JsWTNSbFpDQm5aWFJVYjI5c1ZHbHdRMjl1ZEdWdWRDaGtZWFJoT2lCRVlYUmhUR2x6ZEVsMFpXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z0p5Y2dLeUJrWVhSaFczUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdRWFIwY2wxY2JpQWdmVnh1SUNCd2NtbDJZWFJsSUdsdWFYUlFiMng1WjI5dWN5Z3BJSHRjYmlBZ0lDQjBhR2x6TG1SaGRHRk1hWE4wTG1admNrVmhZMmdvS0dSaGRHRXBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMkZqYUdWVFpXZHRaVzUwVUdGeVlXMXpLQ2xjYmx4dUlDQWdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQk1MbWRsYjBwVFQwNG9aR0YwWVM1blpXOXRaWFJ5ZVNrdVoyVjBUR0Y1WlhKektDbGJNRjFjYmlBZ0lDQWdJR052Ym5OMElIQnZiSGxuYjI0Z1BTQnVaWGNnVUc5c2VXZHZiaWdvYkdGNVpYSWdZWE1nVEM1UWIyeDVaMjl1S1M1blpYUk1ZWFJNYm1kektDa3BYRzVjYmlBZ0lDQWdJQzh2SU9Xd2h1ZWJ1T1dGcytXQXZPZTdrZVd1bXVXSXNDQnRZWEpyWlhMa3VJcGNiaUFnSUNBZ0lIQnZiSGxuYjI0dWMyVjBSR0YwWVNoa1lYUmhLVnh1WEc0Z0lDQWdJQ0IwYUdsekxuQnZiSGxuYjI1ekxuQjFjMmdvY0c5c2VXZHZiaWxjYmlBZ0lDQjlLVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdZMjl1Wm1sblVHOXNlV2R2Ymt4aGVXVnlLQ2tnZTF4dUlDQWdJSFJvYVhNdWNHOXNlV2R2Ymt4aGVXVnlJRDBnVEM1c1lYbGxja2R5YjNWd0tDbGNiaUFnSUNCMGFHbHpMbkJ2YkhsbmIyNXpMbVp2Y2tWaFkyZ29LSEJ2YkhsbmIyNHBJRDArSUh0Y2JpQWdJQ0FnSUd4bGRDQmpiMnh2Y2lBOUlIUm9hWE11YjNCMGFXOXVjeTVqYjJ4dmNseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1eVpXNWtaWEpRYjJ4NVoyOXVRMjlzYjNKVWVYQmxJRDA5UFNBbmMyVm5iV1Z1ZEdWa0p5a2dlMXh1SUNBZ0lDQWdJQ0JqYjJ4dmNpQTlJSFJvYVhNdVoyVjBVMlZuYldWdWRHVmtVRzlzZVdkdmJrTnZiRzl5S0hCdmJIbG5iMjR1WjJWMFJHRjBZU2dwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdiM0IwYVc5dWN6b2dUQzVRYjJ4NWJHbHVaVTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0IwYUdsekxtOXdkR2x2Ym5Nc0lIdGNiaUFnSUNBZ0lDQWdZMjlzYjNJc1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0x5OGc2WWVONXBhdzVicVU1NVNvSUc5d2RHbHZibk5jYmlBZ0lDQWdJR052Ym5OMElHNWxkMUJ2YkhsbmIyNGdQU0J1WlhjZ1VHOXNlV2R2Ymlod2IyeDVaMjl1TG1kbGRFeGhkRXh1WjNNb0tTd2diM0IwYVc5dWN5bGNiaUFnSUNBZ0lHNWxkMUJ2YkhsbmIyNHVjMlYwUkdGMFlTaHdiMng1WjI5dUxtZGxkRVJoZEdFb0tTbGNiaUFnSUNBZ0lHNWxkMUJ2YkhsbmIyNHViMjRvSjJOc2FXTnJKeXdnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnZiSGxuYjI1RGJHbGphMGhoYm1Sc1pYSW9jRzlzZVdkdmJpbGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCQmRIUnlLU0I3WEc0Z0lDQWdJQ0FnSUc1bGQxQnZiSGxuYjI0dVltbHVaRlJ2YjJ4MGFYQW9kR2hwY3k1blpYUlViMjlzVkdsd1EyOXVkR1Z1ZENodVpYZFFiMng1WjI5dUxtZGxkRVJoZEdFb0tTa3BYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWNHOXNlV2R2Ymt4aGVXVnlMbUZrWkV4aGVXVnlLRzVsZDFCdmJIbG5iMjRwWEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3YjJ4NVoyOXVUR0Y1WlhKY2JpQWdmVnh1SUNCd2NtbDJZWFJsSUhCdmJIbG5iMjVEYkdsamEwaGhibVJzWlhJb2NHOXNlV2R2YmpvZ1VHOXNlV2R2YmlrZ2UxeHVJQ0FnSUM4dklIUm9hWE11Wm05amRYTmxaRkJ2YkhsbmIyNGdQU0J3YjJ4NVoyOXVYRzRnSUNBZ2RHaHBjeTVqYUdGdWJtVnNSblZ1WXlnbmIyNHRZMnhwWTJzdGNHOXNlV2R2Ymljc0lIQnZiSGxuYjI0cFhHNGdJSDFjYmlBZ2NISnBkbUYwWlNCallXTm9aVk5sWjIxbGJuUlFZWEpoYlhNb0tTQjdYRzRnSUNBZ1kyOXVjM1FnYzJWbmJXVnVkR1ZrVEdWdVozUm9JRDBnZEdocGN5NXZjSFJwYjI1ekxuTmxaMjFsYm5SbFpFTnZiRzl5Y3k1c1pXNW5kR2hjYmlBZ0lDQnNaWFFnYldGNFZtRnNJRDBnTFVsdVptbHVhWFI1WEc0Z0lDQWdiR1YwSUcxcGJsWmhiQ0E5SUVsdVptbHVhWFI1WEc0Z0lDQWdabTl5SUNoamIyNXpkQ0JrWVhSaElHOW1JSFJvYVhNdVpHRjBZVXhwYzNRcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhaaGJDQTlJR1JoZEdGYmRHaHBjeTV2Y0hScGIyNXpMbk5sWjIxbGJuUmxaRUYwZEhKZFhHNGdJQ0FnSUNCdFlYaFdZV3dnUFNCTllYUm9MbTFoZUNodFlYaFdZV3dzSUhaaGJDbGNiaUFnSUNBZ0lHMXBibFpoYkNBOUlFMWhkR2d1YldsdUtHMXBibFpoYkN3Z2RtRnNLVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J6ZEdWd0lEMGdLRzFoZUZaaGJDQXRJRzFwYmxaaGJDQXJJREVwSUM4Z2MyVm5iV1Z1ZEdWa1RHVnVaM1JvWEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwWldSTmFXNGdQU0J0YVc1V1lXeGNiaUFnSUNCMGFHbHpMbk5sWjIxbGJuUmxaRk4wWlhBZ1BTQnpkR1Z3WEc0Z0lIMWNiaUFnY0hKcGRtRjBaU0JuWlhSVFpXZHRaVzUwWldSUWIyeDVaMjl1UTI5c2IzSW9aR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRLVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQmpiMjV6ZENCMllXd2dQU0JrWVhSaFczUm9hWE11YjNCMGFXOXVjeTV6WldkdFpXNTBaV1JCZEhSeVhWeHVJQ0FnSUdOdmJuTjBJR052Ykc5eUlEMGdkR2hwY3k1dmNIUnBiMjV6TG5ObFoyMWxiblJsWkVOdmJHOXljMXRjYmlBZ0lDQWdJQ2gyWVd3Z0xTQjBhR2x6TG5ObFoyMWxiblJsWkUxcGJpa2dMeUIwYUdsekxuTmxaMjFsYm5SbFpGTjBaWEJjYmlBZ0lDQmRYRzRnSUNBZ2NtVjBkWEp1SUdOdmJHOXlYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUVSaGRHRk1hWE4wU1hSbGJTQjlJR1p5YjIwZ0p5NHVMMlJsWm1sdWFYUnBiMjV6SjF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JRYjJ4NWJHbHVaVTl3ZEdsdmJuTWdQU0JNTGt4aGRFeHVaMFY0Y0hKbGMzTnBiMjViWFNCOElFd3VUR0YwVEc1blJYaHdjbVZ6YzJsdmJsdGRXMTFjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQnZiSGxzYVc1bElHVjRkR1Z1WkhNZ1RDNVFiMng1YkdsdVpTQjdYRzRnSUM4dklIUnpiR2x1ZERwa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlRwMllYSnBZV0pzWlMxdVlXMWxYRzRnSUhCeWFYWmhkR1VnWDE5a1lYUmhPaUJFWVhSaFRHbHpkRWwwWlcxY2JpQWdZMjl1YzNSeWRXTjBiM0lvYkdGMGJHNW5jem9nVUc5c2VXeHBibVZQY0hScGIyNXpMQ0J2Y0hScGIyNXpQem9nVEM1UWIyeDViR2x1WlU5d2RHbHZibk1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaHNZWFJzYm1kekxDQnZjSFJwYjI1ektWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCelpYUkVZWFJoS0dSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlNrZ2UxeHVJQ0FnSUhSb2FYTXVYMTlrWVhSaElEMGdaR0YwWVZ4dUlDQjlYRzRnSUhCMVlteHBZeUJuWlhSRVlYUmhLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5ZlpHRjBZVnh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZXlCRVlYUmhUR2x6ZEVsMFpXMHNJRU5vWVc1dVpXeEdkVzVqSUgwZ1puSnZiU0FuTGk0dlpHVm1hVzVwZEdsdmJuTW5YRzVwYlhCdmNuUWdVRzlzZVd4cGJtVnpUR0Y1WlhJZ1puSnZiU0FuTGk5UWIyeDViR2x1WlhOTVlYbGxjaWRjYmx4dUx5b3FJT2E0c3VhZmsrbWluT2lKc3VhZ3QrVzhqeURsalpYb2liSjg1WWlHNXE2MUlDb3ZYRzUwZVhCbElGQnZiSGxzYVc1bFRHRjVaWEpTWlc1a1pYSkRiMnh2Y2xSNWNHVWdQU0FuYzJsdVoyeGxKeUI4SUNkelpXZHRaVzUwWldRblhHNXBiblJsY21aaFkyVWdVRzlzZVd4cGJtVkNkV1ptWlhKTVlYbGxjazl3ZEdsdmJuTWdaWGgwWlc1a2N5Qk1Ma052Y25KcFpHOXlUM0IwYVc5dWN5QjdYRzRnSUhKbGJtUmxjbEJ2Ykhsc2FXNWxRMjlzYjNKVWVYQmxPaUJRYjJ4NWJHbHVaVXhoZVdWeVVtVnVaR1Z5UTI5c2IzSlVlWEJsWEc1Y2JpQWdMeW9xSUhCdmNIVndJT1d4bGVla3V1V3RsK2F1dFNBcUwxeHVJQ0J3YjNCMWNFRjBkSEkvT2lCemRISnBibWRjYmlBZ0x5b3FJSFJ2YjJ4MGFYQWc1YkdWNTZTNjVhMlg1cTYxSUNvdlhHNGdJSFJ2YjJ4MGFYQkJkSFJ5UHpvZ2MzUnlhVzVuWEc1Y2JpQWdiM0JoWTJsMGVUODZJRzUxYldKbGNseHVYRzRnSUM4cUtpRGxpSWJtcnJYbXVMTG1uNVBudTUvb3JxSGxyWmZtcnJVZ0tpOWNiaUFnYzJWbmJXVnVkR1ZrUVhSMGNqODZJSE4wY21sdVoxeHVJQ0J6WldkdFpXNTBaV1JEYjJ4dmNuTS9PaUJ6ZEhKcGJtZGJYVnh1ZlZ4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzlzZVd4cGJtVnpRblZtWm1WeVRHRjVaWElnWlhoMFpXNWtjeUJRYjJ4NWJHbHVaWE5NWVhsbGNpQjdYRzRnSUhCMVlteHBZeUIwZVhCbE9pQnpkSEpwYm1kY2JpQWdjSEp2ZEdWamRHVmtJRzl3ZEdsdmJuTTZJRkJ2Ykhsc2FXNWxRblZtWm1WeVRHRjVaWEpQY0hScGIyNXpYRzRnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUcxaGNEb2dUQzVOWVhBc1hHNGdJQ0FnWkdGMFlVeHBjM1E2SUVSaGRHRk1hWE4wU1hSbGJWdGRMRnh1SUNBZ0lHOXdkR2x2Ym5NNklGQnZiSGxzYVc1bFFuVm1abVZ5VEdGNVpYSlBjSFJwYjI1ekxGeHVJQ0FnSUdOb1lXNXVaV3hHZFc1ak9pQkRhR0Z1Ym1Wc1JuVnVZMXh1SUNBcElIdGNiaUFnSUNCemRYQmxjaWh0WVhBc0lHUmhkR0ZNYVhOMExDQnZjSFJwYjI1ekxDQmphR0Z1Ym1Wc1JuVnVZeWxjYmlBZ0lDQmpiMjV6ZENCa1pXWmhkV3gwVDNCMGFXOXVjem9nVUc5c2VXeHBibVZDZFdabVpYSk1ZWGxsY2s5d2RHbHZibk1nUFNCN1hHNGdJQ0FnSUNCeVpXNWtaWEpRYjJ4NWJHbHVaVU52Ykc5eVZIbHdaVG9nSjNOcGJtZHNaU2NzWEc0Z0lDQWdJQ0J6WldkdFpXNTBaV1JEYjJ4dmNuTTZJRnNuSXpNek9EaEdSaWRkTEZ4dUlDQWdJQ0FnWTI5eWNtbGtiM0k2SURFd01DeGNiaUFnSUNBZ0lHTnZiRzl5T2lBbkl6TXpPRGhHUmljc1hHNGdJQ0FnSUNCdmNHRmphWFI1T2lBd0xqVXNYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDZHdiMng1YkdsdVpVSjFabVpsY2lkY2JpQWdJQ0IwYUdsekxtMWhjQ0E5SUcxaGNGeHVJQ0FnSUhSb2FYTXVaR0YwWVV4cGMzUWdQU0JrWVhSaFRHbHpkRnh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUc5d2RHbHZibk5jYmlBZ0lDQjBhR2x6TG1Ob1lXNXVaV3hHZFc1aklEMGdZMmhoYm01bGJFWjFibU5jYmx4dUlDQWdJSFJvYVhNdWRtbHphV0pzWlNBOUlIUnlkV1ZjYmlBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsY3lBOUlGdGRYRzRnSUNBZ2RHaHBjeTV6WldkdFpXNTBaV1JOYVc0Z1BTQkpibVpwYm1sMGVWeHVJQ0FnSUhSb2FYTXVjMlZuYldWdWRHVmtVM1JsY0NBOUlERmNiaUFnSUNBdkx5QjBhR2x6TG1adlkzVnpaV1JRYjJ4NWJHbHVaU0E5SUc1MWJHeGNibHh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdSbFptRjFiSFJQY0hScGIyNXpMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lIUm9hWE11YVc1cGRGQnZiSGxzYVc1bGN5Z3BYRzRnSUgxY2JpQWdjSFZpYkdsaklHUnlZWGNvYjNCMGFXOXVjejg2SUZCdmJIbHNhVzVsUW5WbVptVnlUR0Y1WlhKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdUMkpxWldOMExtRnpjMmxuYmloMGFHbHpMbTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZrY21GM0tDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2NtVmtjbUYzS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViR0Y1WlhJdWNtVnRiM1psS0NsY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1c1lYbGxjaUE5SUhSb2FYTXVZMjl1Wm1sblVHOXNlV3hwYm1WQ2RXWm1aWEpNWVhsbGNpZ3BYRzRnSUNBZ2RHaHBjeTV0WVhBdVlXUmtUR0Y1WlhJb2RHaHBjeTVzWVhsbGNpbGNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCbWFYUkNiM1Z1WkhNb0tTQjdYRzRnSUNBZ2RHaHBjeTV0WVhBdVptbDBRbTkxYm1SektIUm9hWE11WjJWMFFtOTFibVJ6S0NrcFhHNGdJSDFjYmlBZ2NIVmliR2xqSUdkbGRFSnZkVzVrY3lncE9pQk1Ma3hoZEV4dVowSnZkVzVrYzBWNGNISmxjM05wYjI0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5CdmJIbHNhVzVsY3k1c1pXNW5kR2dnUEQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGd0xtZGxkRUp2ZFc1a2N5Z3BYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnZiSGxzYVc1bGN5NXlaV1IxWTJVb1hHNGdJQ0FnSUNBb2NISmxkaXdnWTNWeWNpa2dQVDRnY0hKbGRpNWxlSFJsYm1Rb1kzVnljaTVuWlhSQ2IzVnVaSE1vS1Nrc1hHNGdJQ0FnSUNCMGFHbHpMbkJ2Ykhsc2FXNWxjMXN3WFM1blpYUkNiM1Z1WkhNb0tWeHVJQ0FnSUNsY2JpQWdmVnh1SUNCd2RXSnNhV01nWTJoaGJtZGxRMjlzYjNJb1kyOXNiM0k2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1amIyeHZjaUE5SUdOdmJHOXlYRzRnSUNBZ2RHaHBjeTV5WldSeVlYY29LVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdZMjl1Wm1sblVHOXNlV3hwYm1WQ2RXWm1aWEpNWVhsbGNpZ3BJSHRjYmlBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsVEdGNVpYSWdQU0JNTG14aGVXVnlSM0p2ZFhBb0tWeHVJQ0FnSUhSb2FYTXVjRzlzZVd4cGJtVnpMbVp2Y2tWaFkyZ29LSEJ2Ykhsc2FXNWxLU0E5UGlCN1hHNGdJQ0FnSUNCd2IyeDViR2x1WlM1dmJpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0c5c2VXeHBibVZEYkdsamEwaGhibVJzWlhJb2NHOXNlV3hwYm1VcFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ1kyOXVjM1FnYjNCMGFXOXVjem9nVUc5c2VXeHBibVZDZFdabVpYSk1ZWGxsY2s5d2RHbHZibk1nUFNCUFltcGxZM1F1WVhOemFXZHVLRnh1SUNBZ0lDQWdJQ0I3ZlN4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiM0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05d2RHbHZibk11Y21WdVpHVnlVRzlzZVd4cGJtVkRiMnh2Y2xSNWNHVWdQVDA5SUNkemFXNW5iR1VuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRDhnZEdocGN5NXZjSFJwYjI1ekxtTnZiRzl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NW5aWFJUWldkdFpXNTBaV1JRYjJ4NWJHbHVaVU52Ykc5eUtIQnZiSGxzYVc1bExtZGxkRVJoZEdFb0tTa3NYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ2xjYmx4dUlDQWdJQ0FnWTI5dWMzUWdjRzlzZVd4cGJtVkNkV1ptWlhJZ1BTQk1MbU52Y25KcFpHOXlLRnh1SUNBZ0lDQWdJQ0FvY0c5c2VXeHBibVV1WjJWMFRHRjBURzVuY3lncElHRnpJRXd1VEdGMFRHNW5XMTBwTG0xaGNDZ29iR0YwVEc1bktTQTlQbHh1SUNBZ0lDQWdJQ0FnSUV3dWJHRjBURzVuS0Z0c1lYUk1ibWN1YkdGMExDQnNZWFJNYm1jdWJHNW5YU2xjYmlBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnS1Z4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdRWFIwY2lrZ2UxeHVJQ0FnSUNBZ0lDQndiMng1YkdsdVpVSjFabVpsY2k1aWFXNWtWRzl2YkhScGNDaDBhR2x6TG1kbGRGUnZiMnhVYVhCRGIyNTBaVzUwS0hCdmJIbHNhVzVsTG1kbGRFUmhkR0VvS1NrcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbkJ2Ykhsc2FXNWxUR0Y1WlhJdVlXUmtUR0Y1WlhJb2NHOXNlV3hwYm1WQ2RXWm1aWElwWEc0Z0lDQWdmU2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3YjJ4NWJHbHVaVXhoZVdWeVhHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJRVJoZEdGTWFYTjBTWFJsYlN3Z1EyaGhibTVsYkVaMWJtTWdmU0JtY205dElDY3VMaTlrWldacGJtbDBhVzl1Y3lkY2JtbHRjRzl5ZENCUWIyeDViR2x1WlN3Z2V5QlFiMng1YkdsdVpVOXdkR2x2Ym5NZ2ZTQm1jbTl0SUNjdUwxQnZiSGxzYVc1bEoxeHVYRzR2S2lvZzVyaXk1cCtUNmFLYzZJbXk1cUMzNWJ5UElPV05sZWlKc256bGlJYm1yclVnS2k5Y2JuUjVjR1VnVUc5c2VXeHBibVZNWVhsbGNsSmxibVJsY2tOdmJHOXlWSGx3WlNBOUlDZHphVzVuYkdVbklId2dKM05sWjIxbGJuUmxaQ2RjYm1sdWRHVnlabUZqWlNCUWIyeDViR2x1WlV4aGVXVnlUM0IwYVc5dWN5QmxlSFJsYm1SeklFd3VVRzlzZVd4cGJtVlBjSFJwYjI1eklIdGNiaUFnY21WdVpHVnlVRzlzZVd4cGJtVkRiMnh2Y2xSNWNHVTZJRkJ2Ykhsc2FXNWxUR0Y1WlhKU1pXNWtaWEpEYjJ4dmNsUjVjR1ZjYmx4dUlDQXZLaW9nY0c5d2RYQWc1YkdWNTZTNjVhMlg1cTYxSUNvdlhHNGdJSEJ2Y0hWd1FYUjBjajg2SUhOMGNtbHVaMXh1SUNBdktpb2dkRzl2YkhScGNDRGxzWlhucExybHJaZm1yclVnS2k5Y2JpQWdkRzl2YkhScGNFRjBkSEkvT2lCemRISnBibWRjYmx4dUlDQnZjR0ZqYVhSNVB6b2diblZ0WW1WeVhHNWNiaUFnTHlvcUlPV0lodWF1dGVhNHN1YWZrK2U3bitpdW9lV3RsK2F1dFNBcUwxeHVJQ0J6WldkdFpXNTBaV1JCZEhSeVB6b2djM1J5YVc1blhHNGdJSE5sWjIxbGJuUmxaRU52Ykc5eWN6ODZJSE4wY21sdVoxdGRYRzU5WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlFiMng1YkdsdVpYTk1ZWGxsY2lCN1hHNGdJSEIxWW14cFl5QjBlWEJsT2lCemRISnBibWRjYmx4dUlDQndjbTkwWldOMFpXUWdkbWx6YVdKc1pUb2dZbTl2YkdWaGJseHVJQ0J3Y205MFpXTjBaV1FnYkdGNVpYSTZJRXd1VEdGNVpYSkhjbTkxY0Z4dVhHNGdJSEJ5YjNSbFkzUmxaQ0J0WVhBNklFd3VUV0Z3WEc0Z0lIQnliM1JsWTNSbFpDQmtZWFJoVEdsemREb2dSR0YwWVV4cGMzUkpkR1Z0VzExY2JpQWdjSEp2ZEdWamRHVmtJRzl3ZEdsdmJuTTZJRkJ2Ykhsc2FXNWxUR0Y1WlhKUGNIUnBiMjV6WEc0Z0lIQnliM1JsWTNSbFpDQmphR0Z1Ym1Wc1JuVnVZem9nUTJoaGJtNWxiRVoxYm1OY2JpQWdjSEp2ZEdWamRHVmtJSEJ2Ykhsc2FXNWxjem9nVUc5c2VXeHBibVZiWFZ4dUlDQndjbTkwWldOMFpXUWdjMlZuYldWdWRHVmtUV2x1T2lCdWRXMWlaWEpjYmlBZ2NISnZkR1ZqZEdWa0lITmxaMjFsYm5SbFpGTjBaWEE2SUc1MWJXSmxjbHh1SUNBdkx5QndjbWwyWVhSbElHWnZZM1Z6WldSUWIyeDViR2x1WlRvZ1VHOXNlV3hwYm1WY2JpQWdjSEp2ZEdWamRHVmtJSEJ2Ykhsc2FXNWxUR0Y1WlhJNklFd3VUR0Y1WlhKSGNtOTFjRnh1SUNCamIyNXpkSEoxWTNSdmNpaGNiaUFnSUNCdFlYQTZJRXd1VFdGd0xGeHVJQ0FnSUdSaGRHRk1hWE4wT2lCRVlYUmhUR2x6ZEVsMFpXMWJYU3hjYmlBZ0lDQnZjSFJwYjI1ek9pQlFiMng1YkdsdVpVeGhlV1Z5VDNCMGFXOXVjeXhjYmlBZ0lDQmphR0Z1Ym1Wc1JuVnVZem9nUTJoaGJtNWxiRVoxYm1OY2JpQWdLU0I3WEc0Z0lDQWdZMjl1YzNRZ1pHVm1ZWFZzZEU5d2RHbHZibk02SUZCdmJIbHNhVzVsVEdGNVpYSlBjSFJwYjI1eklEMGdlMXh1SUNBZ0lDQWdZMjlzYjNJNklDY2pNek00T0VaR0p5eGNiaUFnSUNBZ0lISmxibVJsY2xCdmJIbHNhVzVsUTI5c2IzSlVlWEJsT2lBbmMybHVaMnhsSnl4Y2JpQWdJQ0FnSUhObFoyMWxiblJsWkVOdmJHOXljem9nV3ljak16TTRPRVpHSjEwc1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWRIbHdaU0E5SUNkd2IyeDViR2x1WlNkY2JpQWdJQ0IwYUdsekxtMWhjQ0E5SUcxaGNGeHVJQ0FnSUhSb2FYTXVaR0YwWVV4cGMzUWdQU0JrWVhSaFRHbHpkRnh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUc5d2RHbHZibk5jYmlBZ0lDQjBhR2x6TG1Ob1lXNXVaV3hHZFc1aklEMGdZMmhoYm01bGJFWjFibU5jYmx4dUlDQWdJSFJvYVhNdWRtbHphV0pzWlNBOUlIUnlkV1ZjYmlBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsY3lBOUlGdGRYRzRnSUNBZ2RHaHBjeTV6WldkdFpXNTBaV1JOYVc0Z1BTQkpibVpwYm1sMGVWeHVJQ0FnSUhSb2FYTXVjMlZuYldWdWRHVmtVM1JsY0NBOUlERmNiaUFnSUNBdkx5QjBhR2x6TG1adlkzVnpaV1JRYjJ4NWJHbHVaU0E5SUc1MWJHeGNibHh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzSUdSbFptRjFiSFJQY0hScGIyNXpMQ0J2Y0hScGIyNXpLVnh1WEc0Z0lDQWdMeThnNTd5VDVhMllJSE5sWjIxbGJuUWc1NXU0NVlXejVwV3c1bzJ1WEc0Z0lDQWdkR2hwY3k1allXTm9aVk5sWjIxbGJuUlFZWEpoYlhNb0tWeHVJQ0FnSUhSb2FYTXVhVzVwZEZCdmJIbHNhVzVsY3lncFhHNGdJSDFjYmlBZ2NIVmliR2xqSUdSeVlYY29iM0IwYVc5dWN6ODZJRkJ2Ykhsc2FXNWxUR0Y1WlhKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NXZjSFJwYjI1eklEMGdUMkpxWldOMExtRnpjMmxuYmloMGFHbHpMbTl3ZEdsdmJuTXNJRzl3ZEdsdmJuTXBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZrY21GM0tDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2NtVmtjbUYzS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViR0Y1WlhJdWNtVnRiM1psS0NsY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1c1lYbGxjaUE5SUhSb2FYTXVZMjl1Wm1sblVHOXNlV3hwYm1WTVlYbGxjaWdwWEc0Z0lDQWdkR2hwY3k1dFlYQXVZV1JrVEdGNVpYSW9kR2hwY3k1c1lYbGxjaWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNGdJSEIxWW14cFl5Qm1hWFJDYjNWdVpITW9LU0I3WEc0Z0lDQWdkR2hwY3k1dFlYQXVabWwwUW05MWJtUnpLSFJvYVhNdVoyVjBRbTkxYm1SektDa3BYRzRnSUgxY2JpQWdjSFZpYkdsaklHZGxkRUp2ZFc1a2N5Z3BPaUJNTGt4aGRFeHVaMEp2ZFc1a2MwVjRjSEpsYzNOcGIyNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnZiSGxzYVc1bGN5NXNaVzVuZEdnZ1BEMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRndMbWRsZEVKdmRXNWtjeWdwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ2Ykhsc2FXNWxjeTV5WldSMVkyVW9YRzRnSUNBZ0lDQW9jSEpsZGl3Z1kzVnljaWtnUFQ0Z2NISmxkaTVsZUhSbGJtUW9ZM1Z5Y2k1blpYUkNiM1Z1WkhNb0tTa3NYRzRnSUNBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsYzFzd1hTNW5aWFJDYjNWdVpITW9LVnh1SUNBZ0lDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ1pHVnpkSEp2ZVNncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1c1lYbGxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NXNZWGxsY2k1eVpXMXZkbVVvS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdkRzluWjJ4bFZtbHphV0pzWlNoMmFYTnBZbXhsT2lCaWIyOXNaV0Z1S1NCN1hHNGdJQ0FnZEdocGN5NTJhWE5wWW14bElEMGdkbWx6YVdKc1pWeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1c1lYbGxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJhWE5wWW14bEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG0xaGNDNWhaR1JNWVhsbGNpaDBhR2x6TG14aGVXVnlLVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbTFoY0M1eVpXMXZkbVZNWVhsbGNpaDBhR2x6TG14aGVXVnlLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQndkV0pzYVdNZ1kyaGhibWRsUTI5c2IzSW9ZMjlzYjNJNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NW1hV3hzUTI5c2IzSWdQU0JqYjJ4dmNseHVJQ0FnSUhSb2FYTXVjbVZrY21GM0tDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ2NHbDBZMmdvYVdRNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhSb2FYTXVjRzlzZVd4cGJtVnpMbVp2Y2tWaFkyZ29LSEJ2Ykhsc2FXNWxLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9jRzlzZVd4cGJtVXVaMlYwUkdGMFlTZ3BMbWxrSUQwOVBTQnBaQ2tnZTF4dUlDQWdJQ0FnSUNCd2IyeDViR2x1WlM1bWFYSmxLQ2RqYkdsamF5Y3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ2NISnZkR1ZqZEdWa0lHbHVhWFJRYjJ4NWJHbHVaWE1vS1NCN1hHNGdJQ0FnZEdocGN5NWtZWFJoVEdsemRDNW1iM0pGWVdOb0tDaGtZWFJoS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG1OaFkyaGxVMlZuYldWdWRGQmhjbUZ0Y3lncFhHNWNiaUFnSUNBZ0lHTnZibk4wSUd4aGVXVnlJRDBnVEM1blpXOUtVMDlPS0dSaGRHRXVaMlZ2YldWMGNua3BMbWRsZEV4aGVXVnljeWdwV3pCZFhHNGdJQ0FnSUNCc1pYUWdabWxzYkVOdmJHOXlJRDBnZEdocGN5NXZjSFJwYjI1ekxtWnBiR3hEYjJ4dmNseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1eVpXNWtaWEpRYjJ4NWJHbHVaVU52Ykc5eVZIbHdaU0E5UFQwZ0ozTmxaMjFsYm5SbFpDY3BJSHRjYmlBZ0lDQWdJQ0FnWm1sc2JFTnZiRzl5SUQwZ2RHaHBjeTVuWlhSVFpXZHRaVzUwWldSUWIyeDViR2x1WlVOdmJHOXlLR1JoZEdFcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCamIyNXpkQ0J3YjJ4NWJHbHVaU0E5SUc1bGR5QlFiMng1YkdsdVpTaGNiaUFnSUNBZ0lDQWdLR3hoZVdWeUlHRnpJRXd1VUc5c2VXeHBibVVwTG1kbGRFeGhkRXh1WjNNb0tTQmhjeUJRYjJ4NWJHbHVaVTl3ZEdsdmJuTXNYRzRnSUNBZ0lDQWdJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJSFJvYVhNdWIzQjBhVzl1Y3l3Z2V5Qm1hV3hzUTI5c2IzSWdmU2xjYmlBZ0lDQWdJQ2xjYmx4dUlDQWdJQ0FnTHk4ZzViQ0c1NXU0NVlXejVZQzg1N3VSNWE2YTVZaXdJRzFoY210bGN1UzRpbHh1SUNBZ0lDQWdjRzlzZVd4cGJtVXVjMlYwUkdGMFlTaGtZWFJoS1Z4dVhHNGdJQ0FnSUNCMGFHbHpMbkJ2Ykhsc2FXNWxjeTV3ZFhOb0tIQnZiSGxzYVc1bEtWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ2NISnZkR1ZqZEdWa0lHZGxkRk5sWjIxbGJuUmxaRkJ2Ykhsc2FXNWxRMjlzYjNJb1pHRjBZVG9nUkdGMFlVeHBjM1JKZEdWdEtUb2djM1J5YVc1bklIdGNiaUFnSUNCamIyNXpkQ0IyWVd3Z1BTQmtZWFJoVzNSb2FYTXViM0IwYVc5dWN5NXpaV2R0Wlc1MFpXUkJkSFJ5WFZ4dUlDQWdJR052Ym5OMElHTnZiRzl5SUQwZ2RHaHBjeTV2Y0hScGIyNXpMbk5sWjIxbGJuUmxaRU52Ykc5eWMxdGNiaUFnSUNBZ0lDaDJZV3dnTFNCMGFHbHpMbk5sWjIxbGJuUmxaRTFwYmlrZ0x5QjBhR2x6TG5ObFoyMWxiblJsWkZOMFpYQmNiaUFnSUNCZFhHNGdJQ0FnY21WMGRYSnVJR052Ykc5eVhHNGdJSDFjYmlBZ2NISnZkR1ZqZEdWa0lIQnZiSGxzYVc1bFEyeHBZMnRJWVc1a2JHVnlLSEJ2Ykhsc2FXNWxPaUJRYjJ4NWJHbHVaU2tnZTF4dUlDQWdJQzh2SUhSb2FYTXVabTlqZFhObFpGQnZiSGxzYVc1bElEMGdjRzlzZVd4cGJtVmNiaUFnSUNCMGFHbHpMbU5vWVc1dVpXeEdkVzVqS0NkdmJpMWpiR2xqYXkxd2IyeDViR2x1WlNjc0lIQnZiSGxzYVc1bEtWeHVJQ0I5WEc0Z0lIQnliM1JsWTNSbFpDQm5aWFJVYjI5c1ZHbHdRMjl1ZEdWdWRDaGtZWFJoT2lCRVlYUmhUR2x6ZEVsMFpXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z0p5Y2dLeUJrWVhSaFczUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdRWFIwY2wxY2JpQWdmVnh1SUNCd2NtbDJZWFJsSUdOdmJtWnBaMUJ2Ykhsc2FXNWxUR0Y1WlhJb0tTQjdYRzRnSUNBZ2RHaHBjeTV3YjJ4NWJHbHVaVXhoZVdWeUlEMGdUQzVzWVhsbGNrZHliM1Z3S0NsY2JpQWdJQ0IwYUdsekxuQnZiSGxzYVc1bGN5NW1iM0pGWVdOb0tDaHdiMng1YkdsdVpTa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiM0IwYVc5dWN6b2dUQzVRYjJ4NWJHbHVaVTl3ZEdsdmJuTWdQU0JQWW1wbFkzUXVZWE56YVdkdUtIdDlMQ0IwYUdsekxtOXdkR2x2Ym5Nc0lIdGNiaUFnSUNBZ0lDQWdZMjlzYjNJNklIUm9hWE11WjJWMFUyVm5iV1Z1ZEdWa1VHOXNlV3hwYm1WRGIyeHZjaWh3YjJ4NWJHbHVaUzVuWlhSRVlYUmhLQ2twTEZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUdOdmJuTjBJRzVsZDFCdmJIbHNhVzVsSUQwZ2JtVjNJRkJ2Ykhsc2FXNWxLRnh1SUNBZ0lDQWdJQ0J3YjJ4NWJHbHVaUzVuWlhSTVlYUk1ibWR6S0NrZ1lYTWdVRzlzZVd4cGJtVlBjSFJwYjI1ekxGeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1elhHNGdJQ0FnSUNBcFhHNGdJQ0FnSUNCdVpYZFFiMng1YkdsdVpTNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXNlV3hwYm1WRGJHbGphMGhoYm1Sc1pYSW9jRzlzZVd4cGJtVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdibVYzVUc5c2VXeHBibVV1YzJWMFJHRjBZU2h3YjJ4NWJHbHVaUzVuWlhSRVlYUmhLQ2twWEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMblJ2YjJ4MGFYQkJkSFJ5S1NCN1hHNGdJQ0FnSUNBZ0lHNWxkMUJ2Ykhsc2FXNWxMbUpwYm1SVWIyOXNkR2x3S0hSb2FYTXVaMlYwVkc5dmJGUnBjRU52Ym5SbGJuUW9ibVYzVUc5c2VXeHBibVV1WjJWMFJHRjBZU2dwS1NsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVjRzlzZVd4cGJtVk1ZWGxsY2k1aFpHUk1ZWGxsY2lodVpYZFFiMng1YkdsdVpTbGNiaUFnSUNCOUtWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnZiSGxzYVc1bFRHRjVaWEpjYmlBZ2ZWeHVJQ0J3Y21sMllYUmxJR05oWTJobFUyVm5iV1Z1ZEZCaGNtRnRjeWdwSUh0Y2JpQWdJQ0JqYjI1emRDQnpaV2R0Wlc1MFpXUk1aVzVuZEdnZ1BTQjBhR2x6TG05d2RHbHZibk11YzJWbmJXVnVkR1ZrUTI5c2IzSnpMbXhsYm1kMGFGeHVJQ0FnSUd4bGRDQnRZWGhXWVd3Z1BTQXRTVzVtYVc1cGRIbGNiaUFnSUNCc1pYUWdiV2x1Vm1Gc0lEMGdTVzVtYVc1cGRIbGNiaUFnSUNCbWIzSWdLR052Ym5OMElHUmhkR0VnYjJZZ2RHaHBjeTVrWVhSaFRHbHpkQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkbUZzSUQwZ1pHRjBZVnQwYUdsekxtOXdkR2x2Ym5NdWMyVm5iV1Z1ZEdWa1FYUjBjbDFjYmlBZ0lDQWdJRzFoZUZaaGJDQTlJRTFoZEdndWJXRjRLRzFoZUZaaGJDd2dkbUZzS1Z4dUlDQWdJQ0FnYldsdVZtRnNJRDBnVFdGMGFDNXRhVzRvYldsdVZtRnNMQ0IyWVd3cFhHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElITjBaWEFnUFNBb2JXRjRWbUZzSUMwZ2JXbHVWbUZzSUNzZ01Ta2dMeUJ6WldkdFpXNTBaV1JNWlc1bmRHaGNiaUFnSUNCMGFHbHpMbk5sWjIxbGJuUmxaRTFwYmlBOUlHMXBibFpoYkZ4dUlDQWdJSFJvYVhNdWMyVm5iV1Z1ZEdWa1UzUmxjQ0E5SUhOMFpYQmNiaUFnZlZ4dWZWeHVJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjb2xvcnMgPSB7IGVuYWJsZWQ6IHRydWUsIHZpc2libGU6IHRydWUsIHN0eWxlczoge30sIGtleXM6IHt9IH07XG5cbmlmICgnRk9SQ0VfQ09MT1InIGluIHByb2Nlc3MuZW52KSB7XG4gIGNvbG9ycy5lbmFibGVkID0gcHJvY2Vzcy5lbnYuRk9SQ0VfQ09MT1IgIT09ICcwJyA/IHRydWUgOiBmYWxzZTtcbn1cblxuY29uc3QgYW5zaSA9IGNvZGVzID0+IHtcbiAgY29kZXMub3BlbiA9IGBcXHUwMDFiWyR7Y29kZXNbMF19bWA7XG4gIGNvZGVzLmNsb3NlID0gYFxcdTAwMWJbJHtjb2Rlc1sxXX1tYDtcbiAgY29kZXMucmVnZXggPSBuZXcgUmVnRXhwKGBcXFxcdTAwMWJcXFxcWyR7Y29kZXNbMV19bWAsICdnJyk7XG4gIHJldHVybiBjb2Rlcztcbn07XG5cbmNvbnN0IHdyYXAgPSAoc3R5bGUsIHN0ciwgbmwpID0+IHtcbiAgbGV0IHsgb3BlbiwgY2xvc2UsIHJlZ2V4IH0gPSBzdHlsZTtcbiAgc3RyID0gb3BlbiArIChzdHIuaW5jbHVkZXMoY2xvc2UpID8gc3RyLnJlcGxhY2UocmVnZXgsIG9wZW4pIDogc3RyKSArIGNsb3NlO1xuICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYWxrL2NoYWxrL3B1bGwvOTIsIHRoYW5rcyB0byB0aGVcbiAgLy8gY2hhbGsgY29udHJpYnV0b3JzIGZvciB0aGlzIGZpeC4gSG93ZXZlciwgd2UndmUgY29uZmlybWVkIHRoYXRcbiAgLy8gdGhpcyBpc3N1ZSBpcyBhbHNvIHByZXNlbnQgaW4gV2luZG93cyB0ZXJtaW5hbHNcbiAgcmV0dXJuIG5sID8gc3RyLnJlcGxhY2UoL1xccj9cXG4vZywgYCR7Y2xvc2V9JCYke29wZW59YCkgOiBzdHI7XG59O1xuXG5jb25zdCBzdHlsZSA9IChpbnB1dCwgc3RhY2spID0+IHtcbiAgaWYgKGlucHV0ID09PSAnJyB8fCBpbnB1dCA9PSBudWxsKSByZXR1cm4gJyc7XG4gIGlmIChjb2xvcnMuZW5hYmxlZCA9PT0gZmFsc2UpIHJldHVybiBpbnB1dDtcbiAgaWYgKGNvbG9ycy52aXNpYmxlID09PSBmYWxzZSkgcmV0dXJuICcnO1xuICBsZXQgc3RyID0gJycgKyBpbnB1dDtcbiAgbGV0IG5sID0gc3RyLmluY2x1ZGVzKCdcXG4nKTtcbiAgbGV0IG4gPSBzdGFjay5sZW5ndGg7XG4gIHdoaWxlIChuLS0gPiAwKSBzdHIgPSB3cmFwKGNvbG9ycy5zdHlsZXNbc3RhY2tbbl1dLCBzdHIsIG5sKTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbmNvbnN0IGRlZmluZSA9IChuYW1lLCBjb2RlcywgdHlwZSkgPT4ge1xuICBjb2xvcnMuc3R5bGVzW25hbWVdID0gYW5zaShjb2Rlcyk7XG4gIGxldCB0ID0gY29sb3JzLmtleXNbdHlwZV0gfHwgKGNvbG9ycy5rZXlzW3R5cGVdID0gW10pO1xuICB0LnB1c2gobmFtZSk7XG5cbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShjb2xvcnMsIG5hbWUsIHtcbiAgICBnZXQoKSB7XG4gICAgICBsZXQgY29sb3IgPSBpbnB1dCA9PiBzdHlsZShpbnB1dCwgY29sb3Iuc3RhY2spO1xuICAgICAgUmVmbGVjdC5zZXRQcm90b3R5cGVPZihjb2xvciwgY29sb3JzKTtcbiAgICAgIGNvbG9yLnN0YWNrID0gdGhpcy5zdGFjayA/IHRoaXMuc3RhY2suY29uY2F0KG5hbWUpIDogW25hbWVdO1xuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgfSk7XG59O1xuXG5kZWZpbmUoJ3Jlc2V0JywgWzAsIDBdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnYm9sZCcsIFsxLCAyMl0sICdtb2RpZmllcicpO1xuZGVmaW5lKCdkaW0nLCBbMiwgMjJdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnaXRhbGljJywgWzMsIDIzXSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ3VuZGVybGluZScsIFs0LCAyNF0sICdtb2RpZmllcicpO1xuZGVmaW5lKCdpbnZlcnNlJywgWzcsIDI3XSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ2hpZGRlbicsIFs4LCAyOF0sICdtb2RpZmllcicpO1xuZGVmaW5lKCdzdHJpa2V0aHJvdWdoJywgWzksIDI5XSwgJ21vZGlmaWVyJyk7XG5cbmRlZmluZSgnYmxhY2snLCBbMzAsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ3JlZCcsIFszMSwgMzldLCAnY29sb3InKTtcbmRlZmluZSgnZ3JlZW4nLCBbMzIsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ3llbGxvdycsIFszMywgMzldLCAnY29sb3InKTtcbmRlZmluZSgnYmx1ZScsIFszNCwgMzldLCAnY29sb3InKTtcbmRlZmluZSgnbWFnZW50YScsIFszNSwgMzldLCAnY29sb3InKTtcbmRlZmluZSgnY3lhbicsIFszNiwgMzldLCAnY29sb3InKTtcbmRlZmluZSgnd2hpdGUnLCBbMzcsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ2dyYXknLCBbOTAsIDM5XSwgJ2NvbG9yJyk7XG5kZWZpbmUoJ2dyZXknLCBbOTAsIDM5XSwgJ2NvbG9yJyk7XG5cbmRlZmluZSgnYmdCbGFjaycsIFs0MCwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdSZWQnLCBbNDEsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnR3JlZW4nLCBbNDIsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnWWVsbG93JywgWzQzLCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ0JsdWUnLCBbNDQsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnTWFnZW50YScsIFs0NSwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdDeWFuJywgWzQ2LCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ1doaXRlJywgWzQ3LCA0OV0sICdiZycpO1xuXG5kZWZpbmUoJ2JsYWNrQnJpZ2h0JywgWzkwLCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgncmVkQnJpZ2h0JywgWzkxLCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgnZ3JlZW5CcmlnaHQnLCBbOTIsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCd5ZWxsb3dCcmlnaHQnLCBbOTMsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCdibHVlQnJpZ2h0JywgWzk0LCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgnbWFnZW50YUJyaWdodCcsIFs5NSwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ2N5YW5CcmlnaHQnLCBbOTYsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCd3aGl0ZUJyaWdodCcsIFs5NywgMzldLCAnYnJpZ2h0Jyk7XG5cbmRlZmluZSgnYmdCbGFja0JyaWdodCcsIFsxMDAsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnUmVkQnJpZ2h0JywgWzEwMSwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdHcmVlbkJyaWdodCcsIFsxMDIsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5kZWZpbmUoJ2JnWWVsbG93QnJpZ2h0JywgWzEwMywgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdCbHVlQnJpZ2h0JywgWzEwNCwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdNYWdlbnRhQnJpZ2h0JywgWzEwNSwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdDeWFuQnJpZ2h0JywgWzEwNiwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdXaGl0ZUJyaWdodCcsIFsxMDcsIDQ5XSwgJ2JnQnJpZ2h0Jyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggKi9cbi8vIGFuc2lSZWdleCBtb2RpZmllZCBmcm9tIG5vZGUuanMgcmVhZGxpbmU6IGh0dHBzOi8vZ2l0LmlvL2ZOV0ZQLCB3aGljaCBpdHNlbGZcbi8vIGlzIGFkb3B0ZWQgZnJvbSByZWdleCB1c2VkIGZvciBhbnNpIGVzY2FwZSBjb2RlIHNwbGl0dGluZyBpbiBhbnNpLXJlZ2V4XG4vLyBBZG9wdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2NoYWxrL2Fuc2ktcmVnZXgvYmxvYi9tYXN0ZXIvaW5kZXguanNcbi8vIExpY2Vuc2U6IE1JVCwgYXV0aG9yczogQHNpbmRyZXNvcmh1cywgUWl4LSwgYW5kIGFyanVubWVodGEgTWF0Y2hlcyBhbGxcbi8vIGFuc2kgZXNjYXBlIGNvZGUgc2VxdWVuY2VzIGluIGEgc3RyaW5nXG5jb2xvcnMuYW5zaVJlZ2V4ID0gL1tcXHUwMDFiXFx1MDA5Yl1bWygpIzs/XSooPzpbMC05XXsxLDR9KD86O1swLTldezAsNH0pKik/WzAtOUEtT1JaY2YtbnFyeT0+PF0vZ207XG5jb2xvcnMuaGFzQW5zaSA9IHN0ciA9PiBzdHIgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgJiYgY29sb3JzLmFuc2lSZWdleC50ZXN0KHN0cik7XG5jb2xvcnMudW5zdHlsZSA9IHN0ciA9PiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ci5yZXBsYWNlKGNvbG9ycy5hbnNpUmVnZXgsICcnKSA6IHN0cjtcbmNvbG9ycy5ub25lID0gY29sb3JzLmNsZWFyID0gc3RyID0+IHN0cjsgLy8gbm9vcCwgZm9yIHByb2dyYW1tYXRpYyB1c2FnZVxuY29sb3JzLnN0cmlwQ29sb3IgPSBjb2xvcnMudW5zdHlsZTtcbmNvbG9ycy5oYXNDb2xvciA9IGNvbG9ycy5oYXNBbnNpO1xuY29sb3JzLnN5bWJvbHMgPSByZXF1aXJlKCcuL3N5bWJvbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gY29sb3JzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc1dpbmRvd3MgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuY29uc3QgaXNMaW51eCA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICdsaW51eCc7XG5cbmNvbnN0IHdpbmRvd3MgPSB7XG4gIGJ1bGxldDogJ+KAoicsXG4gIGNoZWNrOiAn4oiaJyxcbiAgY3Jvc3M6ICfDlycsXG4gIGVsbGlwc2lzOiAnLi4uJyxcbiAgaGVhcnQ6ICfinaQnLFxuICBpbmZvOiAnaScsXG4gIGxpbmU6ICfilIAnLFxuICBtaWRkb3Q6ICfCtycsXG4gIG1pbnVzOiAn77yNJyxcbiAgcGx1czogJ++8iycsXG4gIHF1ZXN0aW9uOiAnPycsXG4gIHF1ZXN0aW9uU21hbGw6ICfvuZYnLFxuICBwb2ludGVyOiAnPicsXG4gIHBvaW50ZXJTbWFsbDogJ8K7JyxcbiAgd2FybmluZzogJ+KAvCdcbn07XG5cbmNvbnN0IG90aGVyID0ge1xuICBiYWxsb3RDcm9zczogJ+KcmCcsXG4gIGJ1bGxldDogJ+KAoicsXG4gIGNoZWNrOiAn4pyUJyxcbiAgY3Jvc3M6ICfinJYnLFxuICBlbGxpcHNpczogJ+KApicsXG4gIGhlYXJ0OiAn4p2kJyxcbiAgaW5mbzogJ+KEuScsXG4gIGxpbmU6ICfilIAnLFxuICBtaWRkb3Q6ICfCtycsXG4gIG1pbnVzOiAn77yNJyxcbiAgcGx1czogJ++8iycsXG4gIHF1ZXN0aW9uOiAnPycsXG4gIHF1ZXN0aW9uRnVsbDogJ++8nycsXG4gIHF1ZXN0aW9uU21hbGw6ICfvuZYnLFxuICBwb2ludGVyOiBpc0xpbnV4ID8gJ+KWuCcgOiAn4p2vJyxcbiAgcG9pbnRlclNtYWxsOiBpc0xpbnV4ID8gJ+KAoycgOiAn4oC6JyxcbiAgd2FybmluZzogJ+KaoCdcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNXaW5kb3dzID8gd2luZG93cyA6IG90aGVyO1xuUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3dpbmRvd3MnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogd2luZG93cyB9KTtcblJlZmxlY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdvdGhlcicsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvdGhlciB9KTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyBAdHMtaWdub3JlXG5pbXBvcnQgbGVhZmxldE1hcCBmcm9tICcuLi8uLi8uLi9sZWFmbGV0LWxheWVyJ1xuaW1wb3J0IHsgcmVkIH0gZnJvbSAnYW5zaS1jb2xvcnMnXG5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IEwgPSB3aW5kb3cuTFxuXG52YXIgcG9zaXRpb24gPSBuZXcgTC5MYXRMbmcoMzkuOTA3NzgsIDExNi40MDEyMTYpXG52YXIgbWFwID0gTC5tYXAoJ21hcCcpLnNldFZpZXcocG9zaXRpb24sIDEzKVxuXG5MLnRpbGVMYXllclxuICAuY2hpbmFQcm92aWRlcignR2FvRGUuTm9ybWFsLk1hcCcsIHsgbWF4Wm9vbTogMTgsIG1pblpvb206IDMgfSlcbiAgLmFkZFRvKG1hcClcblxuLy8gTC5tYXJrZXIoWzMyLjAzMDQsIDExOC43OTY4XSwge1xuLy8gICBpY29uOiBMLmRpdkljb24oe1xuLy8gICAgIGh0bWw6ICc8aSBjbGFzcz1cImljb25mb250XCIgc3R5bGU9XCJmb250LXNpemU6IDQwcHg7XCI+JiN4ZTY1NTs8L2k+Jyxcbi8vICAgICBpY29uU2l6ZTogWzQwLCA0MF0sXG4vLyAgICAgY2xhc3NOYW1lOiAndGVzdCcsXG4vLyAgIH0pLFxuLy8gfSkuYWRkVG8obWFwKVxuLy8gTC5tYXJrZXIoWzMyLjAzMDQsIDExOC43OTY4XSkuYWRkVG8obWFwKVxudmFyIGRhdGFMaXN0ID0gW1xuICB7XG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICBjb29yZGluYXRlczogWzExNi40MDEyMTYsIDM5LjkwNzc4XSxcbiAgICB9LFxuICAgIHByaWNlOiAyLFxuICB9LFxuXVxuXG5jb25zdCBsYXllciA9IG5ldyBsZWFmbGV0TWFwLk1hcmtlcnNMYXllcihcbiAgbWFwLFxuICBkYXRhTGlzdCxcbiAge1xuICAgIGljb25Vbmljb2RlOiAnJiN4ZTY1NTsnLFxuICAgIGljb25TaXplOiBbMjAsIDIwXSxcbiAgICBpY29uQW5jaG9yOiBbMTAsIDIwXSxcbiAgICBwb3B1cEF0dHI6ICdwcmljZScsXG4gICAgdG9vbHRpcEF0dHI6ICdwcmljZScsXG4gIH0sXG4gIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50TmFtZSlcbiAgfVxuKVxuXG5sYXllci5kcmF3KClcblxuTC5tYXJrZXIoTC5sYXRMbmcoMzkuOTA3NzgsIDExNi40MDEyMTYpKS5hZGRUbyhtYXApXG5cbkwubWFya2VyKEwubGF0TG5nKDM5LjkwNzc4LCAxMTYuNDAxMjE2KSwge1xuICBpY29uOiBMLmRpdkljb24oe1xuICAgIGh0bWw6IGBcbiAgICA8aVxuICAgICAgY2xhc3M9XCJpY29uZm9udFwiXG4gICAgICBzdHlsZT1cIlxuICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICBmb250LXNpemU6IDIwcHg7XG4gICAgICBcIlxuICAgICAgPlxuICAgICAgJiN4ZTY1NTtcbiAgICA8L2k+XG4gIGAsXG4gIH0pLFxufSkuYWRkVG8obWFwKVxud2luZG93LmxheWVyID0gbGF5ZXJcbiJdLCJzb3VyY2VSb290IjoiIn0=