/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/leaflet-layer.js":
/*!*******************************!*\
  !*** ./dist/leaflet-layer.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: default, Marker, MarkersLayer, MarkersBufferLayer, Polyline, PolylinesLayer, PolylinesBufferLayer, Polygon, PolygonsLayer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _marker_Marker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./marker/Marker */ "./src/marker/Marker.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Marker", function() { return _marker_Marker__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./marker/MarkersLayer */ "./src/marker/MarkersLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MarkersLayer", function() { return _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./marker/MarkersBufferLayer */ "./src/marker/MarkersBufferLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MarkersBufferLayer", function() { return _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./polyline/Polyline */ "./src/polyline/Polyline.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Polyline", function() { return _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./polyline/PolylinesLayer */ "./src/polyline/PolylinesLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolylinesLayer", function() { return _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./polyline/PolylinesBufferLayer */ "./src/polyline/PolylinesBufferLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolylinesBufferLayer", function() { return _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./polygon/Polygon */ "./src/polygon/Polygon.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./polygon/PolygonsLayer */ "./src/polygon/PolygonsLayer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PolygonsLayer", function() { return _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__["default"]; });









/* harmony default export */ __webpack_exports__["default"] = ({
    Marker: _marker_Marker__WEBPACK_IMPORTED_MODULE_0__["default"],
    MarkersLayer: _marker_MarkersLayer__WEBPACK_IMPORTED_MODULE_1__["default"],
    MarkersBufferLayer: _marker_MarkersBufferLayer__WEBPACK_IMPORTED_MODULE_2__["default"],
    Polyline: _polyline_Polyline__WEBPACK_IMPORTED_MODULE_3__["default"],
    PolylinesLayer: _polyline_PolylinesLayer__WEBPACK_IMPORTED_MODULE_4__["default"],
    PolylinesBufferLayer: _polyline_PolylinesBufferLayer__WEBPACK_IMPORTED_MODULE_5__["default"],
    Polygon: _polygon_Polygon__WEBPACK_IMPORTED_MODULE_6__["default"],
    PolygonsLayer: _polygon_PolygonsLayer__WEBPACK_IMPORTED_MODULE_7__["default"],
});



/***/ }),

/***/ "./src/marker/Marker.ts":
/*!******************************!*\
  !*** ./src/marker/Marker.ts ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Marker; });
class Marker extends L.Marker {
    constructor(latlng, options) {
        super(latlng, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/marker/MarkersBufferLayer.ts":
/*!******************************************!*\
  !*** ./src/marker/MarkersBufferLayer.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MarkersBufferLayer; });
/* harmony import */ var _MarkersLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MarkersLayer */ "./src/marker/MarkersLayer.ts");

class MarkersBufferLayer extends _MarkersLayer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(map, dataList, options, channelFunc) {
        super(map, dataList, options, channelFunc);
        this.type = 'markerBuffer';
        const defaultBufferOptions = {
            radius: 1000,
            stroke: false,
        };
        this.options = Object.assign(this.options, { bufferOptions: defaultBufferOptions }, options);
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.markerLayer) {
            this.map.removeLayer(this.markerLayer);
        }
        if (this.bufferLayer) {
            this.map.removeLayer(this.bufferLayer);
        }
        this.markerLayer = this.configMarkerLayer();
        this.bufferLayer = this.configBufferLayer();
        this.map.addLayer(this.markerLayer);
        this.map.addLayer(this.bufferLayer);
        return this;
    }
    configBufferLayer() {
        const groupLayer = L.layerGroup();
        this.markers.forEach((marker) => {
            const circleLayer = L.circle(marker.getLatLng(), this.options.bufferOptions);
            circleLayer.bindTooltip('' + marker.getData()[this.options.bufferTooltipAttr]);
            groupLayer.addLayer(circleLayer);
        });
        return groupLayer;
    }
}


/***/ }),

/***/ "./src/marker/MarkersLayer.ts":
/*!************************************!*\
  !*** ./src/marker/MarkersLayer.ts ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MarkersLayer; });
/* harmony import */ var _Marker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Marker */ "./src/marker/Marker.ts");

class MarkersLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            renderType: 'point',
            renderPointColorType: 'single',
            iconType: 'unicode',
            iconSize: [20, 20],
            iconClass: 'iconfont',
            iconColor: '#3388FF',
            iconAnchor: [10, 10],
            segmentedColors: ['#3388FF'],
            heatOptions: {
                max: 1,
            },
        };
        this.type = 'marker';
        this.map = map;
        this.dataList = dataList;
        this.options = Object.assign({}, defaultOptions, options);
        this.channelFunc = channelFunc;
        this.visible = true;
        this.layer = null;
        this.focusedMarker = null;
        this.hoveredMarker = null;
        this.focusedDisplayMarker = null;
        this.markers = [];
        this.markerLayer = null;
        this.heatLayer = null;
        this.clusterLayer = null;
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initMarkers();
    }
    draw(options) {
        this.visible = true;
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        switch (this.options.renderType) {
            case 'point': {
                this.layer = this.configMarkerLayer();
                break;
            }
            case 'cluster': {
                this.layer = this.configClusterLayer();
                break;
            }
            case 'heat': {
                this.layer = this.configHeatLayer();
                break;
            }
            default: {
                throw new Error(`renderType 不支持"${this.options.renderType}"`);
            }
        }
        this.map.addLayer(this.layer);
        return this;
    }
    setOptions(options, redraw = false) {
        this.options = Object.assign(this.options, options);
        if (redraw) {
            this.redraw();
        }
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.markers.length <= 0) {
            return this.map.getBounds();
        }
        return this.markers.map((marker) => [marker.getLatLng().lat, marker.getLatLng().lng]);
    }
    destroy() {
        // TODO: 将事件移除
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.iconColor = color;
        this.redraw();
    }
    changeIcon(iconUnicode) {
        this.options.iconUnicode = iconUnicode;
        this.redraw();
    }
    /** 渲染为散点图 */
    configMarkerLayer() {
        const canvasIconLayer = L.canvasIconLayer({}).addTo(this.map);
        // 添加点击事件
        canvasIconLayer.addOnClickListener((_, [{ data: marker }]) => {
            this.markerClickHandler(marker);
        });
        // 添加 hover 事件
        canvasIconLayer.addOnHoverListener((_, [{ data: marker }]) => {
            // 之前有 hover 的关闭 tooltip
            if (this.hoveredMarker) {
                this.hoveredMarker.closeTooltip();
            }
            this.hoveredMarker = marker;
            if (this.hoveredMarker.getTooltip()) {
                // 如果已经设置 tooltip 直接展示 tooltip
                this.hoveredMarker.openTooltip();
            }
            else {
                // 否则绑定 tooltip 并展示
                if (this.options.tooltipAttr) {
                    this.hoveredMarker.bindTooltip('' + this.hoveredMarker.getData()[this.options.tooltipAttr]);
                }
            }
        });
        canvasIconLayer.addMarkers(this.markers);
        this.map.on('zoomstart', () => {
            if (this.layer === this.markerLayer) {
                this.map.removeLayer(this.markerLayer);
            }
        });
        this.map.on('zoomend', () => {
            if (this.layer === this.markerLayer) {
                this.map.addLayer(this.markerLayer);
            }
        });
        // 解决初次渲染不出图标问题
        setTimeout(() => {
            this.map.panTo(this.map.getCenter());
        });
        this.markerLayer = canvasIconLayer;
        return this.markerLayer;
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    initMarkers() {
        this.dataList.forEach((data) => {
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            const marker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"]([
                layer.getLatLng().lat,
                layer.getLatLng().lng,
            ], {
                icon: this.getMarkerIcon(data),
            });
            // 将相关值绑定到 marker上
            marker.setData(data);
            this.markers.push(marker);
        });
    }
    // 处理 marker 点击事件
    markerClickHandler(marker) {
        this.focusedMarker = marker;
        // 删除前一个放大图标
        if (this.focusedDisplayMarker) {
            this.focusedDisplayMarker.removeFrom(this.map);
        }
        // 生成当前放大图标
        this.focusedDisplayMarker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"](marker.getLatLng(), {
            icon: this.getLargerMarkerIcon(marker.getData()),
        });
        this.focusedDisplayMarker.addTo(this.map);
        this.focusedDisplayMarker
            .bindPopup(this.getPopupContent(marker.getData()))
            .openPopup();
        this.focusedDisplayMarker.on('popupclose', () => {
            this.focusedDisplayMarker.remove();
        });
        this.map.panTo(this.focusedMarker.getLatLng());
        this.channelFunc('on-click-marker', marker);
    }
    configClusterLayer() {
        // 展示聚合图层
        this.clusterLayer = L.markerClusterGroup();
        this.clusterLayer.addLayers(this.markers.map((m) => {
            const marker = new _Marker__WEBPACK_IMPORTED_MODULE_0__["default"](m.getLatLng(), {
                icon: this.getMarkerIcon(m.getData()),
            });
            marker.setData(m.getData());
            marker.bindTooltip('' + marker.getData()[this.options.tooltipAttr]);
            marker.on('click', () => {
                this.markerClickHandler(marker);
            });
            return marker;
        }));
        return this.clusterLayer;
    }
    /** 渲染为热力图 */
    configHeatLayer() {
        this.markers.forEach((marker) => {
            const latLng = marker.getLatLng();
            const dimensionAttr = this.options.heatOptions && this.options.heatOptions.dimensionAttr;
            let alt = marker.getData()[dimensionAttr];
            if (typeof alt !== 'number') {
                alt = this.options.heatOptions.max;
            }
            marker.setLatLng(L.latLng(latLng.lat, latLng.lng, alt));
        });
        this.heatLayer = L.heatLayer(this.markers.map((it) => it.getLatLng()), this.options.heatOptions);
        return this.heatLayer;
    }
    getLargerMarkerIcon(data) {
        return this._getMarkerIcon(data, true);
    }
    getMarkerIcon(data) {
        return this._getMarkerIcon(data, false);
    }
    /** 获取当前 marker 需要展示的 icon */
    _getMarkerIcon(data, isLarger) {
        let iconSize = this.options.iconSize;
        let iconAnchor = this.options.iconAnchor;
        iconSize = isLarger ? [iconSize[0] * 1.5, iconSize[1] * 1.5] : iconSize;
        iconAnchor = isLarger
            ? [iconAnchor[0] * 1.5, iconAnchor[1] * 1.5]
            : iconAnchor;
        const iconColor = this.options.iconColor;
        switch (this.options.iconType) {
            case 'image': {
                return L.icon({
                    iconUrl: this.options.iconImageUrl,
                    iconSize,
                    iconAnchor,
                });
            }
            case 'font_class':
            case 'symbol':
            case 'unicode': {
                return L.divIcon({
                    html: this.getCustomIconHTML(data, {
                        iconSize,
                        iconColor,
                    }),
                    className: isLarger ? 'large-div-icon-marker' : '',
                    iconSize,
                    iconAnchor,
                });
            }
            default: {
                throw new Error(`图标类型不支持"${this.options.iconType}"`);
            }
        }
    }
    getCustomIconHTML(data, options) {
        if (this.options.iconRenderer) {
            options = Object.assign({}, this.options, options);
            return this.options.iconRenderer(data, options);
        }
        switch (this.options.renderPointColorType) {
            case 'single': {
                switch (this.options.iconType) {
                    // 使用 class
                    case 'font_class': {
                        return `
              <i class="${this.options.iconClass}"
                style="
                  color: ${options.iconColor};
                  font-size: ${options.iconSize[0]}px;
                "
                />
            `;
                    }
                    // 使用 svg
                    case 'symbol': {
                        return `
              <svg class="icon-symbol" aria-hidden="true">
                <use xlink:href="${this.options.iconSymbol}" />
              </svg>
            `;
                    }
                    // 使用 unicode
                    case 'unicode': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${options.iconColor};
                  font-size: ${options.iconSize[0]}px;
                "
                >
                ${this.options.iconUnicode}
              </i>
            `;
                    }
                }
                break;
            }
            case 'segmented': {
                switch (this.options.iconType) {
                    // 使用 class
                    case 'font_class': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${this.getSegmentedMarkerColor(data)};
                  font-size: ${options.iconSize[0]}px;
                "
                />
            `;
                    }
                    // 使用 svg
                    case 'symbol': {
                        return `
              <svg class="icon-symbol" aria-hidden="true">
                <use xlink:href="${this.options.iconSymbol}" />
              </svg>
            `;
                    }
                    // 使用 unicode
                    case 'unicode': {
                        return `
              <i
                class="${this.options.iconClass}"
                style="
                  color: ${this.getSegmentedMarkerColor(data)};
                  font-size: ${options.iconSize[0]}px;
                "
                >
                ${this.options.iconUnicode}
              </i>
            `;
                    }
                }
                break;
            }
            default: {
                throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`);
            }
        }
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
    getSegmentedMarkerColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
    getPopupContent(data) {
        if (!this.options.popupAttr) {
            return '';
        }
        return `${this.options.popupAttr}: ${data[this.options.popupAttr]}`;
    }
}


/***/ }),

/***/ "./src/polygon/Polygon.ts":
/*!********************************!*\
  !*** ./src/polygon/Polygon.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Polygon; });
class Polygon extends L.Polygon {
    constructor(latlngs, options) {
        super(latlngs, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/polygon/PolygonsLayer.ts":
/*!**************************************!*\
  !*** ./src/polygon/PolygonsLayer.ts ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolygonsLayer; });
/* harmony import */ var _Polygon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Polygon */ "./src/polygon/Polygon.ts");

class PolygonsLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            color: '#3388FF',
            renderPolygonColorType: 'single',
            segmentedColors: ['#3388FF'],
        };
        this.type = 'polygon';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polygons = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolygon = null
        this.options = Object.assign({}, defaultOptions, options);
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initPolygons();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolygonLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polygons.length <= 0) {
            return this.map.getBounds();
        }
        return this.polygons.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polygons[0].getBounds());
    }
    destroy() {
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.fillColor = color;
        this.redraw();
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    initPolygons() {
        this.dataList.forEach((data) => {
            this.cacheSegmentParams();
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            const polygon = new _Polygon__WEBPACK_IMPORTED_MODULE_0__["default"](layer.getLatLngs());
            // 将相关值绑定到 marker上
            polygon.setData(data);
            this.polygons.push(polygon);
        });
    }
    configPolygonLayer() {
        this.polygonLayer = L.layerGroup();
        this.polygons.forEach((polygon) => {
            polygon.on('click', () => {
                this.polygonClickHandler(polygon);
            });
            let fillColor = this.options.fillColor;
            if (this.options.renderPolygonColorType === 'segmented') {
                fillColor = this.getSegmentedPolygonColor(polygon.getData());
            }
            const options = Object.assign({}, this.options, {
                fillColor,
            });
            const newPolygon = new _Polygon__WEBPACK_IMPORTED_MODULE_0__["default"](polygon.getLatLngs(), options);
            this.polygonLayer.addLayer(newPolygon);
        });
        return this.polygonLayer;
    }
    polygonClickHandler(polygon) {
        // this.focusedPolygon = polygon
        this.channelFunc('on-click-polygon', polygon);
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
    getSegmentedPolygonColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
}


/***/ }),

/***/ "./src/polyline/Polyline.ts":
/*!**********************************!*\
  !*** ./src/polyline/Polyline.ts ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Polyline; });
class Polyline extends L.Polyline {
    constructor(latlngs, options) {
        super(latlngs, options);
    }
    setData(data) {
        this.__data = data;
    }
    getData() {
        return this.__data;
    }
}


/***/ }),

/***/ "./src/polyline/PolylinesBufferLayer.ts":
/*!**********************************************!*\
  !*** ./src/polyline/PolylinesBufferLayer.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylinesBufferLayer; });
/* harmony import */ var _PolylinesLayer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PolylinesLayer */ "./src/polyline/PolylinesLayer.ts");

class PolylinesBufferLayer extends _PolylinesLayer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(map, dataList, options, channelFunc) {
        super(map, dataList, options, channelFunc);
        const defaultOptions = {
            renderPolylineColorType: 'single',
            segmentedColors: ['#3388FF'],
            corridor: 100,
            color: '#3388FF',
            opacity: 0.5,
        };
        this.type = 'polylineBuffer';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polylines = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolyline = null
        this.options = Object.assign({}, defaultOptions, options);
        this.initPolylines();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolylineBufferLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polylines.length <= 0) {
            return this.map.getBounds();
        }
        return this.polylines.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polylines[0].getBounds());
    }
    changeColor(color) {
        this.options.color = color;
        this.redraw();
    }
    configPolylineBufferLayer() {
        this.polylineLayer = L.layerGroup();
        this.polylines.forEach((polyline) => {
            polyline.on('click', () => {
                this.polylineClickHandler(polyline);
            });
            const options = Object.assign({}, this.options, {
                color: this.options.renderPolylineColorType === 'single'
                    ? this.options.color
                    : this.getSegmentedPolylineColor(polyline.getData()),
            });
            const polylineBuffer = L.corridor(polyline.getLatLngs().map((latLng) => L.latLng([latLng.lng, latLng.lat])), options);
            if (this.options.tooltipAttr) {
                polylineBuffer.bindTooltip(this.getToolTipContent(polyline.getData()));
            }
            this.polylineLayer.addLayer(polylineBuffer);
        });
        return this.polylineLayer;
    }
}


/***/ }),

/***/ "./src/polyline/PolylinesLayer.ts":
/*!****************************************!*\
  !*** ./src/polyline/PolylinesLayer.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylinesLayer; });
/* harmony import */ var _Polyline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Polyline */ "./src/polyline/Polyline.ts");

class PolylinesLayer {
    constructor(map, dataList, options, channelFunc) {
        const defaultOptions = {
            color: '#3388FF',
            renderPolylineColorType: 'single',
            segmentedColors: ['#3388FF'],
        };
        this.type = 'polyline';
        this.map = map;
        this.dataList = dataList;
        this.options = options;
        this.channelFunc = channelFunc;
        this.visible = true;
        this.polylines = [];
        this.segmentedMin = Infinity;
        this.segmentedStep = 1;
        // this.focusedPolyline = null
        this.options = Object.assign({}, defaultOptions, options);
        // 缓存 segment 相关数据
        this.cacheSegmentParams();
        this.initPolylines();
    }
    draw(options) {
        this.options = Object.assign(this.options, options);
        return this.redraw();
    }
    redraw() {
        if (!this.visible) {
            return;
        }
        if (this.layer) {
            this.layer.remove();
        }
        this.layer = this.configPolylineLayer();
        this.map.addLayer(this.layer);
        return this;
    }
    fitBounds() {
        this.map.fitBounds(this.getBounds());
    }
    getBounds() {
        if (this.polylines.length <= 0) {
            return this.map.getBounds();
        }
        return this.polylines.reduce((prev, curr) => prev.extend(curr.getBounds()), this.polylines[0].getBounds());
    }
    destroy() {
        if (this.layer) {
            this.layer.remove();
        }
    }
    toggleVisible(visible) {
        this.visible = visible;
        if (!this.layer) {
            return;
        }
        if (visible) {
            this.map.addLayer(this.layer);
        }
        else {
            this.map.removeLayer(this.layer);
        }
    }
    changeColor(color) {
        this.options.fillColor = color;
        this.redraw();
    }
    initPolylines() {
        this.dataList.forEach((data) => {
            this.cacheSegmentParams();
            const layer = L.geoJSON(data.geometry).getLayers()[0];
            let fillColor = this.options.fillColor;
            if (this.options.renderPolylineColorType === 'segmented') {
                fillColor = this.getSegmentedPolylineColor(data);
            }
            const polyline = new _Polyline__WEBPACK_IMPORTED_MODULE_0__["default"](layer.getLatLngs(), Object.assign({}, this.options, { fillColor }));
            // 将相关值绑定到 marker上
            polyline.setData(data);
            this.polylines.push(polyline);
        });
    }
    getSegmentedPolylineColor(data) {
        const val = data[this.options.segmentedAttr];
        const color = this.options.segmentedColors[(val - this.segmentedMin) / this.segmentedStep];
        return color;
    }
    polylineClickHandler(polyline) {
        // this.focusedPolyline = polyline
        this.channelFunc('on-click-polyline', polyline);
    }
    getToolTipContent(data) {
        return '' + data[this.options.tooltipAttr];
    }
    configPolylineLayer() {
        this.polylineLayer = L.layerGroup();
        this.polylines.forEach((polyline) => {
            polyline.on('click', () => {
                this.polylineClickHandler(polyline);
            });
            const options = Object.assign({}, this.options, {
                color: this.getSegmentedPolylineColor(polyline.getData()),
            });
            const newPolyline = new _Polyline__WEBPACK_IMPORTED_MODULE_0__["default"](polyline.getLatLngs(), options);
            this.polylineLayer.addLayer(newPolyline);
        });
        return this.polylineLayer;
    }
    cacheSegmentParams() {
        const segmentedLength = this.options.segmentedColors.length;
        let maxVal = -Infinity;
        let minVal = Infinity;
        for (const data of this.dataList) {
            const val = data[this.options.segmentedAttr];
            maxVal = Math.max(maxVal, val);
            minVal = Math.min(minVal, val);
        }
        const step = (maxVal - minVal + 1) / segmentedLength;
        this.segmentedMin = minVal;
        this.segmentedStep = step;
    }
}


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./node_modules/ansi-colors/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-colors/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const colors = { enabled: true, visible: true, styles: {}, keys: {} };

if ('FORCE_COLOR' in process.env) {
  colors.enabled = process.env.FORCE_COLOR !== '0' ? true : false;
}

const ansi = codes => {
  codes.open = `\u001b[${codes[0]}m`;
  codes.close = `\u001b[${codes[1]}m`;
  codes.regex = new RegExp(`\\u001b\\[${codes[1]}m`, 'g');
  return codes;
};

const wrap = (style, str, nl) => {
  let { open, close, regex } = style;
  str = open + (str.includes(close) ? str.replace(regex, open) : str) + close;
  // see https://github.com/chalk/chalk/pull/92, thanks to the
  // chalk contributors for this fix. However, we've confirmed that
  // this issue is also present in Windows terminals
  return nl ? str.replace(/\r?\n/g, `${close}$&${open}`) : str;
};

const style = (input, stack) => {
  if (input === '' || input == null) return '';
  if (colors.enabled === false) return input;
  if (colors.visible === false) return '';
  let str = '' + input;
  let nl = str.includes('\n');
  let n = stack.length;
  while (n-- > 0) str = wrap(colors.styles[stack[n]], str, nl);
  return str;
};

const define = (name, codes, type) => {
  colors.styles[name] = ansi(codes);
  let t = colors.keys[type] || (colors.keys[type] = []);
  t.push(name);

  Reflect.defineProperty(colors, name, {
    get() {
      let color = input => style(input, color.stack);
      Reflect.setPrototypeOf(color, colors);
      color.stack = this.stack ? this.stack.concat(name) : [name];
      return color;
    }
  });
};

define('reset', [0, 0], 'modifier');
define('bold', [1, 22], 'modifier');
define('dim', [2, 22], 'modifier');
define('italic', [3, 23], 'modifier');
define('underline', [4, 24], 'modifier');
define('inverse', [7, 27], 'modifier');
define('hidden', [8, 28], 'modifier');
define('strikethrough', [9, 29], 'modifier');

define('black', [30, 39], 'color');
define('red', [31, 39], 'color');
define('green', [32, 39], 'color');
define('yellow', [33, 39], 'color');
define('blue', [34, 39], 'color');
define('magenta', [35, 39], 'color');
define('cyan', [36, 39], 'color');
define('white', [37, 39], 'color');
define('gray', [90, 39], 'color');
define('grey', [90, 39], 'color');

define('bgBlack', [40, 49], 'bg');
define('bgRed', [41, 49], 'bg');
define('bgGreen', [42, 49], 'bg');
define('bgYellow', [43, 49], 'bg');
define('bgBlue', [44, 49], 'bg');
define('bgMagenta', [45, 49], 'bg');
define('bgCyan', [46, 49], 'bg');
define('bgWhite', [47, 49], 'bg');

define('blackBright', [90, 39], 'bright');
define('redBright', [91, 39], 'bright');
define('greenBright', [92, 39], 'bright');
define('yellowBright', [93, 39], 'bright');
define('blueBright', [94, 39], 'bright');
define('magentaBright', [95, 39], 'bright');
define('cyanBright', [96, 39], 'bright');
define('whiteBright', [97, 39], 'bright');

define('bgBlackBright', [100, 49], 'bgBright');
define('bgRedBright', [101, 49], 'bgBright');
define('bgGreenBright', [102, 49], 'bgBright');
define('bgYellowBright', [103, 49], 'bgBright');
define('bgBlueBright', [104, 49], 'bgBright');
define('bgMagentaBright', [105, 49], 'bgBright');
define('bgCyanBright', [106, 49], 'bgBright');
define('bgWhiteBright', [107, 49], 'bgBright');

/* eslint-disable no-control-regex */
// ansiRegex modified from node.js readline: https://git.io/fNWFP, which itself
// is adopted from regex used for ansi escape code splitting in ansi-regex
// Adopted from https://github.com/chalk/ansi-regex/blob/master/index.js
// License: MIT, authors: @sindresorhus, Qix-, and arjunmehta Matches all
// ansi escape code sequences in a string
colors.ansiRegex = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/gm;
colors.hasAnsi = str => str && typeof str === 'string' && colors.ansiRegex.test(str);
colors.unstyle = str => typeof str === 'string' ? str.replace(colors.ansiRegex, '') : str;
colors.none = colors.clear = str => str; // noop, for programmatic usage
colors.stripColor = colors.unstyle;
colors.hasColor = colors.hasAnsi;
colors.symbols = __webpack_require__(/*! ./symbols */ "./node_modules/ansi-colors/symbols.js");
module.exports = colors;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/ansi-colors/symbols.js":
/*!*********************************************!*\
  !*** ./node_modules/ansi-colors/symbols.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const isWindows = process.platform === 'win32';
const isLinux = process.platform === 'linux';

const windows = {
  bullet: '•',
  check: '√',
  cross: '×',
  ellipsis: '...',
  heart: '❤',
  info: 'i',
  line: '─',
  middot: '·',
  minus: '－',
  plus: '＋',
  question: '?',
  questionSmall: '﹖',
  pointer: '>',
  pointerSmall: '»',
  warning: '‼'
};

const other = {
  ballotCross: '✘',
  bullet: '•',
  check: '✔',
  cross: '✖',
  ellipsis: '…',
  heart: '❤',
  info: 'ℹ',
  line: '─',
  middot: '·',
  minus: '－',
  plus: '＋',
  question: '?',
  questionFull: '？',
  questionSmall: '﹖',
  pointer: isLinux ? '▸' : '❯',
  pointerSmall: isLinux ? '‣' : '›',
  warning: '⚠'
};

module.exports = isWindows ? windows : other;
Reflect.defineProperty(module.exports, 'windows', { enumerable: false, value: windows });
Reflect.defineProperty(module.exports, 'other', { enumerable: false, value: other });

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./test/src/app.js":
/*!*************************!*\
  !*** ./test/src/app.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _leaflet_layer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../leaflet-layer */ "./dist/leaflet-layer.js");
/* harmony import */ var _leaflet_layer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_leaflet_layer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var ansi_colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ansi-colors */ "./node_modules/ansi-colors/index.js");
/* harmony import */ var ansi_colors__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ansi_colors__WEBPACK_IMPORTED_MODULE_1__);
// @ts-ignore



// @ts-ignore
const L = window.L

var position = new L.LatLng(32.0304, 118.7968)
var map = L.map('map').setView(position, 13)

L.tileLayer
  .chinaProvider('GaoDe.Normal.Map', { maxZoom: 18, minZoom: 3 })
  .addTo(map)

// L.marker([32.0304, 118.7968], {
//   icon: L.divIcon({
//     html: '<i class="iconfont" style="font-size: 40px;">&#xe655;</i>',
//     iconSize: [40, 40],
//     className: 'test',
//   }),
// }).addTo(map)
// L.marker([32.0304, 118.7968]).addTo(map)
var dataList = [
  {
    geometry: {
      type: 'LineString',
      coordinates: [[32.0404, 118.7968], [32.0404, 118.7868]],
    },
    price: 2,
  },
]

const layer = new _leaflet_layer__WEBPACK_IMPORTED_MODULE_0___default.a.PolylinesBufferLayer(
  map,
  dataList,
  { tooltipAttr: 'price' },
  function(eventName) {
    console.log(eventName)
  }
)

layer.draw()

window.layer = layer


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGlzdC9sZWFmbGV0LWxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hbnNpLWNvbG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5zaS1jb2xvcnMvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3Rlc3Qvc3JjL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsRkE7QUFDQSxJQUFJLElBQXlEO0FBQzdEO0FBQ0EsTUFBTSxFQUsyQjtBQUNqQyxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usa0JBQWtCO0FBQ2xGO0FBQ0EseURBQXlELGNBQWM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUNBQWlDO0FBQ2xGLHdIQUF3SCxtQkFBbUIsRUFBRTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCLEVBQUU7QUFDL0QseUNBQXlDLGVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwrREFBK0Q7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGLCtEQUErRCxFQUFFOztBQUVoSztBQUNBLHFHQUFxRyxxRUFBcUUsRUFBRTs7QUFFNUs7QUFDQSwyR0FBMkcsMkVBQTJFLEVBQUU7O0FBRXhMO0FBQ0EsaUdBQWlHLG1FQUFtRSxFQUFFOztBQUV0SztBQUNBLHVHQUF1Ryx5RUFBeUUsRUFBRTs7QUFFbEw7QUFDQSw2R0FBNkcsK0VBQStFLEVBQUU7O0FBRTlMO0FBQ0EsZ0dBQWdHLGlFQUFpRSxFQUFFOztBQUVuSztBQUNBLHNHQUFzRyx1RUFBdUUsRUFBRTs7Ozs7Ozs7OztBQVUvSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7O0FBSUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyxlQUFlLEVBQUU7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRywyQkFBMkIsRUFBRTtBQUM5SDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHNDQUFzQztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLHFCQUFxQixFQUFFO0FBQ3hIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCx3QkFBd0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0EsaURBQWlELGVBQWU7QUFDaEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxpREFBaUQsZUFBZTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDJDQUEyQyxzQkFBc0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVCQUF1QjtBQUNqRDtBQUNBLDJCQUEyQjtBQUMzQiwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBLDJCQUEyQjtBQUMzQiwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBLDJCQUEyQjtBQUMzQiwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVCQUF1QjtBQUNoRDtBQUNBLDJCQUEyQjtBQUMzQiwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsa0NBQWtDO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QixJQUFJLDZCQUE2QjtBQUMxRTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLGdCQUFnQixFQUFFO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpR0FBaUcsc0JBQXNCLEVBQUU7QUFDekg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpR0FBaUcsaUJBQWlCLEVBQUU7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyw2QkFBNkIsRUFBRTtBQUNoSTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyx1QkFBdUIsRUFBRTtBQUMxSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVIQUF1SCxpQkFBaUIsWUFBWTtBQUNwSjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDRDQUE0QztBQUM1QztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQLFVBQVU7QUFDVixDQUFDO0FBQ0QsMkNBQTJDLGNBQWMsdW81RTs7Ozs7Ozs7Ozs7O0FDN2dDekQsK0NBQWE7O0FBRWIsZ0JBQWdCLHlDQUF5QyxVQUFVOztBQUVuRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsU0FBUztBQUNsQywwQkFBMEIsU0FBUztBQUNuQyx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBOztBQUVBO0FBQ0EsT0FBTyxxQkFBcUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsTUFBTSxJQUFJLEtBQUs7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsWUFBWSxJQUFJLElBQUksTUFBTSxJQUFJO0FBQ3RFO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBLGlCQUFpQixtQkFBTyxDQUFDLHdEQUFXO0FBQ3BDOzs7Ozs7Ozs7Ozs7OztBQzlHQSwrQ0FBYTs7QUFFYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQsb0NBQW9DO0FBQ3ZGLGlEQUFpRCxrQ0FBa0M7Ozs7Ozs7Ozs7Ozs7QUM3Q25GO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7Ozs7Ozs7Ozs7Ozs7QUN2THRDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUMrQztBQUNkOztBQUVqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsMEJBQTBCO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQsVUFBVTtBQUNuRTtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0JBQWtCLHFEQUFVO0FBQzVCO0FBQ0E7QUFDQSxHQUFHLHVCQUF1QjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3Rlc3Qvc3JjL2FwcC5qc1wiKTtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImxlYWZsZXRNYXBcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibGVhZmxldE1hcFwiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LnRzXCIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyBcIi4vc3JjL2luZGV4LnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQsIE1hcmtlciwgTWFya2Vyc0xheWVyLCBNYXJrZXJzQnVmZmVyTGF5ZXIsIFBvbHlsaW5lLCBQb2x5bGluZXNMYXllciwgUG9seWxpbmVzQnVmZmVyTGF5ZXIsIFBvbHlnb24sIFBvbHlnb25zTGF5ZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX21hcmtlcl9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWFya2VyL01hcmtlciAqLyBcIi4vc3JjL21hcmtlci9NYXJrZXIudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNYXJrZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfbWFya2VyX01hcmtlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbWFya2VyX01hcmtlcnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tYXJrZXIvTWFya2Vyc0xheWVyICovIFwiLi9zcmMvbWFya2VyL01hcmtlcnNMYXllci50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1hcmtlcnNMYXllclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9tYXJrZXJfTWFya2Vyc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJkZWZhdWx0XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9tYXJrZXJfTWFya2Vyc0J1ZmZlckxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21hcmtlci9NYXJrZXJzQnVmZmVyTGF5ZXIgKi8gXCIuL3NyYy9tYXJrZXIvTWFya2Vyc0J1ZmZlckxheWVyLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWFya2Vyc0J1ZmZlckxheWVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX21hcmtlcl9NYXJrZXJzQnVmZmVyTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcImRlZmF1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvbHlsaW5lX1BvbHlsaW5lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BvbHlsaW5lL1BvbHlsaW5lICovIFwiLi9zcmMvcG9seWxpbmUvUG9seWxpbmUudHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb2x5bGluZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9wb2x5bGluZV9Qb2x5bGluZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiZGVmYXVsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcG9seWxpbmVfUG9seWxpbmVzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcG9seWxpbmUvUG9seWxpbmVzTGF5ZXIgKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNMYXllci50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBvbHlsaW5lc0xheWVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3BvbHlsaW5lX1BvbHlsaW5lc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJkZWZhdWx0XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9wb2x5bGluZV9Qb2x5bGluZXNCdWZmZXJMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wb2x5bGluZS9Qb2x5bGluZXNCdWZmZXJMYXllciAqLyBcIi4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lc0J1ZmZlckxheWVyLnRzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9seWxpbmVzQnVmZmVyTGF5ZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfcG9seWxpbmVfUG9seWxpbmVzQnVmZmVyTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcImRlZmF1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvbHlnb25fUG9seWdvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wb2x5Z29uL1BvbHlnb24gKi8gXCIuL3NyYy9wb2x5Z29uL1BvbHlnb24udHNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQb2x5Z29uXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3BvbHlnb25fUG9seWdvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fW1wiZGVmYXVsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcG9seWdvbl9Qb2x5Z29uc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BvbHlnb24vUG9seWdvbnNMYXllciAqLyBcIi4vc3JjL3BvbHlnb24vUG9seWdvbnNMYXllci50c1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBvbHlnb25zTGF5ZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfcG9seWdvbl9Qb2x5Z29uc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bXCJkZWZhdWx0XCJdOyB9KTtcblxuXG5cblxuXG5cblxuXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoe1xuICAgIE1hcmtlcjogX21hcmtlcl9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0sXG4gICAgTWFya2Vyc0xheWVyOiBfbWFya2VyX01hcmtlcnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fW1wiZGVmYXVsdFwiXSxcbiAgICBNYXJrZXJzQnVmZmVyTGF5ZXI6IF9tYXJrZXJfTWFya2Vyc0J1ZmZlckxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJkZWZhdWx0XCJdLFxuICAgIFBvbHlsaW5lOiBfcG9seWxpbmVfUG9seWxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcImRlZmF1bHRcIl0sXG4gICAgUG9seWxpbmVzTGF5ZXI6IF9wb2x5bGluZV9Qb2x5bGluZXNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiZGVmYXVsdFwiXSxcbiAgICBQb2x5bGluZXNCdWZmZXJMYXllcjogX3BvbHlsaW5lX1BvbHlsaW5lc0J1ZmZlckxheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJkZWZhdWx0XCJdLFxuICAgIFBvbHlnb246IF9wb2x5Z29uX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcImRlZmF1bHRcIl0sXG4gICAgUG9seWdvbnNMYXllcjogX3BvbHlnb25fUG9seWdvbnNMYXllcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fW1wiZGVmYXVsdFwiXSxcbn0pO1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvbWFya2VyL01hcmtlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL21hcmtlci9NYXJrZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNYXJrZXI7IH0pO1xuY2xhc3MgTWFya2VyIGV4dGVuZHMgTC5NYXJrZXIge1xuICAgIGNvbnN0cnVjdG9yKGxhdGxuZywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihsYXRsbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGE7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL21hcmtlci9NYXJrZXJzQnVmZmVyTGF5ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9tYXJrZXIvTWFya2Vyc0J1ZmZlckxheWVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWFya2Vyc0J1ZmZlckxheWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWFya2Vyc0xheWVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01hcmtlcnNMYXllciAqLyBcIi4vc3JjL21hcmtlci9NYXJrZXJzTGF5ZXIudHNcIik7XG5cbmNsYXNzIE1hcmtlcnNCdWZmZXJMYXllciBleHRlbmRzIF9NYXJrZXJzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0ge1xuICAgIGNvbnN0cnVjdG9yKG1hcCwgZGF0YUxpc3QsIG9wdGlvbnMsIGNoYW5uZWxGdW5jKSB7XG4gICAgICAgIHN1cGVyKG1hcCwgZGF0YUxpc3QsIG9wdGlvbnMsIGNoYW5uZWxGdW5jKTtcbiAgICAgICAgdGhpcy50eXBlID0gJ21hcmtlckJ1ZmZlcic7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRCdWZmZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgcmFkaXVzOiAxMDAwLFxuICAgICAgICAgICAgc3Ryb2tlOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIHsgYnVmZmVyT3B0aW9uczogZGVmYXVsdEJ1ZmZlck9wdGlvbnMgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGRyYXcob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubWFya2VyTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMubWFya2VyTGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlckxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcih0aGlzLmJ1ZmZlckxheWVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1hcmtlckxheWVyID0gdGhpcy5jb25maWdNYXJrZXJMYXllcigpO1xuICAgICAgICB0aGlzLmJ1ZmZlckxheWVyID0gdGhpcy5jb25maWdCdWZmZXJMYXllcigpO1xuICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLm1hcmtlckxheWVyKTtcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5idWZmZXJMYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25maWdCdWZmZXJMYXllcigpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBMYXllciA9IEwubGF5ZXJHcm91cCgpO1xuICAgICAgICB0aGlzLm1hcmtlcnMuZm9yRWFjaCgobWFya2VyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaXJjbGVMYXllciA9IEwuY2lyY2xlKG1hcmtlci5nZXRMYXRMbmcoKSwgdGhpcy5vcHRpb25zLmJ1ZmZlck9wdGlvbnMpO1xuICAgICAgICAgICAgY2lyY2xlTGF5ZXIuYmluZFRvb2x0aXAoJycgKyBtYXJrZXIuZ2V0RGF0YSgpW3RoaXMub3B0aW9ucy5idWZmZXJUb29sdGlwQXR0cl0pO1xuICAgICAgICAgICAgZ3JvdXBMYXllci5hZGRMYXllcihjaXJjbGVMYXllcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ3JvdXBMYXllcjtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvbWFya2VyL01hcmtlcnNMYXllci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL21hcmtlci9NYXJrZXJzTGF5ZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNYXJrZXJzTGF5ZXI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWFya2VyICovIFwiLi9zcmMvbWFya2VyL01hcmtlci50c1wiKTtcblxuY2xhc3MgTWFya2Vyc0xheWVyIHtcbiAgICBjb25zdHJ1Y3RvcihtYXAsIGRhdGFMaXN0LCBvcHRpb25zLCBjaGFubmVsRnVuYykge1xuICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJlbmRlclR5cGU6ICdwb2ludCcsXG4gICAgICAgICAgICByZW5kZXJQb2ludENvbG9yVHlwZTogJ3NpbmdsZScsXG4gICAgICAgICAgICBpY29uVHlwZTogJ3VuaWNvZGUnLFxuICAgICAgICAgICAgaWNvblNpemU6IFsyMCwgMjBdLFxuICAgICAgICAgICAgaWNvbkNsYXNzOiAnaWNvbmZvbnQnLFxuICAgICAgICAgICAgaWNvbkNvbG9yOiAnIzMzODhGRicsXG4gICAgICAgICAgICBpY29uQW5jaG9yOiBbMTAsIDEwXSxcbiAgICAgICAgICAgIHNlZ21lbnRlZENvbG9yczogWycjMzM4OEZGJ10sXG4gICAgICAgICAgICBoZWF0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIG1heDogMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHlwZSA9ICdtYXJrZXInO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5kYXRhTGlzdCA9IGRhdGFMaXN0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMgPSBjaGFubmVsRnVuYztcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXllciA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNlZE1hcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuaG92ZXJlZE1hcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIgPSBudWxsO1xuICAgICAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5tYXJrZXJMYXllciA9IG51bGw7XG4gICAgICAgIHRoaXMuaGVhdExheWVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbHVzdGVyTGF5ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZE1pbiA9IEluZmluaXR5O1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSAxO1xuICAgICAgICAvLyDnvJPlrZggc2VnbWVudCDnm7jlhbPmlbDmja5cbiAgICAgICAgdGhpcy5jYWNoZVNlZ21lbnRQYXJhbXMoKTtcbiAgICAgICAgdGhpcy5pbml0TWFya2VycygpO1xuICAgIH1cbiAgICBkcmF3KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcmVkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLnJlbmRlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3BvaW50Jzoge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ01hcmtlckxheWVyKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdjbHVzdGVyJzoge1xuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ0NsdXN0ZXJMYXllcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaGVhdCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyID0gdGhpcy5jb25maWdIZWF0TGF5ZXIoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHJlbmRlclR5cGUg5LiN5pSv5oyBXCIke3RoaXMub3B0aW9ucy5yZW5kZXJUeXBlfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRPcHRpb25zKG9wdGlvbnMsIHJlZHJhdyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHJlZHJhdykge1xuICAgICAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXRCb3VuZHMoKSB7XG4gICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyh0aGlzLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzKCkge1xuICAgICAgICBpZiAodGhpcy5tYXJrZXJzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2Vycy5tYXAoKG1hcmtlcikgPT4gW21hcmtlci5nZXRMYXRMbmcoKS5sYXQsIG1hcmtlci5nZXRMYXRMbmcoKS5sbmddKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgLy8gVE9ETzog5bCG5LqL5Lu256e76ZmkXG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvZ2dsZVZpc2libGUodmlzaWJsZSkge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VDb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuaWNvbkNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIGNoYW5nZUljb24oaWNvblVuaWNvZGUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmljb25Vbmljb2RlID0gaWNvblVuaWNvZGU7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIC8qKiDmuLLmn5PkuLrmlaPngrnlm74gKi9cbiAgICBjb25maWdNYXJrZXJMYXllcigpIHtcbiAgICAgICAgY29uc3QgY2FudmFzSWNvbkxheWVyID0gTC5jYW52YXNJY29uTGF5ZXIoe30pLmFkZFRvKHRoaXMubWFwKTtcbiAgICAgICAgLy8g5re75Yqg54K55Ye75LqL5Lu2XG4gICAgICAgIGNhbnZhc0ljb25MYXllci5hZGRPbkNsaWNrTGlzdGVuZXIoKF8sIFt7IGRhdGE6IG1hcmtlciB9XSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5tYXJrZXJDbGlja0hhbmRsZXIobWFya2VyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOa3u+WKoCBob3ZlciDkuovku7ZcbiAgICAgICAgY2FudmFzSWNvbkxheWVyLmFkZE9uSG92ZXJMaXN0ZW5lcigoXywgW3sgZGF0YTogbWFya2VyIH1dKSA9PiB7XG4gICAgICAgICAgICAvLyDkuYvliY3mnIkgaG92ZXIg55qE5YWz6ZetIHRvb2x0aXBcbiAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWRNYXJrZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyZWRNYXJrZXIuY2xvc2VUb29sdGlwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvdmVyZWRNYXJrZXIgPSBtYXJrZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmVkTWFya2VyLmdldFRvb2x0aXAoKSkge1xuICAgICAgICAgICAgICAgIC8vIOWmguaenOW3sue7j+iuvue9riB0b29sdGlwIOebtOaOpeWxleekuiB0b29sdGlwXG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkTWFya2VyLm9wZW5Ub29sdGlwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDlkKbliJnnu5HlrpogdG9vbHRpcCDlubblsZXnpLpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJlZE1hcmtlci5iaW5kVG9vbHRpcCgnJyArIHRoaXMuaG92ZXJlZE1hcmtlci5nZXREYXRhKClbdGhpcy5vcHRpb25zLnRvb2x0aXBBdHRyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzSWNvbkxheWVyLmFkZE1hcmtlcnModGhpcy5tYXJrZXJzKTtcbiAgICAgICAgdGhpcy5tYXAub24oJ3pvb21zdGFydCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyID09PSB0aGlzLm1hcmtlckxheWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcC5vbignem9vbWVuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxheWVyID09PSB0aGlzLm1hcmtlckxheWVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5tYXJrZXJMYXllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyDop6PlhrPliJ3mrKHmuLLmn5PkuI3lh7rlm77moIfpl67pophcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1hcC5wYW5Ubyh0aGlzLm1hcC5nZXRDZW50ZXIoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hcmtlckxheWVyID0gY2FudmFzSWNvbkxheWVyO1xuICAgICAgICByZXR1cm4gdGhpcy5tYXJrZXJMYXllcjtcbiAgICB9XG4gICAgZ2V0VG9vbFRpcENvbnRlbnQoZGF0YSkge1xuICAgICAgICByZXR1cm4gJycgKyBkYXRhW3RoaXMub3B0aW9ucy50b29sdGlwQXR0cl07XG4gICAgfVxuICAgIGluaXRNYXJrZXJzKCkge1xuICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gTC5nZW9KU09OKGRhdGEuZ2VvbWV0cnkpLmdldExheWVycygpWzBdO1xuICAgICAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IF9NYXJrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0oW1xuICAgICAgICAgICAgICAgIGxheWVyLmdldExhdExuZygpLmxhdCxcbiAgICAgICAgICAgICAgICBsYXllci5nZXRMYXRMbmcoKS5sbmcsXG4gICAgICAgICAgICBdLCB7XG4gICAgICAgICAgICAgICAgaWNvbjogdGhpcy5nZXRNYXJrZXJJY29uKGRhdGEpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyDlsIbnm7jlhbPlgLznu5HlrprliLAgbWFya2Vy5LiKXG4gICAgICAgICAgICBtYXJrZXIuc2V0RGF0YShkYXRhKTtcbiAgICAgICAgICAgIHRoaXMubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyDlpITnkIYgbWFya2VyIOeCueWHu+S6i+S7tlxuICAgIG1hcmtlckNsaWNrSGFuZGxlcihtYXJrZXIpIHtcbiAgICAgICAgdGhpcy5mb2N1c2VkTWFya2VyID0gbWFya2VyO1xuICAgICAgICAvLyDliKDpmaTliY3kuIDkuKrmlL7lpKflm77moIdcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIucmVtb3ZlRnJvbSh0aGlzLm1hcCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g55Sf5oiQ5b2T5YmN5pS+5aSn5Zu+5qCHXG4gICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIgPSBuZXcgX01hcmtlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXShtYXJrZXIuZ2V0TGF0TG5nKCksIHtcbiAgICAgICAgICAgIGljb246IHRoaXMuZ2V0TGFyZ2VyTWFya2VySWNvbihtYXJrZXIuZ2V0RGF0YSgpKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZm9jdXNlZERpc3BsYXlNYXJrZXIuYWRkVG8odGhpcy5tYXApO1xuICAgICAgICB0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyXG4gICAgICAgICAgICAuYmluZFBvcHVwKHRoaXMuZ2V0UG9wdXBDb250ZW50KG1hcmtlci5nZXREYXRhKCkpKVxuICAgICAgICAgICAgLm9wZW5Qb3B1cCgpO1xuICAgICAgICB0aGlzLmZvY3VzZWREaXNwbGF5TWFya2VyLm9uKCdwb3B1cGNsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mb2N1c2VkRGlzcGxheU1hcmtlci5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWFwLnBhblRvKHRoaXMuZm9jdXNlZE1hcmtlci5nZXRMYXRMbmcoKSk7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMoJ29uLWNsaWNrLW1hcmtlcicsIG1hcmtlcik7XG4gICAgfVxuICAgIGNvbmZpZ0NsdXN0ZXJMYXllcigpIHtcbiAgICAgICAgLy8g5bGV56S66IGa5ZCI5Zu+5bGCXG4gICAgICAgIHRoaXMuY2x1c3RlckxheWVyID0gTC5tYXJrZXJDbHVzdGVyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5jbHVzdGVyTGF5ZXIuYWRkTGF5ZXJzKHRoaXMubWFya2Vycy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBfTWFya2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKG0uZ2V0TGF0TG5nKCksIHtcbiAgICAgICAgICAgICAgICBpY29uOiB0aGlzLmdldE1hcmtlckljb24obS5nZXREYXRhKCkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXIuc2V0RGF0YShtLmdldERhdGEoKSk7XG4gICAgICAgICAgICBtYXJrZXIuYmluZFRvb2x0aXAoJycgKyBtYXJrZXIuZ2V0RGF0YSgpW3RoaXMub3B0aW9ucy50b29sdGlwQXR0cl0pO1xuICAgICAgICAgICAgbWFya2VyLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlckNsaWNrSGFuZGxlcihtYXJrZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNsdXN0ZXJMYXllcjtcbiAgICB9XG4gICAgLyoqIOa4suafk+S4uueDreWKm+WbviAqL1xuICAgIGNvbmZpZ0hlYXRMYXllcigpIHtcbiAgICAgICAgdGhpcy5tYXJrZXJzLmZvckVhY2goKG1hcmtlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGF0TG5nID0gbWFya2VyLmdldExhdExuZygpO1xuICAgICAgICAgICAgY29uc3QgZGltZW5zaW9uQXR0ciA9IHRoaXMub3B0aW9ucy5oZWF0T3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuaGVhdE9wdGlvbnMuZGltZW5zaW9uQXR0cjtcbiAgICAgICAgICAgIGxldCBhbHQgPSBtYXJrZXIuZ2V0RGF0YSgpW2RpbWVuc2lvbkF0dHJdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbHQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgYWx0ID0gdGhpcy5vcHRpb25zLmhlYXRPcHRpb25zLm1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcmtlci5zZXRMYXRMbmcoTC5sYXRMbmcobGF0TG5nLmxhdCwgbGF0TG5nLmxuZywgYWx0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmhlYXRMYXllciA9IEwuaGVhdExheWVyKHRoaXMubWFya2Vycy5tYXAoKGl0KSA9PiBpdC5nZXRMYXRMbmcoKSksIHRoaXMub3B0aW9ucy5oZWF0T3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYXRMYXllcjtcbiAgICB9XG4gICAgZ2V0TGFyZ2VyTWFya2VySWNvbihkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNYXJrZXJJY29uKGRhdGEsIHRydWUpO1xuICAgIH1cbiAgICBnZXRNYXJrZXJJY29uKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1hcmtlckljb24oZGF0YSwgZmFsc2UpO1xuICAgIH1cbiAgICAvKiog6I635Y+W5b2T5YmNIG1hcmtlciDpnIDopoHlsZXnpLrnmoQgaWNvbiAqL1xuICAgIF9nZXRNYXJrZXJJY29uKGRhdGEsIGlzTGFyZ2VyKSB7XG4gICAgICAgIGxldCBpY29uU2l6ZSA9IHRoaXMub3B0aW9ucy5pY29uU2l6ZTtcbiAgICAgICAgbGV0IGljb25BbmNob3IgPSB0aGlzLm9wdGlvbnMuaWNvbkFuY2hvcjtcbiAgICAgICAgaWNvblNpemUgPSBpc0xhcmdlciA/IFtpY29uU2l6ZVswXSAqIDEuNSwgaWNvblNpemVbMV0gKiAxLjVdIDogaWNvblNpemU7XG4gICAgICAgIGljb25BbmNob3IgPSBpc0xhcmdlclxuICAgICAgICAgICAgPyBbaWNvbkFuY2hvclswXSAqIDEuNSwgaWNvbkFuY2hvclsxXSAqIDEuNV1cbiAgICAgICAgICAgIDogaWNvbkFuY2hvcjtcbiAgICAgICAgY29uc3QgaWNvbkNvbG9yID0gdGhpcy5vcHRpb25zLmljb25Db2xvcjtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMuaWNvblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzoge1xuICAgICAgICAgICAgICAgIHJldHVybiBMLmljb24oe1xuICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiB0aGlzLm9wdGlvbnMuaWNvbkltYWdlVXJsLFxuICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkFuY2hvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2ZvbnRfY2xhc3MnOlxuICAgICAgICAgICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgICAgICAgIGNhc2UgJ3VuaWNvZGUnOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEwuZGl2SWNvbih7XG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IHRoaXMuZ2V0Q3VzdG9tSWNvbkhUTUwoZGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGlzTGFyZ2VyID8gJ2xhcmdlLWRpdi1pY29uLW1hcmtlcicgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemUsXG4gICAgICAgICAgICAgICAgICAgIGljb25BbmNob3IsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDlm77moIfnsbvlnovkuI3mlK/mjIFcIiR7dGhpcy5vcHRpb25zLmljb25UeXBlfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0Q3VzdG9tSWNvbkhUTUwoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmljb25SZW5kZXJlcikge1xuICAgICAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmljb25SZW5kZXJlcihkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5yZW5kZXJQb2ludENvbG9yVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2luZ2xlJzoge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmljb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250X2NsYXNzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGkgY2xhc3M9XCIke3RoaXMub3B0aW9ucy5pY29uQ2xhc3N9XCJcbiAgICAgICAgICAgICAgICBzdHlsZT1cIlxuICAgICAgICAgICAgICAgICAgY29sb3I6ICR7b3B0aW9ucy5pY29uQ29sb3J9O1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAke29wdGlvbnMuaWNvblNpemVbMF19cHg7XG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDkvb/nlKggc3ZnXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N5bWJvbCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJpY29uLXN5bWJvbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgICAgIDx1c2UgeGxpbms6aHJlZj1cIiR7dGhpcy5vcHRpb25zLmljb25TeW1ib2x9XCIgLz5cbiAgICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCB1bmljb2RlXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VuaWNvZGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgIGNsYXNzPVwiJHt0aGlzLm9wdGlvbnMuaWNvbkNsYXNzfVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9XCJcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAke29wdGlvbnMuaWNvbkNvbG9yfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICR7dGhpcy5vcHRpb25zLmljb25Vbmljb2RlfVxuICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnc2VnbWVudGVkJzoge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vcHRpb25zLmljb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOS9v+eUqCBjbGFzc1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmb250X2NsYXNzJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICBjbGFzcz1cIiR7dGhpcy5vcHRpb25zLmljb25DbGFzc31cIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGlzLmdldFNlZ21lbnRlZE1hcmtlckNvbG9yKGRhdGEpfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8g5L2/55SoIHN2Z1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzeW1ib2wnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxuICAgICAgICAgICAgICA8c3ZnIGNsYXNzPVwiaWNvbi1zeW1ib2xcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgICAgICAgICA8dXNlIHhsaW5rOmhyZWY9XCIke3RoaXMub3B0aW9ucy5pY29uU3ltYm9sfVwiIC8+XG4gICAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDkvb/nlKggdW5pY29kZVxuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmljb2RlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICBjbGFzcz1cIiR7dGhpcy5vcHRpb25zLmljb25DbGFzc31cIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwiXG4gICAgICAgICAgICAgICAgICBjb2xvcjogJHt0aGlzLmdldFNlZ21lbnRlZE1hcmtlckNvbG9yKGRhdGEpfTtcbiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmljb25TaXplWzBdfXB4O1xuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICR7dGhpcy5vcHRpb25zLmljb25Vbmljb2RlfVxuICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVuZGVyUG9pbnRDb2xvclR5cGUg5LiN5pSv5oyBXCIke3RoaXMub3B0aW9ucy5yZW5kZXJQb2ludENvbG9yVHlwZX1cImApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhY2hlU2VnbWVudFBhcmFtcygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudGVkTGVuZ3RoID0gdGhpcy5vcHRpb25zLnNlZ21lbnRlZENvbG9ycy5sZW5ndGg7XG4gICAgICAgIGxldCBtYXhWYWwgPSAtSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5WYWwgPSBJbmZpbml0eTtcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuZGF0YUxpc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICAgICAgbWF4VmFsID0gTWF0aC5tYXgobWF4VmFsLCB2YWwpO1xuICAgICAgICAgICAgbWluVmFsID0gTWF0aC5taW4obWluVmFsLCB2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAobWF4VmFsIC0gbWluVmFsICsgMSkgLyBzZWdtZW50ZWRMZW5ndGg7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkTWluID0gbWluVmFsO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSBzdGVwO1xuICAgIH1cbiAgICBnZXRTZWdtZW50ZWRNYXJrZXJDb2xvcihkYXRhKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMub3B0aW9ucy5zZWdtZW50ZWRDb2xvcnNbKHZhbCAtIHRoaXMuc2VnbWVudGVkTWluKSAvIHRoaXMuc2VnbWVudGVkU3RlcF07XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG4gICAgZ2V0UG9wdXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMucG9wdXBBdHRyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke3RoaXMub3B0aW9ucy5wb3B1cEF0dHJ9OiAke2RhdGFbdGhpcy5vcHRpb25zLnBvcHVwQXR0cl19YDtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvcG9seWdvbi9Qb2x5Z29uLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wb2x5Z29uL1BvbHlnb24udHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbHlnb247IH0pO1xuY2xhc3MgUG9seWdvbiBleHRlbmRzIEwuUG9seWdvbiB7XG4gICAgY29uc3RydWN0b3IobGF0bG5ncywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihsYXRsbmdzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc2V0RGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX19kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhO1xuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9wb2x5Z29uL1BvbHlnb25zTGF5ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BvbHlnb24vUG9seWdvbnNMYXllci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUG9seWdvbnNMYXllcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BvbHlnb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUG9seWdvbiAqLyBcIi4vc3JjL3BvbHlnb24vUG9seWdvbi50c1wiKTtcblxuY2xhc3MgUG9seWdvbnNMYXllciB7XG4gICAgY29uc3RydWN0b3IobWFwLCBkYXRhTGlzdCwgb3B0aW9ucywgY2hhbm5lbEZ1bmMpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBjb2xvcjogJyMzMzg4RkYnLFxuICAgICAgICAgICAgcmVuZGVyUG9seWdvbkNvbG9yVHlwZTogJ3NpbmdsZScsXG4gICAgICAgICAgICBzZWdtZW50ZWRDb2xvcnM6IFsnIzMzODhGRiddLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnR5cGUgPSAncG9seWdvbic7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmRhdGFMaXN0ID0gZGF0YUxpc3Q7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMgPSBjaGFubmVsRnVuYztcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wb2x5Z29ucyA9IFtdO1xuICAgICAgICB0aGlzLnNlZ21lbnRlZE1pbiA9IEluZmluaXR5O1xuICAgICAgICB0aGlzLnNlZ21lbnRlZFN0ZXAgPSAxO1xuICAgICAgICAvLyB0aGlzLmZvY3VzZWRQb2x5Z29uID0gbnVsbFxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIC8vIOe8k+WtmCBzZWdtZW50IOebuOWFs+aVsOaNrlxuICAgICAgICB0aGlzLmNhY2hlU2VnbWVudFBhcmFtcygpO1xuICAgICAgICB0aGlzLmluaXRQb2x5Z29ucygpO1xuICAgIH1cbiAgICBkcmF3KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcmVkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ1BvbHlnb25MYXllcigpO1xuICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZpdEJvdW5kcygpIHtcbiAgICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKHRoaXMuZ2V0Qm91bmRzKCkpO1xuICAgIH1cbiAgICBnZXRCb3VuZHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnBvbHlnb25zLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucG9seWdvbnMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2LmV4dGVuZChjdXJyLmdldEJvdW5kcygpKSwgdGhpcy5wb2x5Z29uc1swXS5nZXRCb3VuZHMoKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvZ2dsZVZpc2libGUodmlzaWJsZSkge1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VDb2xvcihjb2xvcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuZmlsbENvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuICAgIGdldFRvb2xUaXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuICcnICsgZGF0YVt0aGlzLm9wdGlvbnMudG9vbHRpcEF0dHJdO1xuICAgIH1cbiAgICBpbml0UG9seWdvbnMoKSB7XG4gICAgICAgIHRoaXMuZGF0YUxpc3QuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlZ21lbnRQYXJhbXMoKTtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gTC5nZW9KU09OKGRhdGEuZ2VvbWV0cnkpLmdldExheWVycygpWzBdO1xuICAgICAgICAgICAgY29uc3QgcG9seWdvbiA9IG5ldyBfUG9seWdvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXShsYXllci5nZXRMYXRMbmdzKCkpO1xuICAgICAgICAgICAgLy8g5bCG55u45YWz5YC857uR5a6a5YiwIG1hcmtlcuS4ilxuICAgICAgICAgICAgcG9seWdvbi5zZXREYXRhKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5wb2x5Z29ucy5wdXNoKHBvbHlnb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uZmlnUG9seWdvbkxheWVyKCkge1xuICAgICAgICB0aGlzLnBvbHlnb25MYXllciA9IEwubGF5ZXJHcm91cCgpO1xuICAgICAgICB0aGlzLnBvbHlnb25zLmZvckVhY2goKHBvbHlnb24pID0+IHtcbiAgICAgICAgICAgIHBvbHlnb24ub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucG9seWdvbkNsaWNrSGFuZGxlcihwb2x5Z29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGZpbGxDb2xvciA9IHRoaXMub3B0aW9ucy5maWxsQ29sb3I7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlbmRlclBvbHlnb25Db2xvclR5cGUgPT09ICdzZWdtZW50ZWQnKSB7XG4gICAgICAgICAgICAgICAgZmlsbENvbG9yID0gdGhpcy5nZXRTZWdtZW50ZWRQb2x5Z29uQ29sb3IocG9seWdvbi5nZXREYXRhKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgICAgIGZpbGxDb2xvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgbmV3UG9seWdvbiA9IG5ldyBfUG9seWdvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXShwb2x5Z29uLmdldExhdExuZ3MoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnBvbHlnb25MYXllci5hZGRMYXllcihuZXdQb2x5Z29uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlnb25MYXllcjtcbiAgICB9XG4gICAgcG9seWdvbkNsaWNrSGFuZGxlcihwb2x5Z29uKSB7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlnb24gPSBwb2x5Z29uXG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMoJ29uLWNsaWNrLXBvbHlnb24nLCBwb2x5Z29uKTtcbiAgICB9XG4gICAgY2FjaGVTZWdtZW50UGFyYW1zKCkge1xuICAgICAgICBjb25zdCBzZWdtZW50ZWRMZW5ndGggPSB0aGlzLm9wdGlvbnMuc2VnbWVudGVkQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgbGV0IG1heFZhbCA9IC1JbmZpbml0eTtcbiAgICAgICAgbGV0IG1pblZhbCA9IEluZmluaXR5O1xuICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgdGhpcy5kYXRhTGlzdCkge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZGF0YVt0aGlzLm9wdGlvbnMuc2VnbWVudGVkQXR0cl07XG4gICAgICAgICAgICBtYXhWYWwgPSBNYXRoLm1heChtYXhWYWwsIHZhbCk7XG4gICAgICAgICAgICBtaW5WYWwgPSBNYXRoLm1pbihtaW5WYWwsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RlcCA9IChtYXhWYWwgLSBtaW5WYWwgKyAxKSAvIHNlZ21lbnRlZExlbmd0aDtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRNaW4gPSBtaW5WYWw7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkU3RlcCA9IHN0ZXA7XG4gICAgfVxuICAgIGdldFNlZ21lbnRlZFBvbHlnb25Db2xvcihkYXRhKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGRhdGFbdGhpcy5vcHRpb25zLnNlZ21lbnRlZEF0dHJdO1xuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMub3B0aW9ucy5zZWdtZW50ZWRDb2xvcnNbKHZhbCAtIHRoaXMuc2VnbWVudGVkTWluKSAvIHRoaXMuc2VnbWVudGVkU3RlcF07XG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvcG9seWxpbmUvUG9seWxpbmUudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcG9seWxpbmUvUG9seWxpbmUudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogZGVmYXVsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUG9seWxpbmU7IH0pO1xuY2xhc3MgUG9seWxpbmUgZXh0ZW5kcyBMLlBvbHlsaW5lIHtcbiAgICBjb25zdHJ1Y3RvcihsYXRsbmdzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGxhdGxuZ3MsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzZXREYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBnZXREYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGE7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lc0J1ZmZlckxheWVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lc0J1ZmZlckxheWVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbHlsaW5lc0J1ZmZlckxheWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUG9seWxpbmVzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUG9seWxpbmVzTGF5ZXIgKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZXNMYXllci50c1wiKTtcblxuY2xhc3MgUG9seWxpbmVzQnVmZmVyTGF5ZXIgZXh0ZW5kcyBfUG9seWxpbmVzTGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0ge1xuICAgIGNvbnN0cnVjdG9yKG1hcCwgZGF0YUxpc3QsIG9wdGlvbnMsIGNoYW5uZWxGdW5jKSB7XG4gICAgICAgIHN1cGVyKG1hcCwgZGF0YUxpc3QsIG9wdGlvbnMsIGNoYW5uZWxGdW5jKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICByZW5kZXJQb2x5bGluZUNvbG9yVHlwZTogJ3NpbmdsZScsXG4gICAgICAgICAgICBzZWdtZW50ZWRDb2xvcnM6IFsnIzMzODhGRiddLFxuICAgICAgICAgICAgY29ycmlkb3I6IDEwMCxcbiAgICAgICAgICAgIGNvbG9yOiAnIzMzODhGRicsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjUsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHlwZSA9ICdwb2x5bGluZUJ1ZmZlcic7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmRhdGFMaXN0ID0gZGF0YUxpc3Q7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMgPSBjaGFubmVsRnVuYztcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRNaW4gPSBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRTdGVwID0gMTtcbiAgICAgICAgLy8gdGhpcy5mb2N1c2VkUG9seWxpbmUgPSBudWxsXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5pbml0UG9seWxpbmVzKCk7XG4gICAgfVxuICAgIGRyYXcob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICByZWRyYXcoKSB7XG4gICAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXllciA9IHRoaXMuY29uZmlnUG9seWxpbmVCdWZmZXJMYXllcigpO1xuICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih0aGlzLmxheWVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGZpdEJvdW5kcygpIHtcbiAgICAgICAgdGhpcy5tYXAuZml0Qm91bmRzKHRoaXMuZ2V0Qm91bmRzKCkpO1xuICAgIH1cbiAgICBnZXRCb3VuZHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnBvbHlsaW5lcy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldEJvdW5kcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlsaW5lcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHByZXYuZXh0ZW5kKGN1cnIuZ2V0Qm91bmRzKCkpLCB0aGlzLnBvbHlsaW5lc1swXS5nZXRCb3VuZHMoKSk7XG4gICAgfVxuICAgIGNoYW5nZUNvbG9yKGNvbG9yKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICBjb25maWdQb2x5bGluZUJ1ZmZlckxheWVyKCkge1xuICAgICAgICB0aGlzLnBvbHlsaW5lTGF5ZXIgPSBMLmxheWVyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMuZm9yRWFjaCgocG9seWxpbmUpID0+IHtcbiAgICAgICAgICAgIHBvbHlsaW5lLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvbHlsaW5lQ2xpY2tIYW5kbGVyKHBvbHlsaW5lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLm9wdGlvbnMucmVuZGVyUG9seWxpbmVDb2xvclR5cGUgPT09ICdzaW5nbGUnXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcHRpb25zLmNvbG9yXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5nZXRTZWdtZW50ZWRQb2x5bGluZUNvbG9yKHBvbHlsaW5lLmdldERhdGEoKSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHBvbHlsaW5lQnVmZmVyID0gTC5jb3JyaWRvcihwb2x5bGluZS5nZXRMYXRMbmdzKCkubWFwKChsYXRMbmcpID0+IEwubGF0TG5nKFtsYXRMbmcubG5nLCBsYXRMbmcubGF0XSkpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG9vbHRpcEF0dHIpIHtcbiAgICAgICAgICAgICAgICBwb2x5bGluZUJ1ZmZlci5iaW5kVG9vbHRpcCh0aGlzLmdldFRvb2xUaXBDb250ZW50KHBvbHlsaW5lLmdldERhdGEoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb2x5bGluZUxheWVyLmFkZExheWVyKHBvbHlsaW5lQnVmZmVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlsaW5lTGF5ZXI7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lc0xheWVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BvbHlsaW5lL1BvbHlsaW5lc0xheWVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IGRlZmF1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZGVmYXVsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbHlsaW5lc0xheWVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUG9seWxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUG9seWxpbmUgKi8gXCIuL3NyYy9wb2x5bGluZS9Qb2x5bGluZS50c1wiKTtcblxuY2xhc3MgUG9seWxpbmVzTGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKG1hcCwgZGF0YUxpc3QsIG9wdGlvbnMsIGNoYW5uZWxGdW5jKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAgICAgY29sb3I6ICcjMzM4OEZGJyxcbiAgICAgICAgICAgIHJlbmRlclBvbHlsaW5lQ29sb3JUeXBlOiAnc2luZ2xlJyxcbiAgICAgICAgICAgIHNlZ21lbnRlZENvbG9yczogWycjMzM4OEZGJ10sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudHlwZSA9ICdwb2x5bGluZSc7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmRhdGFMaXN0ID0gZGF0YUxpc3Q7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY2hhbm5lbEZ1bmMgPSBjaGFubmVsRnVuYztcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRNaW4gPSBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRTdGVwID0gMTtcbiAgICAgICAgLy8gdGhpcy5mb2N1c2VkUG9seWxpbmUgPSBudWxsXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgLy8g57yT5a2YIHNlZ21lbnQg55u45YWz5pWw5o2uXG4gICAgICAgIHRoaXMuY2FjaGVTZWdtZW50UGFyYW1zKCk7XG4gICAgICAgIHRoaXMuaW5pdFBvbHlsaW5lcygpO1xuICAgIH1cbiAgICBkcmF3KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTtcbiAgICB9XG4gICAgcmVkcmF3KCkge1xuICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGF5ZXIgPSB0aGlzLmNvbmZpZ1BvbHlsaW5lTGF5ZXIoKTtcbiAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBmaXRCb3VuZHMoKSB7XG4gICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyh0aGlzLmdldEJvdW5kcygpKTtcbiAgICB9XG4gICAgZ2V0Qm91bmRzKCkge1xuICAgICAgICBpZiAodGhpcy5wb2x5bGluZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wb2x5bGluZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2LmV4dGVuZChjdXJyLmdldEJvdW5kcygpKSwgdGhpcy5wb2x5bGluZXNbMF0uZ2V0Qm91bmRzKCkpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5sYXllcikge1xuICAgICAgICAgICAgdGhpcy5sYXllci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2dnbGVWaXNpYmxlKHZpc2libGUpIHtcbiAgICAgICAgdGhpcy52aXNpYmxlID0gdmlzaWJsZTtcbiAgICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZExheWVyKHRoaXMubGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy5sYXllcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhbmdlQ29sb3IoY29sb3IpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmZpbGxDb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgIH1cbiAgICBpbml0UG9seWxpbmVzKCkge1xuICAgICAgICB0aGlzLmRhdGFMaXN0LmZvckVhY2goKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZWdtZW50UGFyYW1zKCk7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IEwuZ2VvSlNPTihkYXRhLmdlb21ldHJ5KS5nZXRMYXllcnMoKVswXTtcbiAgICAgICAgICAgIGxldCBmaWxsQ29sb3IgPSB0aGlzLm9wdGlvbnMuZmlsbENvbG9yO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW5kZXJQb2x5bGluZUNvbG9yVHlwZSA9PT0gJ3NlZ21lbnRlZCcpIHtcbiAgICAgICAgICAgICAgICBmaWxsQ29sb3IgPSB0aGlzLmdldFNlZ21lbnRlZFBvbHlsaW5lQ29sb3IoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwb2x5bGluZSA9IG5ldyBfUG9seWxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcImRlZmF1bHRcIl0obGF5ZXIuZ2V0TGF0TG5ncygpLCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHsgZmlsbENvbG9yIH0pKTtcbiAgICAgICAgICAgIC8vIOWwhuebuOWFs+WAvOe7keWumuWIsCBtYXJrZXLkuIpcbiAgICAgICAgICAgIHBvbHlsaW5lLnNldERhdGEoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnBvbHlsaW5lcy5wdXNoKHBvbHlsaW5lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldFNlZ21lbnRlZFBvbHlsaW5lQ29sb3IoZGF0YSkge1xuICAgICAgICBjb25zdCB2YWwgPSBkYXRhW3RoaXMub3B0aW9ucy5zZWdtZW50ZWRBdHRyXTtcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLm9wdGlvbnMuc2VnbWVudGVkQ29sb3JzWyh2YWwgLSB0aGlzLnNlZ21lbnRlZE1pbikgLyB0aGlzLnNlZ21lbnRlZFN0ZXBdO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHBvbHlsaW5lQ2xpY2tIYW5kbGVyKHBvbHlsaW5lKSB7XG4gICAgICAgIC8vIHRoaXMuZm9jdXNlZFBvbHlsaW5lID0gcG9seWxpbmVcbiAgICAgICAgdGhpcy5jaGFubmVsRnVuYygnb24tY2xpY2stcG9seWxpbmUnLCBwb2x5bGluZSk7XG4gICAgfVxuICAgIGdldFRvb2xUaXBDb250ZW50KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuICcnICsgZGF0YVt0aGlzLm9wdGlvbnMudG9vbHRpcEF0dHJdO1xuICAgIH1cbiAgICBjb25maWdQb2x5bGluZUxheWVyKCkge1xuICAgICAgICB0aGlzLnBvbHlsaW5lTGF5ZXIgPSBMLmxheWVyR3JvdXAoKTtcbiAgICAgICAgdGhpcy5wb2x5bGluZXMuZm9yRWFjaCgocG9seWxpbmUpID0+IHtcbiAgICAgICAgICAgIHBvbHlsaW5lLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvbHlsaW5lQ2xpY2tIYW5kbGVyKHBvbHlsaW5lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmdldFNlZ21lbnRlZFBvbHlsaW5lQ29sb3IocG9seWxpbmUuZ2V0RGF0YSgpKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgbmV3UG9seWxpbmUgPSBuZXcgX1BvbHlsaW5lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJkZWZhdWx0XCJdKHBvbHlsaW5lLmdldExhdExuZ3MoKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnBvbHlsaW5lTGF5ZXIuYWRkTGF5ZXIobmV3UG9seWxpbmUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9seWxpbmVMYXllcjtcbiAgICB9XG4gICAgY2FjaGVTZWdtZW50UGFyYW1zKCkge1xuICAgICAgICBjb25zdCBzZWdtZW50ZWRMZW5ndGggPSB0aGlzLm9wdGlvbnMuc2VnbWVudGVkQ29sb3JzLmxlbmd0aDtcbiAgICAgICAgbGV0IG1heFZhbCA9IC1JbmZpbml0eTtcbiAgICAgICAgbGV0IG1pblZhbCA9IEluZmluaXR5O1xuICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgdGhpcy5kYXRhTGlzdCkge1xuICAgICAgICAgICAgY29uc3QgdmFsID0gZGF0YVt0aGlzLm9wdGlvbnMuc2VnbWVudGVkQXR0cl07XG4gICAgICAgICAgICBtYXhWYWwgPSBNYXRoLm1heChtYXhWYWwsIHZhbCk7XG4gICAgICAgICAgICBtaW5WYWwgPSBNYXRoLm1pbihtaW5WYWwsIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RlcCA9IChtYXhWYWwgLSBtaW5WYWwgKyAxKSAvIHNlZ21lbnRlZExlbmd0aDtcbiAgICAgICAgdGhpcy5zZWdtZW50ZWRNaW4gPSBtaW5WYWw7XG4gICAgICAgIHRoaXMuc2VnbWVudGVkU3RlcCA9IHN0ZXA7XG4gICAgfVxufVxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlzWldGbWJHVjBUV0Z3TDNkbFluQmhZMnN2ZFc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaUlzSW5kbFluQmhZMnM2THk5c1pXRm1iR1YwVFdGd0wzZGxZbkJoWTJzdlltOXZkSE4wY21Gd0lpd2lkMlZpY0dGamF6b3ZMMnhsWVdac1pYUk5ZWEF2TGk5emNtTXZhVzVrWlhndWRITWlMQ0ozWldKd1lXTnJPaTh2YkdWaFpteGxkRTFoY0M4dUwzTnlZeTl0WVhKclpYSXZUV0Z5YTJWeUxuUnpJaXdpZDJWaWNHRmphem92TDJ4bFlXWnNaWFJOWVhBdkxpOXpjbU12YldGeWEyVnlMMDFoY210bGNuTkNkV1ptWlhKTVlYbGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OXNaV0ZtYkdWMFRXRndMeTR2YzNKakwyMWhjbXRsY2k5TllYSnJaWEp6VEdGNVpYSXVkSE1pTENKM1pXSndZV05yT2k4dmJHVmhabXhsZEUxaGNDOHVMM055WXk5d2IyeDVaMjl1TDFCdmJIbG5iMjR1ZEhNaUxDSjNaV0p3WVdOck9pOHZiR1ZoWm14bGRFMWhjQzh1TDNOeVl5OXdiMng1WjI5dUwxQnZiSGxuYjI1elRHRjVaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZiR1ZoWm14bGRFMWhjQzh1TDNOeVl5OXdiMng1YkdsdVpTOVFiMng1YkdsdVpTNTBjeUlzSW5kbFluQmhZMnM2THk5c1pXRm1iR1YwVFdGd0x5NHZjM0pqTDNCdmJIbHNhVzVsTDFCdmJIbHNhVzVsYzBKMVptWmxja3hoZVdWeUxuUnpJaXdpZDJWaWNHRmphem92TDJ4bFlXWnNaWFJOWVhBdkxpOXpjbU12Y0c5c2VXeHBibVV2VUc5c2VXeHBibVZ6VEdGNVpYSXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenRCUVVORUxFODdRVU5XUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR3RFUVVFd1F5eG5RMEZCWjBNN1FVRkRNVVU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3huUlVGQmQwUXNhMEpCUVd0Q08wRkJRekZGTzBGQlEwRXNlVVJCUVdsRUxHTkJRV003UVVGREwwUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbEVRVUY1UXl4cFEwRkJhVU03UVVGRE1VVXNkMGhCUVdkSUxHMUNRVUZ0UWl4RlFVRkZPMEZCUTNKSk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2JVTkJRVEpDTERCQ1FVRXdRaXhGUVVGRk8wRkJRM1pFTEhsRFFVRnBReXhsUVVGbE8wRkJRMmhFTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxEaEVRVUZ6UkN3clJFRkJLMFE3TzBGQlJYSklPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdPenM3T3pzN096czdPenM3UVVOc1JrRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQmIwTTdRVUZEV1R0QlFVTlpPMEZCUTJ4Q08wRkJRMWs3UVVGRFdUdEJRVU16UWp0QlFVTlpPMEZCUlc1RUxDdEVRVUZsTzBsQlEySXNPRVJCUVUwN1NVRkRUaXd3UlVGQldUdEpRVU5hTEhOR1FVRnJRanRKUVVOc1FpeHZSVUZCVVR0SlFVTlNMR2RHUVVGak8wbEJRMlFzTkVaQlFXOUNPMGxCUTNCQ0xHbEZRVUZQTzBsQlExQXNOa1ZCUVdFN1EwRkRaRHRCUVZWQk96czdPenM3T3pzN096czdPMEZETVVKRU8wRkJRVUU3UVVGQlpTeE5RVUZOTEUxQlFVOHNVMEZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUVHRKUVVjeFF5eFpRVUZaTEUxQlFUQkNMRVZCUVVVc1QwRkJlVUk3VVVGREwwUXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU03U1VGRGVFSXNRMEZCUXp0SlFVTk5MRTlCUVU4c1EwRkJReXhKUVVGclFqdFJRVU12UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWs3U1VGRGNFSXNRMEZCUXp0SlFVTk5MRTlCUVU4N1VVRkRXaXhQUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTzBsQlEzQkNMRU5CUVVNN1EwRkRSanM3T3pzN096czdPenM3T3p0QlEySkVPMEZCUVVFN1FVRkJRVHRCUVVGclJUdEJRVXR1UkN4TlFVRk5MR3RDUVVGdFFpeFRRVUZSTEhGRVFVRlpPMGxCUnpGRUxGbEJRMFVzUjBGQlZTeEZRVU5XTEZGQlFYZENMRVZCUTNoQ0xFOUJRV3RETEVWQlEyeERMRmRCUVhkQ08xRkJSWGhDTEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFhRVUZYTEVOQlFVTTdVVUZETVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eGpRVUZqTzFGQlF6RkNMRTFCUVUwc2IwSkJRVzlDTEVkQlFUQkNPMWxCUTJ4RUxFMUJRVTBzUlVGQlJTeEpRVUZKTzFsQlExb3NUVUZCVFN4RlFVRkZMRXRCUVVzN1UwRkRaRHRSUVVORUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkRNVUlzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZEV2l4RlFVRkZMR0ZCUVdFc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4RlFVTjJReXhQUVVGUExFTkJRMUk3U1VGRFNDeERRVUZETzBsQlJVMHNTVUZCU1N4RFFVRkRMRTlCUVcxRE8xRkJRemRETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJRenRSUVVOdVJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRkRUlzUTBGQlF6dEpRVVZOTEUxQlFVMDdVVUZEV0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdFpRVU5xUWl4UFFVRk5PMU5CUTFBN1VVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEY0VJc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRUUVVOMlF6dFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRaUVVOd1FpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETzFOQlEzWkRPMUZCUTBRc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVU3VVVGRE0wTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1VVRkRNME1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF6dFJRVU51UXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRPMUZCUTI1RExFOUJRVThzU1VGQlNUdEpRVU5pTEVOQlFVTTdTVUZGVHl4cFFrRkJhVUk3VVVGRGRrSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJUdFJRVU5xUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUXpsQ0xFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUXpGQ0xFMUJRVTBzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZEYkVJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlF6TkNPMWxCUTBRc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGRGNrSXNSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlEzUkVPMWxCUTBRc1ZVRkJWU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTTdVVUZEYkVNc1EwRkJReXhEUVVGRE8xRkJRMFlzVDBGQlR5eFZRVUZWTzBsQlEyNUNMRU5CUVVNN1EwRkRSanM3T3pzN096czdPenM3T3p0QlF5OUVSRHRCUVVGQk8wRkJRVUU3UVVGQk5rSTdRVUZ6UkdRc1RVRkJUU3haUVVGWk8wbEJNa0l2UWl4WlFVTkZMRWRCUVZVc1JVRkRWaXhSUVVGM1FpeEZRVU40UWl4UFFVRTBRaXhGUVVNMVFpeFhRVUYzUWp0UlFVVjRRaXhOUVVGTkxHTkJRV01zUjBGQmQwSTdXVUZETVVNc1ZVRkJWU3hGUVVGRkxFOUJRVTg3V1VGRGJrSXNiMEpCUVc5Q0xFVkJRVVVzVVVGQlVUdFpRVU01UWl4UlFVRlJMRVZCUVVVc1UwRkJVenRaUVVOdVFpeFJRVUZSTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEZOQlFWTXNSVUZCUlN4VlFVRlZPMWxCUTNKQ0xGTkJRVk1zUlVGQlJTeFRRVUZUTzFsQlEzQkNMRlZCUVZVc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTTdXVUZEY0VJc1pVRkJaU3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETzFsQlF6VkNMRmRCUVZjc1JVRkJSVHRuUWtGRFdDeEhRVUZITEVWQlFVVXNRMEZCUXp0aFFVTlFPMU5CUTBZN1VVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRTdVVUZEY0VJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITzFGQlEyUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUk8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNZMEZCWXl4RlFVRkZMRTlCUVU4c1EwRkJRenRSUVVONlJDeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjN1VVRkZPVUlzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1R0UlFVTnFRaXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVazdVVUZEZWtJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTzFGQlEzcENMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSMEZCUnl4SlFVRkpPMUZCUTJoRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NSVUZCUlR0UlFVTnFRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVazdVVUZEZGtJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTzFGQlEzSkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNUdFJRVVY0UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExGRkJRVkU3VVVGRE5VSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVGRE8xRkJSWFJDTEd0Q1FVRnJRanRSUVVOc1FpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVU3VVVGRGVrSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSVHRKUVVOd1FpeERRVUZETzBsQlEwMHNTVUZCU1N4RFFVRkRMRTlCUVRaQ08xRkJRM1pETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTVHRSUVVOdVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRia1FzVDBGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMGxCUTNSQ0xFTkJRVU03U1VGRFRTeE5RVUZOTzFGQlExZ3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3V1VGRGFrSXNUMEZCVFR0VFFVTlFPMUZCUTBRc1NVRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTzFsQlEyUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVU3VTBGRGNFSTdVVUZEUkN4UlFVRlJMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEZRVUZGTzFsQlF5OUNMRXRCUVVzc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlExb3NTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1owSkJRM0pETEUxQlFVczdZVUZEVGp0WlFVTkVMRXRCUVVzc1UwRkJVeXhEUVVGRExFTkJRVU03WjBKQlEyUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVN1owSkJRM1JETEUxQlFVczdZVUZEVGp0WlFVTkVMRXRCUVVzc1RVRkJUU3hEUVVGRExFTkJRVU03WjBKQlExZ3NTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTzJkQ1FVTnVReXhOUVVGTE8yRkJRMDQ3V1VGRFJDeFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRVQ3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkRPMkZCUXpsRU8xTkJRMFk3VVVGRFJDeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFGQlF6ZENMRTlCUVU4c1NVRkJTVHRKUVVOaUxFTkJRVU03U1VGRFRTeFZRVUZWTEVOQlFVTXNUMEZCTkVJc1JVRkJSU3hOUVVGTkxFZEJRVWNzUzBGQlN6dFJRVU0xUkN4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRGJrUXNTVUZCU1N4TlFVRk5MRVZCUVVVN1dVRkRWaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTzFOQlEyUTdTVUZEU0N4RFFVRkRPMGxCUTAwc1UwRkJVenRSUVVOa0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dEpRVU4wUXl4RFFVRkRPMGxCUTAwc1UwRkJVenRSUVVOa0xFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhGUVVGRk8xbEJRelZDTEU5QlFVOHNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVU3VTBGRE5VSTdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVU55UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFTkJRMVFzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVhGQ0xFTkJRM1pGTzBsQlEwZ3NRMEZCUXp0SlFVTk5MRTlCUVU4N1VVRkRXaXhqUVVGak8xRkJRMlFzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUTJRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVTdVMEZEY0VJN1NVRkRTQ3hEUVVGRE8wbEJRMDBzWVVGQllTeERRVUZETEU5QlFXZENPMUZCUTI1RExFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHp0UlFVTjBRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0WlFVTm1MRTlCUVUwN1UwRkRVRHRSUVVORUxFbEJRVWtzVDBGQlR5eEZRVUZGTzFsQlExZ3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTTVRanRoUVVGTk8xbEJRMHdzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dFRRVU5xUXp0SlFVTklMRU5CUVVNN1NVRkRUU3hYUVVGWExFTkJRVU1zUzBGQllUdFJRVU01UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUjBGQlJ5eExRVUZMTzFGQlF6bENMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRFppeERRVUZETzBsQlEwMHNWVUZCVlN4RFFVRkRMRmRCUVcxQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmM3VVVGRGRFTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVObUxFTkJRVU03U1VGRFJDeGhRVUZoTzBsQlEwZ3NhVUpCUVdsQ08xRkJRM3BDTEUxQlFVMHNaVUZCWlN4SFFVRkhMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRE4wUXNVMEZCVXp0UlFVTlVMR1ZCUVdVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVNelJDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVFVGQlowSXNRMEZCUXp0UlFVTXpReXhEUVVGRExFTkJRVU03VVVGRFJpeGpRVUZqTzFGQlEyUXNaVUZCWlN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUXpORUxIZENRVUYzUWp0WlFVTjRRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVTdaMEpCUTNSQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNXVUZCV1N4RlFVRkZPMkZCUTJ4RE8xbEJRMFFzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4TlFVRm5RanRaUVVWeVF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFVkJRVVU3WjBKQlEyNURMRGhDUVVFNFFqdG5Ra0ZET1VJc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFhRVUZYTEVWQlFVVTdZVUZEYWtNN2FVSkJRVTA3WjBKQlEwd3NiVUpCUVcxQ08yZENRVU51UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEZRVUZGTzI5Q1FVTTFRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZkQlFWY3NRMEZETlVJc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZETlVRN2FVSkJRMFk3WVVGRFJqdFJRVU5JTEVOQlFVTXNRMEZCUXp0UlFVTkdMR1ZCUVdVc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXp0UlFVVjRReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4WFFVRlhMRVZCUVVVc1IwRkJSeXhGUVVGRk8xbEJRelZDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1MwRkJTeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTzJkQ1FVTnVReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRE8yRkJRM1pETzFGQlEwZ3NRMEZCUXl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RlFVRkZMRWRCUVVjc1JVRkJSVHRaUVVNeFFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVVzc1NVRkJTU3hEUVVGRExGZEJRVmNzUlVGQlJUdG5Ra0ZEYmtNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRoUVVOd1F6dFJRVU5JTEVOQlFVTXNRMEZCUXp0UlFVVkdMR1ZCUVdVN1VVRkRaaXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzFsQlEyUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenRSUVVOMFF5eERRVUZETEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExHVkJRV1U3VVVGRGJFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1YwRkJWenRKUVVONlFpeERRVUZETzBsQlExTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQmEwSTdVVUZETlVNc1QwRkJUeXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhEUVVGRE8wbEJRelZETEVOQlFVTTdTVUZEVHl4WFFVRlhPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRE4wSXNUVUZCVFN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlJYSkVMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzSzBOQlFVMHNRMEZEZGtJN1owSkJRMGNzUzBGQmEwSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhIUVVGSE8yZENRVU5zUXl4TFFVRnJRaXhEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVkQlFVYzdZVUZEY0VNc1JVRkRSRHRuUWtGRFJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU03WVVGREwwSXNRMEZEUmp0WlFVVkVMR3RDUVVGclFqdFpRVU5zUWl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dFpRVVZ3UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTTdVVUZETTBJc1EwRkJReXhEUVVGRE8wbEJRMG9zUTBGQlF6dEpRVU5FTEdsQ1FVRnBRanRKUVVOVUxHdENRVUZyUWl4RFFVRkRMRTFCUVdNN1VVRkRka01zU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4TlFVRk5PMUZCUXpOQ0xGbEJRVms3VVVGRFdpeEpRVUZKTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUlVGQlJUdFpRVU0zUWl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VTBGREwwTTdVVUZEUkN4WFFVRlhPMUZCUTFnc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4SFFVRkhMRWxCUVVrc0swTkJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RlFVRkZMRVZCUVVVN1dVRkRla1FzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1UwRkRha1FzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVWNlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q08yRkJRM1JDTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRPMkZCUTJwRUxGTkJRVk1zUlVGQlJUdFJRVU5rTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWRCUVVjc1JVRkJSVHRaUVVNNVF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlEzQkRMRU5CUVVNc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdVVUZET1VNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hOUVVGTkxFTkJRVU03U1VGRE4wTXNRMEZCUXp0SlFVTlBMR3RDUVVGclFqdFJRVU40UWl4VFFVRlRPMUZCUTFRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVU3VVVGRE1VTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRM3BDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVTdXVUZEY2tJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTd3JRMEZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJUdG5Ra0ZEZGtNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8yRkJRM1JETEVOQlFVTTdXVUZEUml4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0WlFVTXpRaXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOdVJTeE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVU3WjBKQlEzUkNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkRha01zUTBGQlF5eERRVUZETzFsQlEwWXNUMEZCVHl4TlFVRk5PMUZCUTJZc1EwRkJReXhEUVVGRExFTkJRMGc3VVVGRFJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpPMGxCUXpGQ0xFTkJRVU03U1VGRlJDeGhRVUZoTzBsQlEwd3NaVUZCWlR0UlFVTnlRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRk8xbEJRemxDTEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVU3V1VGRGFrTXNUVUZCVFN4aFFVRmhMRWRCUTJwQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEdGQlFXRTdXVUZEY0VVc1NVRkJTU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkJRenRaUVVONlF5eEpRVUZKTEU5QlFVOHNSMEZCUnl4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGRE0wSXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVYzdZVUZEYmtNN1dVRkRSQ3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM3BFTEVOQlFVTXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZETVVJc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RlFVTjRReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZEZWtJN1VVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFRRVUZUTzBsQlEzWkNMRU5CUVVNN1NVRkZUeXh0UWtGQmJVSXNRMEZCUXl4SlFVRnJRanRSUVVNMVF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF6dEpRVU40UXl4RFFVRkRPMGxCUlU4c1lVRkJZU3hEUVVGRExFbEJRV3RDTzFGQlEzUkRMRTlCUVU4c1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRPMGxCUTNwRExFTkJRVU03U1VGRlJDdzJRa0ZCTmtJN1NVRkRja0lzWTBGQll5eERRVU53UWl4SlFVRnJRaXhGUVVOc1FpeFJRVUZwUWp0UlFVVnFRaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFN1VVRkRjRU1zU1VGQlNTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVk8xRkJRM2hETEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkU3VVVGRGRrVXNWVUZCVlN4SFFVRkhMRkZCUVZFN1dVRkRia0lzUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xbEJRelZETEVOQlFVTXNRMEZCUXl4VlFVRlZPMUZCUldRc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRPMUZCUlhoRExGRkJRVkVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVN1dVRkROMElzUzBGQlN5eFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRXaXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUTFvc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1R0dlFrRkRiRU1zVVVGQlVUdHZRa0ZEVWl4VlFVRlZPMmxDUVVOWUxFTkJRVU03WVVGRFNEdFpRVU5FTEV0QlFVc3NXVUZCV1N4RFFVRkRPMWxCUTJ4Q0xFdEJRVXNzVVVGQlVTeERRVUZETzFsQlEyUXNTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJRenRuUWtGRFpDeFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNN2IwSkJRMllzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVWQlFVVTdkMEpCUTJwRExGRkJRVkU3ZDBKQlExSXNVMEZCVXp0eFFrRkRWaXhEUVVGRE8yOUNRVU5HTEZOQlFWTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExIVkNRVUYxUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8yOUNRVU5zUkN4UlFVRlJPMjlDUVVOU0xGVkJRVlU3YVVKQlExZ3NRMEZCUXp0aFFVTklPMWxCUTBRc1QwRkJUeXhEUVVGRExFTkJRVU03WjBKQlExQXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhYUVVGWExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SFFVRkhMRU5CUVVNN1lVRkRja1E3VTBGRFJqdEpRVU5JTEVOQlFVTTdTVUZEVHl4cFFrRkJhVUlzUTBGRGRrSXNTVUZCYTBJc1JVRkRiRUlzVDBGQk9FSTdVVUZGT1VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTTNRaXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTTdXVUZEYkVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRE8xTkJRMmhFTzFGQlEwUXNVVUZCVVN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHOUNRVUZ2UWl4RlFVRkZPMWxCUTNwRExFdEJRVXNzVVVGQlVTeERRVUZETEVOQlFVTTdaMEpCUTJJc1VVRkJVU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlR0dlFrRkROMElzVjBGQlZ6dHZRa0ZEV0N4TFFVRkxMRmxCUVZrc1EwRkJReXhEUVVGRE8zZENRVU5xUWl4UFFVRlBPekJDUVVOUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXpzN01rSkJSWEpDTEU5QlFVOHNRMEZCUXl4VFFVRlRPeXRDUVVOaUxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRPenM3WVVGSGNrTTdjVUpCUTBZN2IwSkJRMFFzVTBGQlV6dHZRa0ZEVkN4TFFVRkxMRkZCUVZFc1EwRkJReXhEUVVGRE8zZENRVU5pTEU5QlFVODdPMjFEUVVWblFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVN08yRkJSVGRETzNGQ1FVTkdPMjlDUVVORUxHRkJRV0U3YjBKQlEySXNTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJRenQzUWtGRFpDeFBRVUZQT3p0NVFrRkZUU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTTdPekpDUVVWd1FpeFBRVUZQTEVOQlFVTXNVMEZCVXpzclFrRkRZaXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXpzN08ydENRVWRvUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGZEJRVmM3TzJGQlJUZENPM0ZDUVVOR08ybENRVU5HTzJkQ1FVTkVMRTFCUVVzN1lVRkRUanRaUVVORUxFdEJRVXNzVjBGQlZ5eERRVUZETEVOQlFVTTdaMEpCUTJoQ0xGRkJRVkVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVN2IwSkJRemRDTEZkQlFWYzdiMEpCUTFnc1MwRkJTeXhaUVVGWkxFTkJRVU1zUTBGQlF6dDNRa0ZEYWtJc1QwRkJUenM3ZVVKQlJVMHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVE96c3lRa0ZGY0VJc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJRenNyUWtGRE9VSXNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03T3p0aFFVZHlRenR4UWtGRFJqdHZRa0ZEUkN4VFFVRlRPMjlDUVVOVUxFdEJRVXNzVVVGQlVTeERRVUZETEVOQlFVTTdkMEpCUTJJc1QwRkJUenM3YlVOQlJXZENMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZUczdZVUZGTjBNN2NVSkJRMFk3YjBKQlEwUXNZVUZCWVR0dlFrRkRZaXhMUVVGTExGTkJRVk1zUTBGQlF5eERRVUZETzNkQ1FVTmtMRTlCUVU4N08zbENRVVZOTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVenM3TWtKQlJYQkNMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4SlFVRkpMRU5CUVVNN0swSkJRemxDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE96czdhMEpCUjJoRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnpzN1lVRkZOMEk3Y1VKQlEwWTdhVUpCUTBZN1owSkJRMFFzVFVGQlN6dGhRVU5PTzFsQlEwUXNUMEZCVHl4RFFVRkRMRU5CUVVNN1owSkJRMUFzVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZEWWl3MFFrRkJORUlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eERRVU5xUlR0aFFVTkdPMU5CUTBZN1NVRkRTQ3hEUVVGRE8wbEJRMDhzYTBKQlFXdENPMUZCUTNoQ0xFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTA3VVVGRE0wUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhSUVVGUk8xRkJRM1JDTEVsQlFVa3NUVUZCVFN4SFFVRkhMRkZCUVZFN1VVRkRja0lzUzBGQlN5eE5RVUZOTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8xbEJRMmhETEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXp0WlFVTTFReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRE8xbEJRemxDTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTTdVMEZETDBJN1VVRkRSQ3hOUVVGTkxFbEJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzWlVGQlpUdFJRVU53UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTA3VVVGRE1VSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSk8wbEJRek5DTEVOQlFVTTdTVUZEVHl4MVFrRkJkVUlzUTBGQlF5eEpRVUZyUWp0UlFVTm9SQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU03VVVGRE5VTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlEzaERMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVNdlF6dFJRVU5FTEU5QlFVOHNTMEZCU3p0SlFVTmtMRU5CUVVNN1NVRkRUeXhsUVVGbExFTkJRVU1zU1VGQmEwSTdVVUZEZUVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RlFVRkZPMWxCUXpOQ0xFOUJRVThzUlVGQlJUdFRRVU5XTzFGQlEwUXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eExRVUZMTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTzBsQlEzSkZMRU5CUVVNN1EwRkRSanM3T3pzN096czdPenM3T3p0QlEyaG1SRHRCUVVGQk8wRkJRV1VzVFVGQlRTeFBRVUZSTEZOQlFWRXNRMEZCUXl4RFFVRkRMRTlCUVU4N1NVRkhOVU1zV1VGRFJTeFBRVWMwUWl4RlFVTTFRaXhQUVVFeVFqdFJRVVV6UWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6dEpRVU42UWl4RFFVRkRPMGxCUTAwc1QwRkJUeXhEUVVGRExFbEJRV3RDTzFGQlF5OUNMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNUdEpRVU53UWl4RFFVRkRPMGxCUTAwc1QwRkJUenRSUVVOYUxFOUJRVThzU1VGQlNTeERRVUZETEUxQlFVMDdTVUZEY0VJc1EwRkJRenREUVVOR096czdPenM3T3pzN096czdPMEZEYmtKRU8wRkJRVUU3UVVGQlFUdEJRVUVyUWp0QlFXdENhRUlzVFVGQlRTeGhRVUZoTzBsQlowSm9ReXhaUVVORkxFZEJRVlVzUlVGRFZpeFJRVUYzUWl4RlFVTjRRaXhQUVVFMFFpeEZRVU0xUWl4WFFVRjNRanRSUVVWNFFpeE5RVUZOTEdOQlFXTXNSMEZCZDBJN1dVRkRNVU1zUzBGQlN5eEZRVUZGTEZOQlFWTTdXVUZEYUVJc2MwSkJRWE5DTEVWQlFVVXNVVUZCVVR0WlFVTm9ReXhsUVVGbExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTTdVMEZETjBJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZOQlFWTTdVVUZEY2tJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITzFGQlEyUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUk8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUenRSUVVOMFFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjN1VVRkZPVUlzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlR0UlFVTnNRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZGQlFWRTdVVUZETlVJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETzFGQlEzUkNMRFpDUVVFMlFqdFJRVVUzUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMR05CUVdNc1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRmVrUXNhMEpCUVd0Q08xRkJRMnhDTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUlVGQlJUdFJRVU42UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRk8wbEJRM0pDTEVOQlFVTTdTVUZEVFN4SlFVRkpMRU5CUVVNc1QwRkJOa0k3VVVGRGRrTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRE8xRkJRMjVFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOMFFpeERRVUZETzBsQlEwMHNUVUZCVFR0UlFVTllMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEycENMRTlCUVUwN1UwRkRVRHRSUVVORUxFbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0WlFVTmtMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTzFOQlEzQkNPMUZCUTBRc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVU3VVVGRGRFTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0UlFVTTNRaXhQUVVGUExFbEJRVWs3U1VGRFlpeERRVUZETzBsQlEwMHNVMEZCVXp0UlFVTmtMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRenRKUVVOMFF5eERRVUZETzBsQlEwMHNVMEZCVXp0UlFVTmtMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMWxCUXpkQ0xFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVN1UwRkROVUk3VVVGRFJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVONlFpeERRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFVkJRemRETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlF6ZENPMGxCUTBnc1EwRkJRenRKUVVOTkxFOUJRVTg3VVVGRFdpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0VFFVTndRanRKUVVOSUxFTkJRVU03U1VGRFRTeGhRVUZoTEVOQlFVTXNUMEZCWjBJN1VVRkRia01zU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMWxCUTJZc1QwRkJUVHRUUVVOUU8xRkJRMFFzU1VGQlNTeFBRVUZQTEVWQlFVVTdXVUZEV0N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMU5CUXpsQ08yRkJRVTA3V1VGRFRDeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETzFOQlEycERPMGxCUTBnc1EwRkJRenRKUVVOTkxGZEJRVmNzUTBGQlF5eExRVUZoTzFGQlF6bENMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eEhRVUZITEV0QlFVczdVVUZET1VJc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJUdEpRVU5tTEVOQlFVTTdTVUZEVXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZyUWp0UlFVTTFReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU03U1VGRE5VTXNRMEZCUXp0SlFVTlBMRmxCUVZrN1VVRkRiRUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU0zUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdXVUZGZWtJc1RVRkJUU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTNKRUxFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NaMFJCUVU4c1EwRkJSU3hMUVVGdFFpeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRPMWxCUlRsRUxHdENRVUZyUWp0WlFVTnNRaXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0WlFVVnlRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkROMElzUTBGQlF5eERRVUZETzBsQlEwb3NRMEZCUXp0SlFVTlBMR3RDUVVGclFqdFJRVU40UWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVTdVVUZEYkVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVOb1F5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVU3WjBKQlEzWkNMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRU5CUVVNN1dVRkRia01zUTBGQlF5eERRVUZETzFsQlEwWXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTzFsQlEzUkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eHpRa0ZCYzBJc1MwRkJTeXhYUVVGWExFVkJRVVU3WjBKQlEzWkVMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzJGQlF6ZEVPMWxCUTBRc1RVRkJUU3hQUVVGUExFZEJRWE5DTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVTdaMEpCUTJwRkxGTkJRVk03WVVGRFZpeERRVUZETzFsQlEwWXNUVUZCVFN4VlFVRlZMRWRCUVVjc1NVRkJTU3huUkVGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVc1JVRkJSU3hQUVVGUExFTkJRVU03V1VGRE4wUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZETzFGQlEzaERMRU5CUVVNc1EwRkJRenRSUVVOR0xFOUJRVThzU1VGQlNTeERRVUZETEZsQlFWazdTVUZETVVJc1EwRkJRenRKUVVOUExHMUNRVUZ0UWl4RFFVRkRMRTlCUVdkQ08xRkJRekZETEdkRFFVRm5RenRSUVVOb1F5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEU5QlFVOHNRMEZCUXp0SlFVTXZReXhEUVVGRE8wbEJRMDhzYTBKQlFXdENPMUZCUTNoQ0xFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFMUJRVTA3VVVGRE0wUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhSUVVGUk8xRkJRM1JDTEVsQlFVa3NUVUZCVFN4SFFVRkhMRkZCUVZFN1VVRkRja0lzUzBGQlN5eE5RVUZOTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8xbEJRMmhETEUxQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXp0WlFVTTFReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRE8xbEJRemxDTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTTdVMEZETDBJN1VVRkRSQ3hOUVVGTkxFbEJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzWlVGQlpUdFJRVU53UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTA3VVVGRE1VSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSk8wbEJRek5DTEVOQlFVTTdTVUZEVHl4M1FrRkJkMElzUTBGQlF5eEpRVUZyUWp0UlFVTnFSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU03VVVGRE5VTXNUVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVOQlEzaERMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVNdlF6dFJRVU5FTEU5QlFVOHNTMEZCU3p0SlFVTmtMRU5CUVVNN1EwRkRSanM3T3pzN096czdPenM3T3p0QlEzUkxSRHRCUVVGQk8wRkJRV1VzVFVGQlRTeFJRVUZUTEZOQlFWRXNRMEZCUXl4RFFVRkRMRkZCUVZFN1NVRkhPVU1zV1VGQldTeFBRVUYzUWl4RlFVRkZMRTlCUVRKQ08xRkJReTlFTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRE8wbEJRM3BDTEVOQlFVTTdTVUZEVFN4UFFVRlBMRU5CUVVNc1NVRkJhMEk3VVVGREwwSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSk8wbEJRM0JDTEVOQlFVTTdTVUZEVFN4UFFVRlBPMUZCUTFvc1QwRkJUeXhKUVVGSkxFTkJRVU1zVFVGQlRUdEpRVU53UWl4RFFVRkRPME5CUTBZN096czdPenM3T3pzN096czdRVU5rUkR0QlFVRkJPMEZCUVVFN1FVRkJOa003UVVGclFqbENMRTFCUVUwc2IwSkJRWEZDTEZOQlFWRXNkVVJCUVdNN1NVRkhPVVFzV1VGRFJTeEhRVUZWTEVWQlExWXNVVUZCZDBJc1JVRkRlRUlzVDBGQmJVTXNSVUZEYmtNc1YwRkJkMEk3VVVGRmVFSXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZkQlFWY3NRMEZCUXp0UlFVTXhReXhOUVVGTkxHTkJRV01zUjBGQkswSTdXVUZEYWtRc2RVSkJRWFZDTEVWQlFVVXNVVUZCVVR0WlFVTnFReXhsUVVGbExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTTdXVUZETlVJc1VVRkJVU3hGUVVGRkxFZEJRVWM3V1VGRFlpeExRVUZMTEVWQlFVVXNVMEZCVXp0WlFVTm9RaXhQUVVGUExFVkJRVVVzUjBGQlJ6dFRRVU5pTzFGQlEwUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhuUWtGQlowSTdVVUZETlVJc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITzFGQlEyUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhSUVVGUk8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUenRSUVVOMFFpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRmRCUVZjN1VVRkZPVUlzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NSVUZCUlR0UlFVTnVRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEZGQlFWRTdVVUZETlVJc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETzFGQlEzUkNMRGhDUVVFNFFqdFJRVVU1UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMR05CUVdNc1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRGVrUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSVHRKUVVOMFFpeERRVUZETzBsQlEwMHNTVUZCU1N4RFFVRkRMRTlCUVc5RE8xRkJRemxETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJRenRSUVVOdVJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRkRUlzUTBGQlF6dEpRVU5OTEUxQlFVMDdVVUZEV0N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdFpRVU5xUWl4UFFVRk5PMU5CUTFBN1VVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVTdXVUZEWkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJUdFRRVU53UWp0UlFVTkVMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhGUVVGRk8xRkJRemRETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZETjBJc1QwRkJUeXhKUVVGSk8wbEJRMklzUTBGQlF6dEpRVU5OTEZOQlFWTTdVVUZEWkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNN1NVRkRkRU1zUTBGQlF6dEpRVU5OTEZOQlFWTTdVVUZEWkN4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNSVUZCUlR0WlFVTTVRaXhQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RlFVRkZPMU5CUXpWQ08xRkJRMFFzVDBGQlR5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkRNVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJReXhGUVVNM1F5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGTkJRVk1zUlVGQlJTeERRVU01UWp0SlFVTklMRU5CUVVNN1NVRkRUU3hYUVVGWExFTkJRVU1zUzBGQllUdFJRVU01UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTzFGQlF6RkNMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRFppeERRVUZETzBsQlEwOHNlVUpCUVhsQ08xRkJReTlDTEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJUdFJRVU51UXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4RlFVRkZPMWxCUTJ4RExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSVHRuUWtGRGVFSXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZGQlFWRXNRMEZCUXp0WlFVTnlReXhEUVVGRExFTkJRVU03V1VGRFJpeE5RVUZOTEU5QlFVOHNSMEZCSzBJc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGRGRrUXNSVUZCUlN4RlFVTkdMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRMW83WjBKQlEwVXNTMEZCU3l4RlFVTklMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zZFVKQlFYVkNMRXRCUVVzc1VVRkJVVHR2UWtGREwwTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN6dHZRa0ZEY0VJc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdZVUZEZWtRc1EwRkRSanRaUVVWRUxFMUJRVTBzWTBGQll5eEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUXpsQ0xGRkJRVkVzUTBGQlF5eFZRVUZWTEVWQlFXbENMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVXNRMEZEYmtRc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlEyNURMRVZCUTBRc1QwRkJUeXhEUVVOU08xbEJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSVHRuUWtGRE5VSXNZMEZCWXl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEZGtVN1dVRkRSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNN1VVRkROME1zUTBGQlF5eERRVUZETzFGQlEwWXNUMEZCVHl4SlFVRkpMRU5CUVVNc1lVRkJZVHRKUVVNelFpeERRVUZETzBOQlEwWTdPenM3T3pzN096czdPenM3UVVNdlIwUTdRVUZCUVR0QlFVRkJPMEZCUVhORU8wRkJhMEoyUXl4TlFVRk5MR05CUVdNN1NVRmxha01zV1VGRFJTeEhRVUZWTEVWQlExWXNVVUZCZDBJc1JVRkRlRUlzVDBGQk5rSXNSVUZETjBJc1YwRkJkMEk3VVVGRmVFSXNUVUZCVFN4alFVRmpMRWRCUVhsQ08xbEJRek5ETEV0QlFVc3NSVUZCUlN4VFFVRlRPMWxCUTJoQ0xIVkNRVUYxUWl4RlFVRkZMRkZCUVZFN1dVRkRha01zWlVGQlpTeEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRPMU5CUXpkQ08xRkJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4VlFVRlZPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnp0UlFVTmtMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzVVVGQlVUdFJRVU40UWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVTg3VVVGRGRFSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhYUVVGWE8xRkJSVGxDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTVHRSUVVOdVFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVN1VVRkRia0lzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NRMEZCUXp0UlFVTjBRaXc0UWtGQk9FSTdVVUZGT1VJc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hqUVVGakxFVkJRVVVzVDBGQlR5eERRVUZETzFGQlJYcEVMR3RDUVVGclFqdFJRVU5zUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVTdVVUZEZWtJc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJUdEpRVU4wUWl4RFFVRkRPMGxCUTAwc1NVRkJTU3hEUVVGRExFOUJRVGhDTzFGQlEzaERMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU51UkN4UFFVRlBMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVU3U1VGRGRFSXNRMEZCUXp0SlFVTk5MRTFCUVUwN1VVRkRXQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTnFRaXhQUVVGTk8xTkJRMUE3VVVGRFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSVUZCUlR0VFFVTndRanRSUVVORUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzFGQlEzWkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkROMElzVDBGQlR5eEpRVUZKTzBsQlEySXNRMEZCUXp0SlFVTk5MRk5CUVZNN1VVRkRaQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU03U1VGRGRFTXNRMEZCUXp0SlFVTk5MRk5CUVZNN1VVRkRaQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVNNVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRk8xTkJRelZDTzFGQlEwUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUTBGRE1VSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF5eEZRVU0zUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZOQlFWTXNSVUZCUlN4RFFVTTVRanRKUVVOSUxFTkJRVU03U1VGRFRTeFBRVUZQTzFGQlExb3NTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRMlFzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVN1UwRkRjRUk3U1VGRFNDeERRVUZETzBsQlEwMHNZVUZCWVN4RFFVRkRMRTlCUVdkQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUenRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVObUxFOUJRVTA3VTBGRFVEdFJRVU5FTEVsQlFVa3NUMEZCVHl4RlFVRkZPMWxCUTFnc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRUUVVNNVFqdGhRVUZOTzFsQlEwd3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0VFFVTnFRenRKUVVOSUxFTkJRVU03U1VGRFRTeFhRVUZYTEVOQlFVTXNTMEZCWVR0UlFVTTVRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4TFFVRkxPMUZCUXpsQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZEWml4RFFVRkRPMGxCUTFNc1lVRkJZVHRSUVVOeVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlF6ZENMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSVUZCUlR0WlFVVjZRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRja1FzU1VGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVE8xbEJRM1JETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXgxUWtGQmRVSXNTMEZCU3l4WFFVRlhMRVZCUVVVN1owSkJRM2hFTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMkZCUTJwRU8xbEJRMFFzVFVGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4cFJFRkJVU3hEUVVNeFFpeExRVUZ2UWl4RFFVRkRMRlZCUVZVc1JVRkJjVUlzUlVGRGNrUXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJReTlETzFsQlJVUXNhMEpCUVd0Q08xbEJRMnhDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRE8xbEJSWFJDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU12UWl4RFFVRkRMRU5CUVVNN1NVRkRTaXhEUVVGRE8wbEJRMU1zZVVKQlFYbENMRU5CUVVNc1NVRkJhMEk3VVVGRGNFUXNUVUZCVFN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRPMUZCUXpWRExFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVONFF5eERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZETDBNN1VVRkRSQ3hQUVVGUExFdEJRVXM3U1VGRFpDeERRVUZETzBsQlExTXNiMEpCUVc5Q0xFTkJRVU1zVVVGQmEwSTdVVUZETDBNc2EwTkJRV3RETzFGQlEyeERMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1VVRkJVU3hEUVVGRE8wbEJRMnBFTEVOQlFVTTdTVUZEVXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZyUWp0UlFVTTFReXhQUVVGUExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU03U1VGRE5VTXNRMEZCUXp0SlFVTlBMRzFDUVVGdFFqdFJRVU42UWl4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVTdVVUZEYmtNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSVHRaUVVOc1F5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVU3WjBKQlEzaENMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4UlFVRlJMRU5CUVVNN1dVRkRja01zUTBGQlF5eERRVUZETzFsQlEwWXNUVUZCVFN4UFFVRlBMRWRCUVhOQ0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3WjBKQlEycEZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzJGQlF6RkVMRU5CUVVNN1dVRkRSaXhOUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEdsRVFVRlJMRU5CUXpsQ0xGRkJRVkVzUTBGQlF5eFZRVUZWTEVWQlFYRkNMRVZCUTNoRExFOUJRVThzUTBGRFVqdFpRVU5FTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF6dFJRVU14UXl4RFFVRkRMRU5CUVVNN1VVRkRSaXhQUVVGUExFbEJRVWtzUTBGQlF5eGhRVUZoTzBsQlF6TkNMRU5CUVVNN1NVRkRUeXhyUWtGQmEwSTdVVUZEZUVJc1RVRkJUU3hsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4bFFVRmxMRU5CUVVNc1RVRkJUVHRSUVVNelJDeEpRVUZKTEUxQlFVMHNSMEZCUnl4RFFVRkRMRkZCUVZFN1VVRkRkRUlzU1VGQlNTeE5RVUZOTEVkQlFVY3NVVUZCVVR0UlFVTnlRaXhMUVVGTExFMUJRVTBzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1dVRkRhRU1zVFVGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETzFsQlF6VkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4SFFVRkhMRU5CUVVNN1dVRkRPVUlzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF6dFRRVU12UWp0UlFVTkVMRTFCUVUwc1NVRkJTU3hIUVVGSExFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhsUVVGbE8xRkJRM0JFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1RVRkJUVHRSUVVNeFFpeEpRVUZKTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrN1NVRkRNMElzUTBGQlF6dERRVU5HSWl3aVptbHNaU0k2SW14bFlXWnNaWFF0YkdGNVpYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z2QyVmljR0ZqYTFWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1WEhScFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtLVnh1WEhSY2RHUmxabWx1WlNoYlhTd2dabUZqZEc5eWVTazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuS1Z4dVhIUmNkR1Y0Y0c5eWRITmJYQ0pzWldGbWJHVjBUV0Z3WENKZElEMGdabUZqZEc5eWVTZ3BPMXh1WEhSbGJITmxYRzVjZEZ4MGNtOXZkRnRjSW14bFlXWnNaWFJOWVhCY0lsMGdQU0JtWVdOMGIzSjVLQ2s3WEc1OUtTaDNhVzVrYjNjc0lHWjFibU4wYVc5dUtDa2dlMXh1Y21WMGRYSnVJQ0lzSWlCY2RDOHZJRlJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEhaaGNpQnBibk4wWVd4c1pXUk5iMlIxYkdWeklEMGdlMzA3WEc1Y2JpQmNkQzh2SUZSb1pTQnlaWEYxYVhKbElHWjFibU4wYVc5dVhHNGdYSFJtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNiaUJjZEZ4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzRnWEhSY2RHbG1LR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRLU0I3WEc0Z1hIUmNkRngwY21WMGRYSnVJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRMbVY0Y0c5eWRITTdYRzRnWEhSY2RIMWNiaUJjZEZ4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmlCY2RGeDBkbUZ5SUcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkSUQwZ2UxeHVJRngwWEhSY2RHazZJRzF2WkhWc1pVbGtMRnh1SUZ4MFhIUmNkR3c2SUdaaGJITmxMRnh1SUZ4MFhIUmNkR1Y0Y0c5eWRITTZJSHQ5WEc0Z1hIUmNkSDA3WEc1Y2JpQmNkRngwTHk4Z1JYaGxZM1YwWlNCMGFHVWdiVzlrZFd4bElHWjFibU4wYVc5dVhHNGdYSFJjZEcxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1OaGJHd29iVzlrZFd4bExtVjRjRzl5ZEhNc0lHMXZaSFZzWlN3Z2JXOWtkV3hsTG1WNGNHOXlkSE1zSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cE8xeHVYRzRnWEhSY2RDOHZJRVpzWVdjZ2RHaGxJRzF2WkhWc1pTQmhjeUJzYjJGa1pXUmNiaUJjZEZ4MGJXOWtkV3hsTG13Z1BTQjBjblZsTzF4dVhHNGdYSFJjZEM4dklGSmxkSFZ5YmlCMGFHVWdaWGh3YjNKMGN5QnZaaUIwYUdVZ2JXOWtkV3hsWEc0Z1hIUmNkSEpsZEhWeWJpQnRiMlIxYkdVdVpYaHdiM0owY3p0Y2JpQmNkSDFjYmx4dVhHNGdYSFF2THlCbGVIQnZjMlVnZEdobElHMXZaSFZzWlhNZ2IySnFaV04wSUNoZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZktWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dElEMGdiVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaWGh3YjNObElIUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WXlBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjRnWm05eUlHaGhjbTF2Ym5rZ1pYaHdiM0owYzF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrSUQwZ1puVnVZM1JwYjI0b1pYaHdiM0owY3l3Z2JtRnRaU3dnWjJWMGRHVnlLU0I3WEc0Z1hIUmNkR2xtS0NGZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOG9aWGh3YjNKMGN5d2dibUZ0WlNrcElIdGNiaUJjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnYm1GdFpTd2dleUJsYm5WdFpYSmhZbXhsT2lCMGNuVmxMQ0JuWlhRNklHZGxkSFJsY2lCOUtUdGNiaUJjZEZ4MGZWeHVJRngwZlR0Y2JseHVJRngwTHk4Z1pHVm1hVzVsSUY5ZlpYTk5iMlIxYkdVZ2IyNGdaWGh3YjNKMGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUlEMGdablZ1WTNScGIyNG9aWGh3YjNKMGN5a2dlMXh1SUZ4MFhIUnBaaWgwZVhCbGIyWWdVM2x0WW05c0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQlRlVzFpYjJ3dWRHOVRkSEpwYm1kVVlXY3BJSHRjYmlCY2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmlCY2RGeDBmVnh1SUZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnSjE5ZlpYTk5iMlIxYkdVbkxDQjdJSFpoYkhWbE9pQjBjblZsSUgwcE8xeHVJRngwZlR0Y2JseHVJRngwTHk4Z1kzSmxZWFJsSUdFZ1ptRnJaU0J1WVcxbGMzQmhZMlVnYjJKcVpXTjBYRzRnWEhRdkx5QnRiMlJsSUNZZ01Ub2dkbUZzZFdVZ2FYTWdZU0J0YjJSMWJHVWdhV1FzSUhKbGNYVnBjbVVnYVhSY2JpQmNkQzh2SUcxdlpHVWdKaUF5T2lCdFpYSm5aU0JoYkd3Z2NISnZjR1Z5ZEdsbGN5QnZaaUIyWVd4MVpTQnBiblJ2SUhSb1pTQnVjMXh1SUZ4MEx5OGdiVzlrWlNBbUlEUTZJSEpsZEhWeWJpQjJZV3gxWlNCM2FHVnVJR0ZzY21WaFpIa2dibk1nYjJKcVpXTjBYRzRnWEhRdkx5QnRiMlJsSUNZZ09Id3hPaUJpWldoaGRtVWdiR2xyWlNCeVpYRjFhWEpsWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMblFnUFNCbWRXNWpkR2x2YmloMllXeDFaU3dnYlc5a1pTa2dlMXh1SUZ4MFhIUnBaaWh0YjJSbElDWWdNU2tnZG1Gc2RXVWdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0haaGJIVmxLVHRjYmlCY2RGeDBhV1lvYlc5a1pTQW1JRGdwSUhKbGRIVnliaUIyWVd4MVpUdGNiaUJjZEZ4MGFXWW9LRzF2WkdVZ0ppQTBLU0FtSmlCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdlltcGxZM1FuSUNZbUlIWmhiSFZsSUNZbUlIWmhiSFZsTGw5ZlpYTk5iMlIxYkdVcElISmxkSFZ5YmlCMllXeDFaVHRjYmlCY2RGeDBkbUZ5SUc1eklEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlCY2RGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV5S0c1ektUdGNiaUJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzV6TENBblpHVm1ZWFZzZENjc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIWmhiSFZsSUgwcE8xeHVJRngwWEhScFppaHRiMlJsSUNZZ01pQW1KaUIwZVhCbGIyWWdkbUZzZFdVZ0lUMGdKM04wY21sdVp5Y3BJR1p2Y2loMllYSWdhMlY1SUdsdUlIWmhiSFZsS1NCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9ibk1zSUd0bGVTd2dablZ1WTNScGIyNG9hMlY1S1NCN0lISmxkSFZ5YmlCMllXeDFaVnRyWlhsZE95QjlMbUpwYm1Rb2JuVnNiQ3dnYTJWNUtTazdYRzRnWEhSY2RISmxkSFZ5YmlCdWN6dGNiaUJjZEgwN1hHNWNiaUJjZEM4dklHZGxkRVJsWm1GMWJIUkZlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ptOXlJR052YlhCaGRHbGlhV3hwZEhrZ2QybDBhQ0J1YjI0dGFHRnliVzl1ZVNCdGIyUjFiR1Z6WEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbTRnUFNCbWRXNWpkR2x2YmlodGIyUjFiR1VwSUh0Y2JpQmNkRngwZG1GeUlHZGxkSFJsY2lBOUlHMXZaSFZzWlNBbUppQnRiMlIxYkdVdVgxOWxjMDF2WkhWc1pTQS9YRzRnWEhSY2RGeDBablZ1WTNScGIyNGdaMlYwUkdWbVlYVnNkQ2dwSUhzZ2NtVjBkWEp1SUcxdlpIVnNaVnNuWkdWbVlYVnNkQ2RkT3lCOUlEcGNiaUJjZEZ4MFhIUm1kVzVqZEdsdmJpQm5aWFJOYjJSMWJHVkZlSEJ2Y25SektDa2dleUJ5WlhSMWNtNGdiVzlrZFd4bE95QjlPMXh1SUZ4MFhIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFvWjJWMGRHVnlMQ0FuWVNjc0lHZGxkSFJsY2lrN1hHNGdYSFJjZEhKbGRIVnliaUJuWlhSMFpYSTdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5QlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHeGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJ5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2djSEp2Y0dWeWRIa3BJSHNnY21WMGRYSnVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1wbFkzUXNJSEJ5YjNCbGNuUjVLVHNnZlR0Y2JseHVJRngwTHk4Z1gxOTNaV0p3WVdOclgzQjFZbXhwWTE5d1lYUm9YMTljYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0E5SUZ3aVhDSTdYRzVjYmx4dUlGeDBMeThnVEc5aFpDQmxiblJ5ZVNCdGIyUjFiR1VnWVc1a0lISmxkSFZ5YmlCbGVIQnZjblJ6WEc0Z1hIUnlaWFIxY200Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aGZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbk1nUFNCY0lpNHZjM0pqTDJsdVpHVjRMblJ6WENJcE8xeHVJaXdpYVcxd2IzSjBJRTFoY210bGNpQm1jbTl0SUNjdUwyMWhjbXRsY2k5TllYSnJaWEluWEc1cGJYQnZjblFnVFdGeWEyVnljMHhoZVdWeUlHWnliMjBnSnk0dmJXRnlhMlZ5TDAxaGNtdGxjbk5NWVhsbGNpZGNibWx0Y0c5eWRDQk5ZWEpyWlhKelFuVm1abVZ5VEdGNVpYSWdabkp2YlNBbkxpOXRZWEpyWlhJdlRXRnlhMlZ5YzBKMVptWmxja3hoZVdWeUoxeHVhVzF3YjNKMElGQnZiSGxzYVc1bElHWnliMjBnSnk0dmNHOXNlV3hwYm1VdlVHOXNlV3hwYm1VblhHNXBiWEJ2Y25RZ1VHOXNlV3hwYm1WelRHRjVaWElnWm5KdmJTQW5MaTl3YjJ4NWJHbHVaUzlRYjJ4NWJHbHVaWE5NWVhsbGNpZGNibWx0Y0c5eWRDQlFiMng1YkdsdVpYTkNkV1ptWlhKTVlYbGxjaUJtY205dElDY3VMM0J2Ykhsc2FXNWxMMUJ2Ykhsc2FXNWxjMEoxWm1abGNreGhlV1Z5SjF4dWFXMXdiM0owSUZCdmJIbG5iMjRnWm5KdmJTQW5MaTl3YjJ4NVoyOXVMMUJ2YkhsbmIyNG5YRzVwYlhCdmNuUWdVRzlzZVdkdmJuTk1ZWGxsY2lCbWNtOXRJQ2N1TDNCdmJIbG5iMjR2VUc5c2VXZHZibk5NWVhsbGNpZGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCTllYSnJaWElzWEc0Z0lFMWhjbXRsY25OTVlYbGxjaXhjYmlBZ1RXRnlhMlZ5YzBKMVptWmxja3hoZVdWeUxGeHVJQ0JRYjJ4NWJHbHVaU3hjYmlBZ1VHOXNlV3hwYm1WelRHRjVaWElzWEc0Z0lGQnZiSGxzYVc1bGMwSjFabVpsY2t4aGVXVnlMRnh1SUNCUWIyeDVaMjl1TEZ4dUlDQlFiMng1WjI5dWMweGhlV1Z5TEZ4dWZWeHVaWGh3YjNKMElIdGNiaUFnVFdGeWEyVnlMRnh1SUNCTllYSnJaWEp6VEdGNVpYSXNYRzRnSUUxaGNtdGxjbk5DZFdabVpYSk1ZWGxsY2l4Y2JpQWdVRzlzZVd4cGJtVXNYRzRnSUZCdmJIbHNhVzVsYzB4aGVXVnlMRnh1SUNCUWIyeDViR2x1WlhOQ2RXWm1aWEpNWVhsbGNpeGNiaUFnVUc5c2VXZHZiaXhjYmlBZ1VHOXNlV2R2Ym5OTVlYbGxjaXhjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJRVJoZEdGTWFYTjBTWFJsYlNCOUlHWnliMjBnSnk0dUwyUmxabWx1YVhScGIyNXpKMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5Qk5ZWEpyWlhJZ1pYaDBaVzVrY3lCTUxrMWhjbXRsY2lCN1hHNGdJQzh2SUhSemJHbHVkRHBrYVhOaFlteGxMVzVsZUhRdGJHbHVaVHAyWVhKcFlXSnNaUzF1WVcxbFhHNGdJSEJ5YVhaaGRHVWdYMTlrWVhSaE9pQkVZWFJoVEdsemRFbDBaVzFjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9iR0YwYkc1bk9pQk1Ma3hoZEV4dVowVjRjSEpsYzNOcGIyNHNJRzl3ZEdsdmJuTS9PaUJNTGsxaGNtdGxjazl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnpkWEJsY2loc1lYUnNibWNzSUc5d2RHbHZibk1wWEc0Z0lIMWNiaUFnY0hWaWJHbGpJSE5sZEVSaGRHRW9aR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRLU0I3WEc0Z0lDQWdkR2hwY3k1ZlgyUmhkR0VnUFNCa1lYUmhYRzRnSUgxY2JpQWdjSFZpYkdsaklHZGxkRVJoZEdFb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMTlrWVhSaFhHNGdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdJRVJoZEdGTWFYTjBTWFJsYlN3Z1EyaGhibTVsYkVaMWJtTWdmU0JtY205dElDY3VMaTlrWldacGJtbDBhVzl1Y3lkY2JtbHRjRzl5ZENCTllYSnJaWEp6VEdGNVpYSXNJSHNnVFdGeWEyVnljMHhoZVdWeVQzQjBhVzl1Y3lCOUlHWnliMjBnSnk0dlRXRnlhMlZ5YzB4aGVXVnlKMXh1YVc1MFpYSm1ZV05sSUUxaGNtdGxjbk5DZFdabVpYSk1ZWGxsY2s5d2RHbHZibk1nWlhoMFpXNWtjeUJOWVhKclpYSnpUR0Y1WlhKUGNIUnBiMjV6SUh0Y2JpQWdZblZtWm1WeVZHOXZiSFJwY0VGMGRISTZJSE4wY21sdVoxeHVJQ0JpZFdabVpYSlBjSFJwYjI1ek9pQk1Ma05wY21Oc1pVMWhjbXRsY2s5d2RHbHZibk5jYm4xY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRTFoY210bGNuTkNkV1ptWlhKTVlYbGxjaUJsZUhSbGJtUnpJRTFoY210bGNuTk1ZWGxsY2lCN1hHNGdJSEIxWW14cFl5QnZjSFJwYjI1ek9pQk5ZWEpyWlhKelFuVm1abVZ5VEdGNVpYSlBjSFJwYjI1elhHNGdJSEJ5YVhaaGRHVWdZblZtWm1WeVRHRjVaWEk2SUV3dVRHRjVaWEpIY205MWNGeHVJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0J0WVhBNklFd3VUV0Z3TEZ4dUlDQWdJR1JoZEdGTWFYTjBPaUJFWVhSaFRHbHpkRWwwWlcxYlhTeGNiaUFnSUNCdmNIUnBiMjV6T2lCTllYSnJaWEp6UW5WbVptVnlUR0Y1WlhKUGNIUnBiMjV6TEZ4dUlDQWdJR05vWVc1dVpXeEdkVzVqT2lCRGFHRnVibVZzUm5WdVkxeHVJQ0FwSUh0Y2JpQWdJQ0J6ZFhCbGNpaHRZWEFzSUdSaGRHRk1hWE4wTENCdmNIUnBiMjV6TENCamFHRnVibVZzUm5WdVl5bGNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW5iV0Z5YTJWeVFuVm1abVZ5SjF4dUlDQWdJR052Ym5OMElHUmxabUYxYkhSQ2RXWm1aWEpQY0hScGIyNXpPaUJNTGtOcGNtTnNaVTFoY210bGNrOXdkR2x2Ym5NZ1BTQjdYRzRnSUNBZ0lDQnlZV1JwZFhNNklERXdNREFzWEc0Z0lDQWdJQ0J6ZEhKdmEyVTZJR1poYkhObExGeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0Z4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxGeHVJQ0FnSUNBZ2V5QmlkV1ptWlhKUGNIUnBiMjV6T2lCa1pXWmhkV3gwUW5WbVptVnlUM0IwYVc5dWN5QjlMRnh1SUNBZ0lDQWdiM0IwYVc5dWMxeHVJQ0FnSUNsY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCa2NtRjNLRzl3ZEdsdmJuTS9PaUJOWVhKclpYSnpRblZtWm1WeVRHRjVaWEpQY0hScGIyNXpLU0I3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6SUQwZ1QySnFaV04wTG1GemMybG5iaWgwYUdsekxtOXdkR2x2Ym5Nc0lHOXdkR2x2Ym5NcFhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVmtjbUYzS0NsY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCeVpXUnlZWGNvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5acGMybGliR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1dFlYSnJaWEpNWVhsbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1dFlYQXVjbVZ0YjNabFRHRjVaWElvZEdocGN5NXRZWEpyWlhKTVlYbGxjaWxjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdVluVm1abVZ5VEdGNVpYSXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRndMbkpsYlc5MlpVeGhlV1Z5S0hSb2FYTXVZblZtWm1WeVRHRjVaWElwWEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YldGeWEyVnlUR0Y1WlhJZ1BTQjBhR2x6TG1OdmJtWnBaMDFoY210bGNreGhlV1Z5S0NsY2JpQWdJQ0IwYUdsekxtSjFabVpsY2t4aGVXVnlJRDBnZEdocGN5NWpiMjVtYVdkQ2RXWm1aWEpNWVhsbGNpZ3BYRzRnSUNBZ2RHaHBjeTV0WVhBdVlXUmtUR0Y1WlhJb2RHaHBjeTV0WVhKclpYSk1ZWGxsY2lsY2JpQWdJQ0IwYUdsekxtMWhjQzVoWkdSTVlYbGxjaWgwYUdsekxtSjFabVpsY2t4aGVXVnlLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JseHVJQ0J3Y21sMllYUmxJR052Ym1acFowSjFabVpsY2t4aGVXVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElHZHliM1Z3VEdGNVpYSWdQU0JNTG14aGVXVnlSM0p2ZFhBb0tWeHVJQ0FnSUhSb2FYTXViV0Z5YTJWeWN5NW1iM0pGWVdOb0tDaHRZWEpyWlhJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHTnBjbU5zWlV4aGVXVnlJRDBnVEM1amFYSmpiR1VvWEc0Z0lDQWdJQ0FnSUcxaGNtdGxjaTVuWlhSTVlYUk1ibWNvS1N4Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNXpMbUoxWm1abGNrOXdkR2x2Ym5OY2JpQWdJQ0FnSUNsY2JpQWdJQ0FnSUdOcGNtTnNaVXhoZVdWeUxtSnBibVJVYjI5c2RHbHdLRnh1SUNBZ0lDQWdJQ0FuSnlBcklHMWhjbXRsY2k1blpYUkVZWFJoS0NsYmRHaHBjeTV2Y0hScGIyNXpMbUoxWm1abGNsUnZiMngwYVhCQmRIUnlYVnh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdaM0p2ZFhCTVlYbGxjaTVoWkdSTVlYbGxjaWhqYVhKamJHVk1ZWGxsY2lsY2JpQWdJQ0I5S1Z4dUlDQWdJSEpsZEhWeWJpQm5jbTkxY0V4aGVXVnlYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUVSaGRHRk1hWE4wU1hSbGJTd2dRMmhoYm01bGJFWjFibU1nZlNCbWNtOXRJQ2N1TGk5a1pXWnBibWwwYVc5dWN5ZGNibWx0Y0c5eWRDQk5ZWEpyWlhJZ1puSnZiU0FuTGk5TllYSnJaWEluWEc1Y2JpOHFLaURtdUxMbW41UG1vTGZsdkk4ZzVwV2o1NEs1Zk9lRHJlV0ttK1didmlBcUwxeHVkSGx3WlNCTllYSnJaWEp6VEdGNVpYSlNaVzVrWlhKVWVYQmxJRDBnSjNCdmFXNTBKeUI4SUNkb1pXRjBKeUI4SUNkamJIVnpkR1Z5SjF4dVhHNHZLaW9nNXJpeTVwK1Q2YUtjNklteTVxQzM1YnlQSU9XTmxlaUpzbnpsaUlibXJyVWdLaTljYm5SNWNHVWdUV0Z5YTJWeWMweGhlV1Z5VW1WdVpHVnlVRzlwYm5SRGIyeHZjbFI1Y0dVZ1BTQW5jMmx1WjJ4bEp5QjhJQ2R6WldkdFpXNTBaV1FuWEc1Y2JpOHFLaURtbGFQbmdybmxtNzdtb0lmbnNidmxub3NnYVdOdmJtWnZiblI4YzNabmZHbHRZV2RsSUNvdlhHNTBlWEJsSUUxaGNtdGxjbk5NWVhsbGNrbGpiMjVVZVhCbElEMGdKMlp2Ym5SZlkyeGhjM01uSUh3Z0ozVnVhV052WkdVbklId2dKM041YldKdmJDY2dmQ0FuYVcxaFoyVW5YRzVjYm1sdWRHVnlabUZqWlNCSlkyOXVVbVZ1WkdWeVJuVnVZMDl3ZEdsdmJpQjdYRzRnSUdsamIyNVRhWHBsT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpkWEc0Z0lHbGpiMjVEYjJ4dmNqb2djM1J5YVc1blhHNTlYRzUwZVhCbElFbGpiMjVTWlc1a1pYSkdkVzVqSUQwZ0tGeHVJQ0JrWVhSaE9pQkVZWFJoVEdsemRFbDBaVzBzWEc0Z0lIQmhjbUZ0Y3pvZ1NXTnZibEpsYm1SbGNrWjFibU5QY0hScGIyNWNiaWtnUFQ0Z2MzUnlhVzVuWEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1RXRnlhMlZ5YzB4aGVXVnlUM0IwYVc5dWN5QjdYRzRnSUhKbGJtUmxjbFI1Y0dVNklFMWhjbXRsY25OTVlYbGxjbEpsYm1SbGNsUjVjR1ZjYmlBZ2NtVnVaR1Z5VUc5cGJuUkRiMnh2Y2xSNWNHVTZJRTFoY210bGNuTk1ZWGxsY2xKbGJtUmxjbEJ2YVc1MFEyOXNiM0pVZVhCbFhHNGdJR2xqYjI1VWVYQmxPaUJOWVhKclpYSnpUR0Y1WlhKSlkyOXVWSGx3WlZ4dVhHNGdJR2xqYjI1SmJXRm5aVlZ5YkQ4NklITjBjbWx1WjF4dUlDQnBZMjl1VTJsNlpUODZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMWNiaUFnYVdOdmJrTnNZWE56UHpvZ2MzUnlhVzVuWEc0Z0lHbGpiMjVWYm1samIyUmxQem9nYzNSeWFXNW5YRzRnSUdsamIyNVRlVzFpYjJ3L09pQnpkSEpwYm1kY2JpQWdhV052YmtOdmJHOXlQem9nYzNSeWFXNW5YRzRnSUdsamIyNUJibU5vYjNJL09pQmJiblZ0WW1WeUxDQnVkVzFpWlhKZFhHNGdJR2xqYjI1U1pXNWtaWEpsY2o4NklFbGpiMjVTWlc1a1pYSkdkVzVqWEc1Y2JpQWdMeW9xSUhCdmNIVndJT1d4bGVla3V1V3RsK2F1dFNBcUwxeHVJQ0J3YjNCMWNFRjBkSEkvT2lCemRISnBibWRjYmlBZ0x5b3FJSFJ2YjJ4MGFYQWc1YkdWNTZTNjVhMlg1cTYxSUNvdlhHNGdJSFJ2YjJ4MGFYQkJkSFJ5UHpvZ2MzUnlhVzVuWEc1Y2JpQWdiM0JoWTJsMGVUODZJRzUxYldKbGNseHVYRzRnSUM4cUtpRGxpSWJtcnJYbXVMTG1uNVBudTUvb3JxSGxyWmZtcnJVZ0tpOWNiaUFnYzJWbmJXVnVkR1ZrUVhSMGNqODZJSE4wY21sdVoxeHVJQ0J6WldkdFpXNTBaV1JEYjJ4dmNuTS9PaUJ6ZEhKcGJtZGJYVnh1WEc0Z0lHaGxZWFJQY0hScGIyNXpQem9nVFdGeWEyVnljMGhsWVhSTVlYbGxjazl3ZEdsdmJuTmNiaUFnWTJ4MWMzUmxjazl3ZEdsdmJuTS9PaUJNTGsxaGNtdGxjbk5EYkhWemRHVnlUM0IwYVc5dWMxeHVmVnh1WEc0dktpb2c2TDJzNVl5VzVMaTY1NE90NVlxYjVadSs1NXFFSUc5d2RHbHZibk1nS2k5Y2JtbHVkR1Z5Wm1GalpTQk5ZWEpyWlhKelNHVmhkRXhoZVdWeVQzQjBhVzl1Y3lCbGVIUmxibVJ6SUV3dVNHVmhkRXhoZVdWeVQzQjBhVzl1Y3lCN1hHNGdJR1JwYldWdWMybHZia0YwZEhJL09pQnpkSEpwYm1kY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1RXRnlhMlZ5YzB4aGVXVnlJSHRjYmlBZ2NIVmliR2xqSUcxaGNEb2dUQzVOWVhCY2JpQWdjSFZpYkdsaklHUmhkR0ZNYVhOME9pQkVZWFJoVEdsemRFbDBaVzFiWFZ4dUlDQndkV0pzYVdNZ2IzQjBhVzl1Y3pvZ1RXRnlhMlZ5YzB4aGVXVnlUM0IwYVc5dWMxeHVJQ0J3ZFdKc2FXTWdZMmhoYm01bGJFWjFibU02SUVOb1lXNXVaV3hHZFc1alhHNWNiaUFnY0hWaWJHbGpJSFI1Y0dVNklITjBjbWx1WjF4dVhHNGdJSEJ5YjNSbFkzUmxaQ0J0WVhKclpYSnpPaUJOWVhKclpYSmJYVnh1WEc0Z0lIQnliM1JsWTNSbFpDQm1iMk4xYzJWa1RXRnlhMlZ5T2lCTllYSnJaWEpjYmlBZ2NISnZkR1ZqZEdWa0lHaHZkbVZ5WldSTllYSnJaWEk2SUUxaGNtdGxjbHh1SUNBdktpb2c2WnlBNkthQjViR1Y1NlM2NTVxRTVwUys1YVNuNTVxRTVadSs1cUNISUNvdlhHNGdJSEJ5YjNSbFkzUmxaQ0JtYjJOMWMyVmtSR2x6Y0d4aGVVMWhjbXRsY2pvZ1RXRnlhMlZ5WEc0Z0lIQnliM1JsWTNSbFpDQnRZWEpyWlhKTVlYbGxjam9nVEM1RFlXNTJZWE5KWTI5dVRHRjVaWEpjYmx4dUlDQndjbTkwWldOMFpXUWdkbWx6YVdKc1pUb2dZbTl2YkdWaGJseHVJQ0J3Y205MFpXTjBaV1FnYkdGNVpYSTZYRzRnSUNBZ2ZDQk1Ma05oYm5aaGMwbGpiMjVNWVhsbGNseHVJQ0FnSUh3Z1RDNUlaV0YwVEdGNVpYSmNiaUFnSUNCOElFd3VUV0Z5YTJWeWMwTnNkWE4wWlhKY2JpQWdJQ0I4SUV3dVRHRjVaWEpIY205MWNGeHVJQ0J3Y21sMllYUmxJR2hsWVhSTVlYbGxjam9nVEM1SVpXRjBUR0Y1WlhKY2JpQWdjSEpwZG1GMFpTQmpiSFZ6ZEdWeVRHRjVaWEk2SUV3dVRXRnlhMlZ5YzBOc2RYTjBaWEpjYmx4dUlDQndjbWwyWVhSbElITmxaMjFsYm5SbFpFMXBiam9nYm5WdFltVnlYRzRnSUhCeWFYWmhkR1VnYzJWbmJXVnVkR1ZrVTNSbGNEb2diblZ0WW1WeVhHNGdJR052Ym5OMGNuVmpkRzl5S0Z4dUlDQWdJRzFoY0RvZ1RDNU5ZWEFzWEc0Z0lDQWdaR0YwWVV4cGMzUTZJRVJoZEdGTWFYTjBTWFJsYlZ0ZExGeHVJQ0FnSUc5d2RHbHZibk02SUUxaGNtdGxjbk5NWVhsbGNrOXdkR2x2Ym5Nc1hHNGdJQ0FnWTJoaGJtNWxiRVoxYm1NNklFTm9ZVzV1Wld4R2RXNWpYRzRnSUNrZ2UxeHVJQ0FnSUdOdmJuTjBJR1JsWm1GMWJIUlBjSFJwYjI1ek9pQk5ZWEpyWlhKelRHRjVaWEpQY0hScGIyNXpJRDBnZTF4dUlDQWdJQ0FnY21WdVpHVnlWSGx3WlRvZ0ozQnZhVzUwSnl4Y2JpQWdJQ0FnSUhKbGJtUmxjbEJ2YVc1MFEyOXNiM0pVZVhCbE9pQW5jMmx1WjJ4bEp5eGNiaUFnSUNBZ0lHbGpiMjVVZVhCbE9pQW5kVzVwWTI5a1pTY3NYRzRnSUNBZ0lDQnBZMjl1VTJsNlpUb2dXekl3TENBeU1GMHNYRzRnSUNBZ0lDQnBZMjl1UTJ4aGMzTTZJQ2RwWTI5dVptOXVkQ2NzWEc0Z0lDQWdJQ0JwWTI5dVEyOXNiM0k2SUNjak16TTRPRVpHSnl4Y2JpQWdJQ0FnSUdsamIyNUJibU5vYjNJNklGc3hNQ3dnTVRCZExGeHVJQ0FnSUNBZ2MyVm5iV1Z1ZEdWa1EyOXNiM0p6T2lCYkp5TXpNemc0UmtZblhTeGNiaUFnSUNBZ0lHaGxZWFJQY0hScGIyNXpPaUI3WEc0Z0lDQWdJQ0FnSUcxaGVEb2dNU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2R0WVhKclpYSW5YRzRnSUNBZ2RHaHBjeTV0WVhBZ1BTQnRZWEJjYmlBZ0lDQjBhR2x6TG1SaGRHRk1hWE4wSUQwZ1pHRjBZVXhwYzNSY2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmtaV1poZFd4MFQzQjBhVzl1Y3l3Z2IzQjBhVzl1Y3lsY2JpQWdJQ0IwYUdsekxtTm9ZVzV1Wld4R2RXNWpJRDBnWTJoaGJtNWxiRVoxYm1OY2JseHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFJ5ZFdWY2JpQWdJQ0IwYUdsekxteGhlV1Z5SUQwZ2JuVnNiRnh1SUNBZ0lIUm9hWE11Wm05amRYTmxaRTFoY210bGNpQTlJRzUxYkd4Y2JpQWdJQ0IwYUdsekxtaHZkbVZ5WldSTllYSnJaWElnUFNCdWRXeHNYRzRnSUNBZ2RHaHBjeTVtYjJOMWMyVmtSR2x6Y0d4aGVVMWhjbXRsY2lBOUlHNTFiR3hjYmlBZ0lDQjBhR2x6TG0xaGNtdGxjbk1nUFNCYlhWeHVJQ0FnSUhSb2FYTXViV0Z5YTJWeVRHRjVaWElnUFNCdWRXeHNYRzRnSUNBZ2RHaHBjeTVvWldGMFRHRjVaWElnUFNCdWRXeHNYRzRnSUNBZ2RHaHBjeTVqYkhWemRHVnlUR0Y1WlhJZ1BTQnVkV3hzWEc1Y2JpQWdJQ0IwYUdsekxuTmxaMjFsYm5SbFpFMXBiaUE5SUVsdVptbHVhWFI1WEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwWldSVGRHVndJRDBnTVZ4dVhHNGdJQ0FnTHk4ZzU3eVQ1YTJZSUhObFoyMWxiblFnNTV1NDVZV3o1cFd3NW8ydVhHNGdJQ0FnZEdocGN5NWpZV05vWlZObFoyMWxiblJRWVhKaGJYTW9LVnh1SUNBZ0lIUm9hWE11YVc1cGRFMWhjbXRsY25Nb0tWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCa2NtRjNLRzl3ZEdsdmJuTS9PaUJOWVhKclpYSnpUR0Y1WlhKUGNIUnBiMjV6S1NCN1hHNGdJQ0FnZEdocGN5NTJhWE5wWW14bElEMGdkSEoxWlZ4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZEdocGN5NXZjSFJwYjI1ekxDQnZjSFJwYjI1ektWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaSEpoZHlncFhHNGdJSDFjYmlBZ2NIVmliR2xqSUhKbFpISmhkeWdwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11ZG1semFXSnNaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG14aGVXVnlLU0I3WEc0Z0lDQWdJQ0IwYUdsekxteGhlV1Z5TG5KbGJXOTJaU2dwWEc0Z0lDQWdmVnh1SUNBZ0lITjNhWFJqYUNBb2RHaHBjeTV2Y0hScGIyNXpMbkpsYm1SbGNsUjVjR1VwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKM0J2YVc1MEp6b2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhlV1Z5SUQwZ2RHaHBjeTVqYjI1bWFXZE5ZWEpyWlhKTVlYbGxjaWdwWEc0Z0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZWE5sSUNkamJIVnpkR1Z5SnpvZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG14aGVXVnlJRDBnZEdocGN5NWpiMjVtYVdkRGJIVnpkR1Z5VEdGNVpYSW9LVnh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyRnpaU0FuYUdWaGRDYzZJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNZWGxsY2lBOUlIUm9hWE11WTI5dVptbG5TR1ZoZEV4aGVXVnlLQ2xjYmlBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHUmxabUYxYkhRNklIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQnlaVzVrWlhKVWVYQmxJT1M0amVhVXIrYU1nVndpSkh0MGFHbHpMbTl3ZEdsdmJuTXVjbVZ1WkdWeVZIbHdaWDFjSW1BcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdWJXRndMbUZrWkV4aGVXVnlLSFJvYVhNdWJHRjVaWElwWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjMlYwVDNCMGFXOXVjeWh2Y0hScGIyNXpPaUJOWVhKclpYSnpUR0Y1WlhKUGNIUnBiMjV6TENCeVpXUnlZWGNnUFNCbVlXeHpaU2tnZTF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZEdocGN5NXZjSFJwYjI1ekxDQnZjSFJwYjI1ektWeHVJQ0FnSUdsbUlDaHlaV1J5WVhjcElIdGNiaUFnSUNBZ0lIUm9hWE11Y21Wa2NtRjNLQ2xjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjSFZpYkdsaklHWnBkRUp2ZFc1a2N5Z3BJSHRjYmlBZ0lDQjBhR2x6TG0xaGNDNW1hWFJDYjNWdVpITW9kR2hwY3k1blpYUkNiM1Z1WkhNb0tTbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ1oyVjBRbTkxYm1SektDazZJRXd1VEdGMFRHNW5RbTkxYm1SelJYaHdjbVZ6YzJsdmJpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRnlhMlZ5Y3k1c1pXNW5kR2dnUEQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGd0xtZGxkRUp2ZFc1a2N5Z3BYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtMWhjbXRsY25NdWJXRndLRnh1SUNBZ0lDQWdLRzFoY210bGNpa2dQVDVjYmlBZ0lDQWdJQ0FnVzIxaGNtdGxjaTVuWlhSTVlYUk1ibWNvS1M1c1lYUXNJRzFoY210bGNpNW5aWFJNWVhSTWJtY29LUzVzYm1kZElHRnpJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMWNiaUFnSUNBcFhHNGdJSDFjYmlBZ2NIVmliR2xqSUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnTHk4Z1ZFOUVUem9nNWJDRzVMcUw1THUyNTZlNzZabWtYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHRjVaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXViR0Y1WlhJdWNtVnRiM1psS0NsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY0hWaWJHbGpJSFJ2WjJkc1pWWnBjMmxpYkdVb2RtbHphV0pzWlRvZ1ltOXZiR1ZoYmlrZ2UxeHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFpwYzJsaWJHVmNiaUFnSUNCcFppQW9JWFJvYVhNdWJHRjVaWElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbWx6YVdKc1pTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1dFlYQXVZV1JrVEdGNVpYSW9kR2hwY3k1c1lYbGxjaWxjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV0WVhBdWNtVnRiM1psVEdGNVpYSW9kR2hwY3k1c1lYbGxjaWxjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjSFZpYkdsaklHTm9ZVzVuWlVOdmJHOXlLR052Ykc5eU9pQnpkSEpwYm1jcElIdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTXVhV052YmtOdmJHOXlJRDBnWTI5c2IzSmNiaUFnSUNCMGFHbHpMbkpsWkhKaGR5Z3BYRzRnSUgxY2JpQWdjSFZpYkdsaklHTm9ZVzVuWlVsamIyNG9hV052YmxWdWFXTnZaR1U2SUhOMGNtbHVaeWtnZTF4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3k1cFkyOXVWVzVwWTI5a1pTQTlJR2xqYjI1VmJtbGpiMlJsWEc0Z0lDQWdkR2hwY3k1eVpXUnlZWGNvS1Z4dUlDQjlYRzRnSUM4cUtpRG11TExtbjVQa3VMcm1sYVBuZ3JubG03NGdLaTljYmlBZ2NISnZkR1ZqZEdWa0lHTnZibVpwWjAxaGNtdGxja3hoZVdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUdOaGJuWmhjMGxqYjI1TVlYbGxjaUE5SUV3dVkyRnVkbUZ6U1dOdmJreGhlV1Z5S0h0OUtTNWhaR1JVYnloMGFHbHpMbTFoY0NsY2JpQWdJQ0F2THlEbXQ3dmxpcURuZ3JubGg3dmt1b3ZrdTdaY2JpQWdJQ0JqWVc1MllYTkpZMjl1VEdGNVpYSXVZV1JrVDI1RGJHbGphMHhwYzNSbGJtVnlLQ2hmTENCYmV5QmtZWFJoT2lCdFlYSnJaWElnZlYwcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdWJXRnlhMlZ5UTJ4cFkydElZVzVrYkdWeUtHMWhjbXRsY2lCaGN5Qk5ZWEpyWlhJcFhHNGdJQ0FnZlNsY2JpQWdJQ0F2THlEbXQ3dmxpcUFnYUc5MlpYSWc1THFMNUx1MlhHNGdJQ0FnWTJGdWRtRnpTV052Ymt4aGVXVnlMbUZrWkU5dVNHOTJaWEpNYVhOMFpXNWxjaWdvWHl3Z1czc2daR0YwWVRvZ2JXRnlhMlZ5SUgxZEtTQTlQaUI3WEc0Z0lDQWdJQ0F2THlEa3VZdmxpWTNtbklrZ2FHOTJaWElnNTVxRTVZV3o2WmV0SUhSdmIyeDBhWEJjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbWh2ZG1WeVpXUk5ZWEpyWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b2IzWmxjbVZrVFdGeWEyVnlMbU5zYjNObFZHOXZiSFJwY0NncFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbWh2ZG1WeVpXUk5ZWEpyWlhJZ1BTQnRZWEpyWlhJZ1lYTWdUV0Z5YTJWeVhHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtaHZkbVZ5WldSTllYSnJaWEl1WjJWMFZHOXZiSFJwY0NncEtTQjdYRzRnSUNBZ0lDQWdJQzh2SU9XbWd1YWVuT1czc3VlN2oraXV2dWU5cmlCMGIyOXNkR2x3SU9lYnRPYU9wZVd4bGVla3VpQjBiMjlzZEdsd1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUc5MlpYSmxaRTFoY210bGNpNXZjR1Z1Vkc5dmJIUnBjQ2dwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlEbGtLYmxpSm5udTVIbHJwb2dkRzl2YkhScGNDRGx1YmJsc1pYbnBMcGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NTBiMjlzZEdsd1FYUjBjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YUc5MlpYSmxaRTFoY210bGNpNWlhVzVrVkc5dmJIUnBjQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDY25JQ3NnZEdocGN5NW9iM1psY21Wa1RXRnlhMlZ5TG1kbGRFUmhkR0VvS1Z0MGFHbHpMbTl3ZEdsdmJuTXVkRzl2YkhScGNFRjBkSEpkWEc0Z0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTbGNiaUFnSUNCallXNTJZWE5KWTI5dVRHRjVaWEl1WVdSa1RXRnlhMlZ5Y3loMGFHbHpMbTFoY210bGNuTXBYRzVjYmlBZ0lDQjBhR2x6TG0xaGNDNXZiaWduZW05dmJYTjBZWEowSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YkdGNVpYSWdQVDA5SUhSb2FYTXViV0Z5YTJWeVRHRjVaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhBdWNtVnRiM1psVEdGNVpYSW9kR2hwY3k1dFlYSnJaWEpNWVhsbGNpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0FnSUhSb2FYTXViV0Z3TG05dUtDZDZiMjl0Wlc1a0p5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJHRjVaWElnUFQwOUlIUm9hWE11YldGeWEyVnlUR0Y1WlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlYQXVZV1JrVEdGNVpYSW9kR2hwY3k1dFlYSnJaWEpNWVhsbGNpbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVYRzRnSUNBZ0x5OGc2S2VqNVlhejVZaWQ1cXloNXJpeTVwK1Q1TGlONVllNjVadSs1cUNINlpldTZhS1lYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNCMGFHbHpMbTFoY0M1d1lXNVVieWgwYUdsekxtMWhjQzVuWlhSRFpXNTBaWElvS1NsY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnZEdocGN5NXRZWEpyWlhKTVlYbGxjaUE5SUdOaGJuWmhjMGxqYjI1TVlYbGxjbHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTFoY210bGNreGhlV1Z5WEc0Z0lIMWNiaUFnY0hKdmRHVmpkR1ZrSUdkbGRGUnZiMnhVYVhCRGIyNTBaVzUwS0dSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuSnlBcklHUmhkR0ZiZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCQmRIUnlYVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdhVzVwZEUxaGNtdGxjbk1vS1NCN1hHNGdJQ0FnZEdocGN5NWtZWFJoVEdsemRDNW1iM0pGWVdOb0tDaGtZWFJoS1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUV3dVoyVnZTbE5QVGloa1lYUmhMbWRsYjIxbGRISjVLUzVuWlhSTVlYbGxjbk1vS1Zzd1hWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCdFlYSnJaWElnUFNCdVpYY2dUV0Z5YTJWeUtGeHVJQ0FnSUNBZ0lDQmJYRzRnSUNBZ0lDQWdJQ0FnS0d4aGVXVnlJR0Z6SUV3dVRXRnlhMlZ5S1M1blpYUk1ZWFJNYm1jb0tTNXNZWFFzWEc0Z0lDQWdJQ0FnSUNBZ0tHeGhlV1Z5SUdGeklFd3VUV0Z5YTJWeUtTNW5aWFJNWVhSTWJtY29LUzVzYm1jc1hHNGdJQ0FnSUNBZ0lGMHNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCcFkyOXVPaUIwYUdsekxtZGxkRTFoY210bGNrbGpiMjRvWkdGMFlTa3NYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ2xjYmx4dUlDQWdJQ0FnTHk4ZzViQ0c1NXU0NVlXejVZQzg1N3VSNWE2YTVZaXdJRzFoY210bGN1UzRpbHh1SUNBZ0lDQWdiV0Z5YTJWeUxuTmxkRVJoZEdFb1pHRjBZU2xjYmx4dUlDQWdJQ0FnZEdocGN5NXRZWEpyWlhKekxuQjFjMmdvYldGeWEyVnlLVnh1SUNBZ0lIMHBYRzRnSUgxY2JpQWdMeThnNWFTRTU1Q0dJRzFoY210bGNpRG5ncm5saDd2a3Vvdmt1N1pjYmlBZ2NISnBkbUYwWlNCdFlYSnJaWEpEYkdsamEwaGhibVJzWlhJb2JXRnlhMlZ5T2lCTllYSnJaWElwSUh0Y2JpQWdJQ0IwYUdsekxtWnZZM1Z6WldSTllYSnJaWElnUFNCdFlYSnJaWEpjYmlBZ0lDQXZMeURsaUtEcG1hVGxpWTNrdUlEa3VLcm1sTDdscEtmbG03N21vSWRjYmlBZ0lDQnBaaUFvZEdocGN5NW1iMk4xYzJWa1JHbHpjR3hoZVUxaGNtdGxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NW1iMk4xYzJWa1JHbHpjR3hoZVUxaGNtdGxjaTV5WlcxdmRtVkdjbTl0S0hSb2FYTXViV0Z3S1Z4dUlDQWdJSDFjYmlBZ0lDQXZMeURubEovbWlKRGx2WlBsaVkzbWxMN2xwS2ZsbTc3bW9JZGNiaUFnSUNCMGFHbHpMbVp2WTNWelpXUkVhWE53YkdGNVRXRnlhMlZ5SUQwZ2JtVjNJRTFoY210bGNpaHRZWEpyWlhJdVoyVjBUR0YwVEc1bktDa3NJSHRjYmlBZ0lDQWdJR2xqYjI0NklIUm9hWE11WjJWMFRHRnlaMlZ5VFdGeWEyVnlTV052YmlodFlYSnJaWEl1WjJWMFJHRjBZU2dwS1N4Y2JpQWdJQ0I5S1Z4dUlDQWdJSFJvYVhNdVptOWpkWE5sWkVScGMzQnNZWGxOWVhKclpYSXVZV1JrVkc4b2RHaHBjeTV0WVhBcFhHNWNiaUFnSUNCMGFHbHpMbVp2WTNWelpXUkVhWE53YkdGNVRXRnlhMlZ5WEc0Z0lDQWdJQ0F1WW1sdVpGQnZjSFZ3S0hSb2FYTXVaMlYwVUc5d2RYQkRiMjUwWlc1MEtHMWhjbXRsY2k1blpYUkVZWFJoS0NrcEtWeHVJQ0FnSUNBZ0xtOXdaVzVRYjNCMWNDZ3BYRzRnSUNBZ2RHaHBjeTVtYjJOMWMyVmtSR2x6Y0d4aGVVMWhjbXRsY2k1dmJpZ25jRzl3ZFhCamJHOXpaU2NzSUNncElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVptOWpkWE5sWkVScGMzQnNZWGxOWVhKclpYSXVjbVZ0YjNabEtDbGNiaUFnSUNCOUtWeHVYRzRnSUNBZ2RHaHBjeTV0WVhBdWNHRnVWRzhvZEdocGN5NW1iMk4xYzJWa1RXRnlhMlZ5TG1kbGRFeGhkRXh1WnlncEtWeHVJQ0FnSUhSb2FYTXVZMmhoYm01bGJFWjFibU1vSjI5dUxXTnNhV05yTFcxaGNtdGxjaWNzSUcxaGNtdGxjaWxjYmlBZ2ZWeHVJQ0J3Y21sMllYUmxJR052Ym1acFowTnNkWE4wWlhKTVlYbGxjaWdwSUh0Y2JpQWdJQ0F2THlEbHNaWG5wTHJvZ1pybGtJamxtNzdsc1lKY2JpQWdJQ0IwYUdsekxtTnNkWE4wWlhKTVlYbGxjaUE5SUV3dWJXRnlhMlZ5UTJ4MWMzUmxja2R5YjNWd0tDbGNiaUFnSUNCMGFHbHpMbU5zZFhOMFpYSk1ZWGxsY2k1aFpHUk1ZWGxsY25Nb1hHNGdJQ0FnSUNCMGFHbHpMbTFoY210bGNuTXViV0Z3S0NodEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzFoY210bGNpQTlJRzVsZHlCTllYSnJaWElvYlM1blpYUk1ZWFJNYm1jb0tTd2dlMXh1SUNBZ0lDQWdJQ0FnSUdsamIyNDZJSFJvYVhNdVoyVjBUV0Z5YTJWeVNXTnZiaWh0TG1kbGRFUmhkR0VvS1Nrc1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJRzFoY210bGNpNXpaWFJFWVhSaEtHMHVaMlYwUkdGMFlTZ3BLVnh1SUNBZ0lDQWdJQ0J0WVhKclpYSXVZbWx1WkZSdmIyeDBhWEFvSnljZ0t5QnRZWEpyWlhJdVoyVjBSR0YwWVNncFczUm9hWE11YjNCMGFXOXVjeTUwYjI5c2RHbHdRWFIwY2wwcFhHNGdJQ0FnSUNBZ0lHMWhjbXRsY2k1dmJpZ25ZMnhwWTJzbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFlYSnJaWEpEYkdsamEwaGhibVJzWlhJb2JXRnlhMlZ5S1Z4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRnlhMlZ5WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ2xjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkhWemRHVnlUR0Y1WlhKY2JpQWdmVnh1WEc0Z0lDOHFLaURtdUxMbW41UGt1THJuZzYzbGlwdmxtNzRnS2k5Y2JpQWdjSEpwZG1GMFpTQmpiMjVtYVdkSVpXRjBUR0Y1WlhJb0tTQjdYRzRnSUNBZ2RHaHBjeTV0WVhKclpYSnpMbVp2Y2tWaFkyZ29LRzFoY210bGNpa2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdiR0YwVEc1bklEMGdiV0Z5YTJWeUxtZGxkRXhoZEV4dVp5Z3BYRzRnSUNBZ0lDQmpiMjV6ZENCa2FXMWxibk5wYjI1QmRIUnlJRDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxtaGxZWFJQY0hScGIyNXpJQ1ltSUhSb2FYTXViM0IwYVc5dWN5NW9aV0YwVDNCMGFXOXVjeTVrYVcxbGJuTnBiMjVCZEhSeVhHNGdJQ0FnSUNCc1pYUWdZV3gwSUQwZ2JXRnlhMlZ5TG1kbGRFUmhkR0VvS1Z0a2FXMWxibk5wYjI1QmRIUnlYVnh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJoYkhRZ0lUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUdGc2RDQTlJSFJvYVhNdWIzQjBhVzl1Y3k1b1pXRjBUM0IwYVc5dWN5NXRZWGhjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzFoY210bGNpNXpaWFJNWVhSTWJtY29UQzVzWVhSTWJtY29iR0YwVEc1bkxteGhkQ3dnYkdGMFRHNW5MbXh1Wnl3Z1lXeDBLU2xjYmlBZ0lDQjlLVnh1SUNBZ0lIUm9hWE11YUdWaGRFeGhlV1Z5SUQwZ1RDNW9aV0YwVEdGNVpYSW9YRzRnSUNBZ0lDQjBhR2x6TG0xaGNtdGxjbk11YldGd0tDaHBkQ2tnUFQ0Z2FYUXVaMlYwVEdGMFRHNW5LQ2twTEZ4dUlDQWdJQ0FnZEdocGN5NXZjSFJwYjI1ekxtaGxZWFJQY0hScGIyNXpYRzRnSUNBZ0tWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGxZWFJNWVhsbGNseHVJQ0I5WEc1Y2JpQWdjSEpwZG1GMFpTQm5aWFJNWVhKblpYSk5ZWEpyWlhKSlkyOXVLR1JoZEdFNklFUmhkR0ZNYVhOMFNYUmxiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5blpYUk5ZWEpyWlhKSlkyOXVLR1JoZEdFc0lIUnlkV1VwWEc0Z0lIMWNibHh1SUNCd2NtbDJZWFJsSUdkbGRFMWhjbXRsY2tsamIyNG9aR0YwWVRvZ1JHRjBZVXhwYzNSSmRHVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJkbGRFMWhjbXRsY2tsamIyNG9aR0YwWVN3Z1ptRnNjMlVwWEc0Z0lIMWNibHh1SUNBdktpb2c2STYzNVkrVzViMlQ1WW1OSUcxaGNtdGxjaURwbklEb3BvSGxzWlhucExybm1vUWdhV052YmlBcUwxeHVJQ0J3Y21sMllYUmxJRjluWlhSTllYSnJaWEpKWTI5dUtGeHVJQ0FnSUdSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlN4Y2JpQWdJQ0JwYzB4aGNtZGxjam9nWW05dmJHVmhibHh1SUNBcE9pQk1Ma2xqYjI0Z2ZDQk1Ma1JwZGtsamIyNGdlMXh1SUNBZ0lHeGxkQ0JwWTI5dVUybDZaU0E5SUhSb2FYTXViM0IwYVc5dWN5NXBZMjl1VTJsNlpWeHVJQ0FnSUd4bGRDQnBZMjl1UVc1amFHOXlJRDBnZEdocGN5NXZjSFJwYjI1ekxtbGpiMjVCYm1Ob2IzSmNiaUFnSUNCcFkyOXVVMmw2WlNBOUlHbHpUR0Z5WjJWeUlEOGdXMmxqYjI1VGFYcGxXekJkSUNvZ01TNDFMQ0JwWTI5dVUybDZaVnN4WFNBcUlERXVOVjBnT2lCcFkyOXVVMmw2WlZ4dUlDQWdJR2xqYjI1QmJtTm9iM0lnUFNCcGMweGhjbWRsY2x4dUlDQWdJQ0FnUHlCYmFXTnZia0Z1WTJodmNsc3dYU0FxSURFdU5Td2dhV052YmtGdVkyaHZjbHN4WFNBcUlERXVOVjFjYmlBZ0lDQWdJRG9nYVdOdmJrRnVZMmh2Y2x4dVhHNGdJQ0FnWTI5dWMzUWdhV052YmtOdmJHOXlJRDBnZEdocGN5NXZjSFJwYjI1ekxtbGpiMjVEYjJ4dmNseHVYRzRnSUNBZ2MzZHBkR05vSUNoMGFHbHpMbTl3ZEdsdmJuTXVhV052YmxSNWNHVXBJSHRjYmlBZ0lDQWdJR05oYzJVZ0oybHRZV2RsSnpvZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1RDNXBZMjl1S0h0Y2JpQWdJQ0FnSUNBZ0lDQnBZMjl1VlhKc09pQjBhR2x6TG05d2RHbHZibk11YVdOdmJrbHRZV2RsVlhKc0xGeHVJQ0FnSUNBZ0lDQWdJR2xqYjI1VGFYcGxMRnh1SUNBZ0lDQWdJQ0FnSUdsamIyNUJibU5vYjNJc1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZWE5sSUNkbWIyNTBYMk5zWVhOekp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNONWJXSnZiQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZDFibWxqYjJSbEp6b2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUQzVrYVhaSlkyOXVLSHRjYmlBZ0lDQWdJQ0FnSUNCb2RHMXNPaUIwYUdsekxtZGxkRU4xYzNSdmJVbGpiMjVJVkUxTUtHUmhkR0VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xqYjI1VGFYcGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXTnZia052Ykc5eUxGeHVJQ0FnSUNBZ0lDQWdJSDBwTEZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUb2dhWE5NWVhKblpYSWdQeUFuYkdGeVoyVXRaR2wyTFdsamIyNHRiV0Z5YTJWeUp5QTZJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lHbGpiMjVUYVhwbExGeHVJQ0FnSUNBZ0lDQWdJR2xqYjI1QmJtTm9iM0lzWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2lCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZzVadSs1cUNINTdHNzVaNkw1TGlONXBTdjVveUJYQ0lrZTNSb2FYTXViM0IwYVc5dWN5NXBZMjl1Vkhsd1pYMWNJbUFwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdaMlYwUTNWemRHOXRTV052YmtoVVRVd29YRzRnSUNBZ1pHRjBZVG9nUkdGMFlVeHBjM1JKZEdWdExGeHVJQ0FnSUc5d2RHbHZibk0vT2lCSlkyOXVVbVZ1WkdWeVJuVnVZMDl3ZEdsdmJseHVJQ0FwT2lCemRISnBibWNnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbTl3ZEdsdmJuTXVhV052YmxKbGJtUmxjbVZ5S1NCN1hHNGdJQ0FnSUNCdmNIUnBiMjV6SUQwZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z2RHaHBjeTV2Y0hScGIyNXpMQ0J2Y0hScGIyNXpLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjeTVwWTI5dVVtVnVaR1Z5WlhJb1pHRjBZU3dnYjNCMGFXOXVjeWxjYmlBZ0lDQjlYRzRnSUNBZ2MzZHBkR05vSUNoMGFHbHpMbTl3ZEdsdmJuTXVjbVZ1WkdWeVVHOXBiblJEYjJ4dmNsUjVjR1VwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKM05wYm1kc1pTYzZJSHRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2gwYUdsekxtOXdkR2x2Ym5NdWFXTnZibFI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlEa3ZiL25sS2dnWTJ4aGMzTmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZG1iMjUwWDJOc1lYTnpKem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHa2dZMnhoYzNNOVhDSWtlM1JvYVhNdWIzQjBhVzl1Y3k1cFkyOXVRMnhoYzNOOVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlQxY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJNklDUjdiM0IwYVc5dWN5NXBZMjl1UTI5c2IzSjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRDMXphWHBsT2lBa2UyOXdkR2x2Ym5NdWFXTnZibE5wZW1WYk1GMTljSGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnWUZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0F2THlEa3ZiL25sS2dnYzNablhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmMzbHRZbTlzSnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE4yWnlCamJHRnpjejFjSW1samIyNHRjM2x0WW05c1hDSWdZWEpwWVMxb2FXUmtaVzQ5WENKMGNuVmxYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhWelpTQjRiR2x1YXpwb2NtVm1QVndpSkh0MGFHbHpMbTl3ZEdsdmJuTXVhV052YmxONWJXSnZiSDFjSWlBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwzTjJaejVjYmlBZ0lDQWdJQ0FnSUNBZ0lHQmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGc1TDIvNTVTb0lIVnVhV052WkdWY2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkMWJtbGpiMlJsSnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQR2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemN6MWNJaVI3ZEdocGN5NXZjSFJwYjI1ekxtbGpiMjVEYkdGemMzMWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqb2dKSHR2Y0hScGIyNXpMbWxqYjI1RGIyeHZjbjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBMWE5wZW1VNklDUjdiM0IwYVc5dWN5NXBZMjl1VTJsNlpWc3dYWDF3ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtlM1JvYVhNdWIzQjBhVzl1Y3k1cFkyOXVWVzVwWTI5a1pYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXBQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lGeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMkZ6WlNBbmMyVm5iV1Z1ZEdWa0p6b2dlMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFJvYVhNdWIzQjBhVzl1Y3k1cFkyOXVWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SU9TOXYrZVVxQ0JqYkdGemMxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyWnZiblJmWTJ4aGMzTW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGFWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56UFZ3aUpIdDBhR2x6TG05d2RHbHZibk11YVdOdmJrTnNZWE56ZlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5WENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5T2lBa2UzUm9hWE11WjJWMFUyVm5iV1Z1ZEdWa1RXRnlhMlZ5UTI5c2IzSW9aR0YwWVNsOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl1ZEMxemFYcGxPaUFrZTI5d2RHbHZibk11YVdOdmJsTnBlbVZiTUYxOWNIZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdZRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQXZMeURrdmIvbmxLZ2djM1puWEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzNsdFltOXNKem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BITjJaeUJqYkdGemN6MWNJbWxqYjI0dGMzbHRZbTlzWENJZ1lYSnBZUzFvYVdSa1pXNDlYQ0owY25WbFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFZ6WlNCNGJHbHVhenBvY21WbVBWd2lKSHQwYUdsekxtOXdkR2x2Ym5NdWFXTnZibE41YldKdmJIMWNJaUF2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNOMlp6NWNiaUFnSUNBZ0lDQWdJQ0FnSUdCY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnTHk4ZzVMMi81NVNvSUhWdWFXTnZaR1ZjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2QxYm1samIyUmxKem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6Y3oxY0lpUjdkR2hwY3k1dmNIUnBiMjV6TG1samIyNURiR0Z6YzMxY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2pvZ0pIdDBhR2x6TG1kbGRGTmxaMjFsYm5SbFpFMWhjbXRsY2tOdmJHOXlLR1JoZEdFcGZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Ym5RdGMybDZaVG9nSkh0dmNIUnBiMjV6TG1samIyNVRhWHBsV3pCZGZYQjRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNSN2RHaHBjeTV2Y0hScGIyNXpMbWxqYjI1VmJtbGpiMlJsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJrK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2lCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQmdjbVZ1WkdWeVVHOXBiblJEYjJ4dmNsUjVjR1VnNUxpTjVwU3Y1b3lCWENJa2UzUm9hWE11YjNCMGFXOXVjeTV5Wlc1a1pYSlFiMmx1ZEVOdmJHOXlWSGx3WlgxY0ltQmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQndjbWwyWVhSbElHTmhZMmhsVTJWbmJXVnVkRkJoY21GdGN5Z3BJSHRjYmlBZ0lDQmpiMjV6ZENCelpXZHRaVzUwWldSTVpXNW5kR2dnUFNCMGFHbHpMbTl3ZEdsdmJuTXVjMlZuYldWdWRHVmtRMjlzYjNKekxteGxibWQwYUZ4dUlDQWdJR3hsZENCdFlYaFdZV3dnUFNBdFNXNW1hVzVwZEhsY2JpQWdJQ0JzWlhRZ2JXbHVWbUZzSUQwZ1NXNW1hVzVwZEhsY2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUdSaGRHRWdiMllnZEdocGN5NWtZWFJoVEdsemRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RtRnNJRDBnWkdGMFlWdDBhR2x6TG05d2RHbHZibk11YzJWbmJXVnVkR1ZrUVhSMGNsMWNiaUFnSUNBZ0lHMWhlRlpoYkNBOUlFMWhkR2d1YldGNEtHMWhlRlpoYkN3Z2RtRnNLVnh1SUNBZ0lDQWdiV2x1Vm1Gc0lEMGdUV0YwYUM1dGFXNG9iV2x1Vm1Gc0xDQjJZV3dwWEc0Z0lDQWdmVnh1SUNBZ0lHTnZibk4wSUhOMFpYQWdQU0FvYldGNFZtRnNJQzBnYldsdVZtRnNJQ3NnTVNrZ0x5QnpaV2R0Wlc1MFpXUk1aVzVuZEdoY2JpQWdJQ0IwYUdsekxuTmxaMjFsYm5SbFpFMXBiaUE5SUcxcGJsWmhiRnh1SUNBZ0lIUm9hWE11YzJWbmJXVnVkR1ZrVTNSbGNDQTlJSE4wWlhCY2JpQWdmVnh1SUNCd2NtbDJZWFJsSUdkbGRGTmxaMjFsYm5SbFpFMWhjbXRsY2tOdmJHOXlLR1JoZEdFNklFUmhkR0ZNYVhOMFNYUmxiU2s2SUhOMGNtbHVaeUI3WEc0Z0lDQWdZMjl1YzNRZ2RtRnNJRDBnWkdGMFlWdDBhR2x6TG05d2RHbHZibk11YzJWbmJXVnVkR1ZrUVhSMGNsMWNiaUFnSUNCamIyNXpkQ0JqYjJ4dmNpQTlJSFJvYVhNdWIzQjBhVzl1Y3k1elpXZHRaVzUwWldSRGIyeHZjbk5iWEc0Z0lDQWdJQ0FvZG1Gc0lDMGdkR2hwY3k1elpXZHRaVzUwWldSTmFXNHBJQzhnZEdocGN5NXpaV2R0Wlc1MFpXUlRkR1Z3WEc0Z0lDQWdYVnh1SUNBZ0lISmxkSFZ5YmlCamIyeHZjbHh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdaMlYwVUc5d2RYQkRiMjUwWlc1MEtHUmhkR0U2SUVSaGRHRk1hWE4wU1hSbGJTa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXZjSFJwYjI1ekxuQnZjSFZ3UVhSMGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDY25YRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJnSkh0MGFHbHpMbTl3ZEdsdmJuTXVjRzl3ZFhCQmRIUnlmVG9nSkh0a1lYUmhXM1JvYVhNdWIzQjBhVzl1Y3k1d2IzQjFjRUYwZEhKZGZXQmNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUkdGMFlVeHBjM1JKZEdWdElIMGdabkp2YlNBbkxpNHZaR1ZtYVc1cGRHbHZibk1uWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ2YkhsbmIyNGdaWGgwWlc1a2N5Qk1MbEJ2YkhsbmIyNGdlMXh1SUNBdkx5QjBjMnhwYm5RNlpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VNmRtRnlhV0ZpYkdVdGJtRnRaVnh1SUNCd2NtbDJZWFJsSUY5ZlpHRjBZVG9nUkdGMFlVeHBjM1JKZEdWdFhHNGdJR052Ym5OMGNuVmpkRzl5S0Z4dUlDQWdJR3hoZEd4dVozTTZYRzRnSUNBZ0lDQjhJRXd1VEdGMFRHNW5SWGh3Y21WemMybHZibHRkWEc0Z0lDQWdJQ0I4SUV3dVRHRjBURzVuUlhod2NtVnpjMmx2Ymx0ZFcxMWNiaUFnSUNBZ0lId2dUQzVNWVhSTWJtZEZlSEJ5WlhOemFXOXVXMTFiWFZ0ZExGeHVJQ0FnSUc5d2RHbHZibk0vT2lCTUxsQnZiSGxzYVc1bFQzQjBhVzl1YzF4dUlDQXBJSHRjYmlBZ0lDQnpkWEJsY2loc1lYUnNibWR6TENCdmNIUnBiMjV6S1Z4dUlDQjlYRzRnSUhCMVlteHBZeUJ6WlhSRVlYUmhLR1JoZEdFNklFUmhkR0ZNYVhOMFNYUmxiU2tnZTF4dUlDQWdJSFJvYVhNdVgxOWtZWFJoSUQwZ1pHRjBZVnh1SUNCOVhHNGdJSEIxWW14cFl5Qm5aWFJFWVhSaEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlmWkdGMFlWeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdleUJFWVhSaFRHbHpkRWwwWlcwc0lFTm9ZVzV1Wld4R2RXNWpJSDBnWm5KdmJTQW5MaTR2WkdWbWFXNXBkR2x2Ym5NblhHNXBiWEJ2Y25RZ1VHOXNlV2R2YmlCbWNtOXRJQ2N1TDFCdmJIbG5iMjRuWEc1Y2JpOHFLaURtdUxMbW41UHBvcHpvaWJMbW9MZmx2SThnNVkyVjZJbXlmT1dJaHVhdXRTQXFMMXh1ZEhsd1pTQlFiMng1WjI5dVRHRjVaWEpTWlc1a1pYSkRiMnh2Y2xSNWNHVWdQU0FuYzJsdVoyeGxKeUI4SUNkelpXZHRaVzUwWldRblhHNXBiblJsY21aaFkyVWdVRzlzZVdkdmJreGhlV1Z5VDNCMGFXOXVjeUJsZUhSbGJtUnpJRXd1VUc5c2VXeHBibVZQY0hScGIyNXpJSHRjYmlBZ2NtVnVaR1Z5VUc5c2VXZHZia052Ykc5eVZIbHdaVG9nVUc5c2VXZHZia3hoZVdWeVVtVnVaR1Z5UTI5c2IzSlVlWEJsWEc1Y2JpQWdMeW9xSUhCdmNIVndJT1d4bGVla3V1V3RsK2F1dFNBcUwxeHVJQ0J3YjNCMWNFRjBkSEkvT2lCemRISnBibWRjYmlBZ0x5b3FJSFJ2YjJ4MGFYQWc1YkdWNTZTNjVhMlg1cTYxSUNvdlhHNGdJSFJ2YjJ4MGFYQkJkSFJ5UHpvZ2MzUnlhVzVuWEc1Y2JpQWdiM0JoWTJsMGVUODZJRzUxYldKbGNseHVYRzRnSUM4cUtpRGxpSWJtcnJYbXVMTG1uNVBudTUvb3JxSGxyWmZtcnJVZ0tpOWNiaUFnYzJWbmJXVnVkR1ZrUVhSMGNqODZJSE4wY21sdVoxeHVJQ0J6WldkdFpXNTBaV1JEYjJ4dmNuTS9PaUJ6ZEhKcGJtZGJYVnh1ZlZ4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVRzlzZVdkdmJuTk1ZWGxsY2lCN1hHNGdJSEIxWW14cFl5QjBlWEJsT2lCemRISnBibWRjYmx4dUlDQndjbTkwWldOMFpXUWdkbWx6YVdKc1pUb2dZbTl2YkdWaGJseHVJQ0J3Y205MFpXTjBaV1FnYkdGNVpYSTZJRXd1VEdGNVpYSkhjbTkxY0Z4dVhHNGdJSEJ5YVhaaGRHVWdiV0Z3T2lCTUxrMWhjRnh1SUNCd2NtbDJZWFJsSUdSaGRHRk1hWE4wT2lCRVlYUmhUR2x6ZEVsMFpXMWJYVnh1SUNCd2NtbDJZWFJsSUc5d2RHbHZibk02SUZCdmJIbG5iMjVNWVhsbGNrOXdkR2x2Ym5OY2JpQWdjSEpwZG1GMFpTQmphR0Z1Ym1Wc1JuVnVZem9nUTJoaGJtNWxiRVoxYm1OY2JpQWdjSEpwZG1GMFpTQndiMng1WjI5dWN6b2dVRzlzZVdkdmJsdGRYRzRnSUhCeWFYWmhkR1VnYzJWbmJXVnVkR1ZrVFdsdU9pQnVkVzFpWlhKY2JpQWdjSEpwZG1GMFpTQnpaV2R0Wlc1MFpXUlRkR1Z3T2lCdWRXMWlaWEpjYmlBZ0x5OGdjSEpwZG1GMFpTQm1iMk4xYzJWa1VHOXNlV2R2YmpvZ1VHOXNlV2R2Ymx4dUlDQndjbWwyWVhSbElIQnZiSGxuYjI1TVlYbGxjam9nVEM1TVlYbGxja2R5YjNWd1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1hHNGdJQ0FnYldGd09pQk1MazFoY0N4Y2JpQWdJQ0JrWVhSaFRHbHpkRG9nUkdGMFlVeHBjM1JKZEdWdFcxMHNYRzRnSUNBZ2IzQjBhVzl1Y3pvZ1VHOXNlV2R2Ymt4aGVXVnlUM0IwYVc5dWN5eGNiaUFnSUNCamFHRnVibVZzUm5WdVl6b2dRMmhoYm01bGJFWjFibU5jYmlBZ0tTQjdYRzRnSUNBZ1kyOXVjM1FnWkdWbVlYVnNkRTl3ZEdsdmJuTTZJRkJ2YkhsbmIyNU1ZWGxsY2s5d2RHbHZibk1nUFNCN1hHNGdJQ0FnSUNCamIyeHZjam9nSnlNek16ZzRSa1luTEZ4dUlDQWdJQ0FnY21WdVpHVnlVRzlzZVdkdmJrTnZiRzl5Vkhsd1pUb2dKM05wYm1kc1pTY3NYRzRnSUNBZ0lDQnpaV2R0Wlc1MFpXUkRiMnh2Y25NNklGc25Jek16T0RoR1JpZGRMRnh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW5jRzlzZVdkdmJpZGNiaUFnSUNCMGFHbHpMbTFoY0NBOUlHMWhjRnh1SUNBZ0lIUm9hWE11WkdGMFlVeHBjM1FnUFNCa1lYUmhUR2x6ZEZ4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5OY2JpQWdJQ0IwYUdsekxtTm9ZVzV1Wld4R2RXNWpJRDBnWTJoaGJtNWxiRVoxYm1OY2JseHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFJ5ZFdWY2JpQWdJQ0IwYUdsekxuQnZiSGxuYjI1eklEMGdXMTFjYmlBZ0lDQjBhR2x6TG5ObFoyMWxiblJsWkUxcGJpQTlJRWx1Wm1sdWFYUjVYRzRnSUNBZ2RHaHBjeTV6WldkdFpXNTBaV1JUZEdWd0lEMGdNVnh1SUNBZ0lDOHZJSFJvYVhNdVptOWpkWE5sWkZCdmJIbG5iMjRnUFNCdWRXeHNYRzVjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk1nUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCa1pXWmhkV3gwVDNCMGFXOXVjeXdnYjNCMGFXOXVjeWxjYmx4dUlDQWdJQzh2SU9lOGsrV3RtQ0J6WldkdFpXNTBJT2VidU9XRnMrYVZzT2FOcmx4dUlDQWdJSFJvYVhNdVkyRmphR1ZUWldkdFpXNTBVR0Z5WVcxektDbGNiaUFnSUNCMGFHbHpMbWx1YVhSUWIyeDVaMjl1Y3lncFhHNGdJSDFjYmlBZ2NIVmliR2xqSUdSeVlYY29iM0IwYVc5dWN6ODZJRkJ2YkhsbmIyNU1ZWGxsY2s5d2RHbHZibk1wSUh0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0hSb2FYTXViM0IwYVc5dWN5d2diM0IwYVc5dWN5bGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1J5WVhjb0tWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCeVpXUnlZWGNvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5acGMybGliR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kR2hwY3k1c1lYbGxjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NXNZWGxsY2k1eVpXMXZkbVVvS1Z4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG14aGVXVnlJRDBnZEdocGN5NWpiMjVtYVdkUWIyeDVaMjl1VEdGNVpYSW9LVnh1SUNBZ0lIUm9hWE11YldGd0xtRmtaRXhoZVdWeUtIUm9hWE11YkdGNVpYSXBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dUlDQndkV0pzYVdNZ1ptbDBRbTkxYm1SektDa2dlMXh1SUNBZ0lIUm9hWE11YldGd0xtWnBkRUp2ZFc1a2N5aDBhR2x6TG1kbGRFSnZkVzVrY3lncEtWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCblpYUkNiM1Z1WkhNb0tUb2dUQzVNWVhSTWJtZENiM1Z1WkhORmVIQnlaWE56YVc5dUlIdGNiaUFnSUNCcFppQW9kR2hwY3k1d2IyeDVaMjl1Y3k1c1pXNW5kR2dnUEQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YldGd0xtZGxkRUp2ZFc1a2N5Z3BYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnZiSGxuYjI1ekxuSmxaSFZqWlNoY2JpQWdJQ0FnSUNod2NtVjJMQ0JqZFhKeUtTQTlQaUJ3Y21WMkxtVjRkR1Z1WkNoamRYSnlMbWRsZEVKdmRXNWtjeWdwS1N4Y2JpQWdJQ0FnSUhSb2FYTXVjRzlzZVdkdmJuTmJNRjB1WjJWMFFtOTFibVJ6S0NsY2JpQWdJQ0FwWEc0Z0lIMWNiaUFnY0hWaWJHbGpJR1JsYzNSeWIza29LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXViR0Y1WlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11YkdGNVpYSXVjbVZ0YjNabEtDbGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NIVmliR2xqSUhSdloyZHNaVlpwYzJsaWJHVW9kbWx6YVdKc1pUb2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lIUm9hWE11ZG1semFXSnNaU0E5SUhacGMybGliR1ZjYmlBZ0lDQnBaaUFvSVhSb2FYTXViR0Y1WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZG1semFXSnNaU2tnZTF4dUlDQWdJQ0FnZEdocGN5NXRZWEF1WVdSa1RHRjVaWElvZEdocGN5NXNZWGxsY2lsY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2hwY3k1dFlYQXVjbVZ0YjNabFRHRjVaWElvZEdocGN5NXNZWGxsY2lsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnY0hWaWJHbGpJR05vWVc1blpVTnZiRzl5S0dOdmJHOXlPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQjBhR2x6TG05d2RHbHZibk11Wm1sc2JFTnZiRzl5SUQwZ1kyOXNiM0pjYmlBZ0lDQjBhR2x6TG5KbFpISmhkeWdwWEc0Z0lIMWNiaUFnY0hKdmRHVmpkR1ZrSUdkbGRGUnZiMnhVYVhCRGIyNTBaVzUwS0dSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuSnlBcklHUmhkR0ZiZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCQmRIUnlYVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdhVzVwZEZCdmJIbG5iMjV6S0NrZ2UxeHVJQ0FnSUhSb2FYTXVaR0YwWVV4cGMzUXVabTl5UldGamFDZ29aR0YwWVNrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1allXTm9aVk5sWjIxbGJuUlFZWEpoYlhNb0tWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUV3dVoyVnZTbE5QVGloa1lYUmhMbWRsYjIxbGRISjVLUzVuWlhSTVlYbGxjbk1vS1Zzd1hWeHVJQ0FnSUNBZ1kyOXVjM1FnY0c5c2VXZHZiaUE5SUc1bGR5QlFiMng1WjI5dUtDaHNZWGxsY2lCaGN5Qk1MbEJ2YkhsbmIyNHBMbWRsZEV4aGRFeHVaM01vS1NsY2JseHVJQ0FnSUNBZ0x5OGc1YkNHNTV1NDVZV3o1WUM4NTd1UjVhNmE1WWl3SUcxaGNtdGxjdVM0aWx4dUlDQWdJQ0FnY0c5c2VXZHZiaTV6WlhSRVlYUmhLR1JoZEdFcFhHNWNiaUFnSUNBZ0lIUm9hWE11Y0c5c2VXZHZibk11Y0hWemFDaHdiMng1WjI5dUtWeHVJQ0FnSUgwcFhHNGdJSDFjYmlBZ2NISnBkbUYwWlNCamIyNW1hV2RRYjJ4NVoyOXVUR0Y1WlhJb0tTQjdYRzRnSUNBZ2RHaHBjeTV3YjJ4NVoyOXVUR0Y1WlhJZ1BTQk1MbXhoZVdWeVIzSnZkWEFvS1Z4dUlDQWdJSFJvYVhNdWNHOXNlV2R2Ym5NdVptOXlSV0ZqYUNnb2NHOXNlV2R2YmlrZ1BUNGdlMXh1SUNBZ0lDQWdjRzlzZVdkdmJpNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXNlV2R2YmtOc2FXTnJTR0Z1Wkd4bGNpaHdiMng1WjI5dUtWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lHeGxkQ0JtYVd4c1EyOXNiM0lnUFNCMGFHbHpMbTl3ZEdsdmJuTXVabWxzYkVOdmJHOXlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXZjSFJwYjI1ekxuSmxibVJsY2xCdmJIbG5iMjVEYjJ4dmNsUjVjR1VnUFQwOUlDZHpaV2R0Wlc1MFpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUdacGJHeERiMnh2Y2lBOUlIUm9hWE11WjJWMFUyVm5iV1Z1ZEdWa1VHOXNlV2R2YmtOdmJHOXlLSEJ2YkhsbmIyNHVaMlYwUkdGMFlTZ3BLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1YzNRZ2IzQjBhVzl1Y3pvZ1RDNVFiMng1YkdsdVpVOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQjBhR2x6TG05d2RHbHZibk1zSUh0Y2JpQWdJQ0FnSUNBZ1ptbHNiRU52Ykc5eUxGeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lHTnZibk4wSUc1bGQxQnZiSGxuYjI0Z1BTQnVaWGNnVUc5c2VXZHZiaWh3YjJ4NVoyOXVMbWRsZEV4aGRFeHVaM01vS1N3Z2IzQjBhVzl1Y3lsY2JpQWdJQ0FnSUhSb2FYTXVjRzlzZVdkdmJreGhlV1Z5TG1Ga1pFeGhlV1Z5S0c1bGQxQnZiSGxuYjI0cFhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2IyeDVaMjl1VEdGNVpYSmNiaUFnZlZ4dUlDQndjbWwyWVhSbElIQnZiSGxuYjI1RGJHbGphMGhoYm1Sc1pYSW9jRzlzZVdkdmJqb2dVRzlzZVdkdmJpa2dlMXh1SUNBZ0lDOHZJSFJvYVhNdVptOWpkWE5sWkZCdmJIbG5iMjRnUFNCd2IyeDVaMjl1WEc0Z0lDQWdkR2hwY3k1amFHRnVibVZzUm5WdVl5Z25iMjR0WTJ4cFkyc3RjRzlzZVdkdmJpY3NJSEJ2YkhsbmIyNHBYRzRnSUgxY2JpQWdjSEpwZG1GMFpTQmpZV05vWlZObFoyMWxiblJRWVhKaGJYTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2MyVm5iV1Z1ZEdWa1RHVnVaM1JvSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbk5sWjIxbGJuUmxaRU52Ykc5eWN5NXNaVzVuZEdoY2JpQWdJQ0JzWlhRZ2JXRjRWbUZzSUQwZ0xVbHVabWx1YVhSNVhHNGdJQ0FnYkdWMElHMXBibFpoYkNBOUlFbHVabWx1YVhSNVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCa1lYUmhJRzltSUhSb2FYTXVaR0YwWVV4cGMzUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIWmhiQ0E5SUdSaGRHRmJkR2hwY3k1dmNIUnBiMjV6TG5ObFoyMWxiblJsWkVGMGRISmRYRzRnSUNBZ0lDQnRZWGhXWVd3Z1BTQk5ZWFJvTG0xaGVDaHRZWGhXWVd3c0lIWmhiQ2xjYmlBZ0lDQWdJRzFwYmxaaGJDQTlJRTFoZEdndWJXbHVLRzFwYmxaaGJDd2dkbUZzS1Z4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCemRHVndJRDBnS0cxaGVGWmhiQ0F0SUcxcGJsWmhiQ0FySURFcElDOGdjMlZuYldWdWRHVmtUR1Z1WjNSb1hHNGdJQ0FnZEdocGN5NXpaV2R0Wlc1MFpXUk5hVzRnUFNCdGFXNVdZV3hjYmlBZ0lDQjBhR2x6TG5ObFoyMWxiblJsWkZOMFpYQWdQU0J6ZEdWd1hHNGdJSDFjYmlBZ2NISnBkbUYwWlNCblpYUlRaV2R0Wlc1MFpXUlFiMng1WjI5dVEyOXNiM0lvWkdGMFlUb2dSR0YwWVV4cGMzUkpkR1Z0S1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0JqYjI1emRDQjJZV3dnUFNCa1lYUmhXM1JvYVhNdWIzQjBhVzl1Y3k1elpXZHRaVzUwWldSQmRIUnlYVnh1SUNBZ0lHTnZibk4wSUdOdmJHOXlJRDBnZEdocGN5NXZjSFJwYjI1ekxuTmxaMjFsYm5SbFpFTnZiRzl5YzF0Y2JpQWdJQ0FnSUNoMllXd2dMU0IwYUdsekxuTmxaMjFsYm5SbFpFMXBiaWtnTHlCMGFHbHpMbk5sWjIxbGJuUmxaRk4wWlhCY2JpQWdJQ0JkWEc0Z0lDQWdjbVYwZFhKdUlHTnZiRzl5WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCN0lFUmhkR0ZNYVhOMFNYUmxiU0I5SUdaeWIyMGdKeTR1TDJSbFptbHVhWFJwYjI1ekoxeHVYRzVsZUhCdmNuUWdkSGx3WlNCUWIyeDViR2x1WlU5d2RHbHZibk1nUFNCTUxreGhkRXh1WjBWNGNISmxjM05wYjI1YlhTQjhJRXd1VEdGMFRHNW5SWGh3Y21WemMybHZibHRkVzExY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRkJ2Ykhsc2FXNWxJR1Y0ZEdWdVpITWdUQzVRYjJ4NWJHbHVaU0I3WEc0Z0lDOHZJSFJ6YkdsdWREcGthWE5oWW14bExXNWxlSFF0YkdsdVpUcDJZWEpwWVdKc1pTMXVZVzFsWEc0Z0lIQnlhWFpoZEdVZ1gxOWtZWFJoT2lCRVlYUmhUR2x6ZEVsMFpXMWNiaUFnWTI5dWMzUnlkV04wYjNJb2JHRjBiRzVuY3pvZ1VHOXNlV3hwYm1WUGNIUnBiMjV6TENCdmNIUnBiMjV6UHpvZ1RDNVFiMng1YkdsdVpVOXdkR2x2Ym5NcElIdGNiaUFnSUNCemRYQmxjaWhzWVhSc2JtZHpMQ0J2Y0hScGIyNXpLVnh1SUNCOVhHNGdJSEIxWW14cFl5QnpaWFJFWVhSaEtHUmhkR0U2SUVSaGRHRk1hWE4wU1hSbGJTa2dlMXh1SUNBZ0lIUm9hWE11WDE5a1lYUmhJRDBnWkdGMFlWeHVJQ0I5WEc0Z0lIQjFZbXhwWXlCblpYUkVZWFJoS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWZaR0YwWVZ4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QkVZWFJoVEdsemRFbDBaVzBzSUVOb1lXNXVaV3hHZFc1aklIMGdabkp2YlNBbkxpNHZaR1ZtYVc1cGRHbHZibk1uWEc1cGJYQnZjblFnVUc5c2VXeHBibVZ6VEdGNVpYSWdabkp2YlNBbkxpOVFiMng1YkdsdVpYTk1ZWGxsY2lkY2JseHVMeW9xSU9hNHN1YWZrK21pbk9pSnN1YWd0K1c4anlEbGpaWG9pYko4NVlpRzVxNjFJQ292WEc1MGVYQmxJRkJ2Ykhsc2FXNWxUR0Y1WlhKU1pXNWtaWEpEYjJ4dmNsUjVjR1VnUFNBbmMybHVaMnhsSnlCOElDZHpaV2R0Wlc1MFpXUW5YRzVwYm5SbGNtWmhZMlVnVUc5c2VXeHBibVZDZFdabVpYSk1ZWGxsY2s5d2RHbHZibk1nWlhoMFpXNWtjeUJNTGtOdmNuSnBaRzl5VDNCMGFXOXVjeUI3WEc0Z0lISmxibVJsY2xCdmJIbHNhVzVsUTI5c2IzSlVlWEJsT2lCUWIyeDViR2x1WlV4aGVXVnlVbVZ1WkdWeVEyOXNiM0pVZVhCbFhHNWNiaUFnTHlvcUlIQnZjSFZ3SU9XeGxlZWt1dVd0bCthdXRTQXFMMXh1SUNCd2IzQjFjRUYwZEhJL09pQnpkSEpwYm1kY2JpQWdMeW9xSUhSdmIyeDBhWEFnNWJHVjU2UzY1YTJYNXE2MUlDb3ZYRzRnSUhSdmIyeDBhWEJCZEhSeVB6b2djM1J5YVc1blhHNWNiaUFnYjNCaFkybDBlVDg2SUc1MWJXSmxjbHh1WEc0Z0lDOHFLaURsaUlibXJyWG11TExtbjVQbnU1L29ycUhsclpmbXJyVWdLaTljYmlBZ2MyVm5iV1Z1ZEdWa1FYUjBjajg2SUhOMGNtbHVaMXh1SUNCelpXZHRaVzUwWldSRGIyeHZjbk0vT2lCemRISnBibWRiWFZ4dWZWeHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVUc5c2VXeHBibVZ6UW5WbVptVnlUR0Y1WlhJZ1pYaDBaVzVrY3lCUWIyeDViR2x1WlhOTVlYbGxjaUI3WEc0Z0lIQjFZbXhwWXlCMGVYQmxPaUJ6ZEhKcGJtZGNiaUFnY0hKdmRHVmpkR1ZrSUc5d2RHbHZibk02SUZCdmJIbHNhVzVsUW5WbVptVnlUR0Y1WlhKUGNIUnBiMjV6WEc0Z0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lHMWhjRG9nVEM1TllYQXNYRzRnSUNBZ1pHRjBZVXhwYzNRNklFUmhkR0ZNYVhOMFNYUmxiVnRkTEZ4dUlDQWdJRzl3ZEdsdmJuTTZJRkJ2Ykhsc2FXNWxRblZtWm1WeVRHRjVaWEpQY0hScGIyNXpMRnh1SUNBZ0lHTm9ZVzV1Wld4R2RXNWpPaUJEYUdGdWJtVnNSblZ1WTF4dUlDQXBJSHRjYmlBZ0lDQnpkWEJsY2lodFlYQXNJR1JoZEdGTWFYTjBMQ0J2Y0hScGIyNXpMQ0JqYUdGdWJtVnNSblZ1WXlsY2JpQWdJQ0JqYjI1emRDQmtaV1poZFd4MFQzQjBhVzl1Y3pvZ1VHOXNlV3hwYm1WQ2RXWm1aWEpNWVhsbGNrOXdkR2x2Ym5NZ1BTQjdYRzRnSUNBZ0lDQnlaVzVrWlhKUWIyeDViR2x1WlVOdmJHOXlWSGx3WlRvZ0ozTnBibWRzWlNjc1hHNGdJQ0FnSUNCelpXZHRaVzUwWldSRGIyeHZjbk02SUZzbkl6TXpPRGhHUmlkZExGeHVJQ0FnSUNBZ1kyOXljbWxrYjNJNklERXdNQ3hjYmlBZ0lDQWdJR052Ykc5eU9pQW5Jek16T0RoR1JpY3NYRzRnSUNBZ0lDQnZjR0ZqYVhSNU9pQXdMalVzWEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2R3YjJ4NWJHbHVaVUoxWm1abGNpZGNiaUFnSUNCMGFHbHpMbTFoY0NBOUlHMWhjRnh1SUNBZ0lIUm9hWE11WkdGMFlVeHBjM1FnUFNCa1lYUmhUR2x6ZEZ4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5OY2JpQWdJQ0IwYUdsekxtTm9ZVzV1Wld4R2RXNWpJRDBnWTJoaGJtNWxiRVoxYm1OY2JseHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFJ5ZFdWY2JpQWdJQ0IwYUdsekxuQnZiSGxzYVc1bGN5QTlJRnRkWEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwWldSTmFXNGdQU0JKYm1acGJtbDBlVnh1SUNBZ0lIUm9hWE11YzJWbmJXVnVkR1ZrVTNSbGNDQTlJREZjYmlBZ0lDQXZMeUIwYUdsekxtWnZZM1Z6WldSUWIyeDViR2x1WlNBOUlHNTFiR3hjYmx4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHUmxabUYxYkhSUGNIUnBiMjV6TENCdmNIUnBiMjV6S1Z4dUlDQWdJSFJvYVhNdWFXNXBkRkJ2Ykhsc2FXNWxjeWdwWEc0Z0lIMWNiaUFnY0hWaWJHbGpJR1J5WVhjb2IzQjBhVzl1Y3o4NklGQnZiSGxzYVc1bFFuVm1abVZ5VEdGNVpYSlBjSFJwYjI1ektTQjdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDBhR2x6TG05d2RHbHZibk1zSUc5d2RHbHZibk1wWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wa2NtRjNLQ2xjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjbVZrY21GM0tDa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NTJhWE5wWW14bEtTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXViR0Y1WlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11YkdGNVpYSXVjbVZ0YjNabEtDbGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXNZWGxsY2lBOUlIUm9hWE11WTI5dVptbG5VRzlzZVd4cGJtVkNkV1ptWlhKTVlYbGxjaWdwWEc0Z0lDQWdkR2hwY3k1dFlYQXVZV1JrVEdGNVpYSW9kR2hwY3k1c1lYbGxjaWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXh1SUNCOVhHNGdJSEIxWW14cFl5Qm1hWFJDYjNWdVpITW9LU0I3WEc0Z0lDQWdkR2hwY3k1dFlYQXVabWwwUW05MWJtUnpLSFJvYVhNdVoyVjBRbTkxYm1SektDa3BYRzRnSUgxY2JpQWdjSFZpYkdsaklHZGxkRUp2ZFc1a2N5Z3BPaUJNTGt4aGRFeHVaMEp2ZFc1a2MwVjRjSEpsYzNOcGIyNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnZiSGxzYVc1bGN5NXNaVzVuZEdnZ1BEMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRndMbWRsZEVKdmRXNWtjeWdwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ2Ykhsc2FXNWxjeTV5WldSMVkyVW9YRzRnSUNBZ0lDQW9jSEpsZGl3Z1kzVnljaWtnUFQ0Z2NISmxkaTVsZUhSbGJtUW9ZM1Z5Y2k1blpYUkNiM1Z1WkhNb0tTa3NYRzRnSUNBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsYzFzd1hTNW5aWFJDYjNWdVpITW9LVnh1SUNBZ0lDbGNiaUFnZlZ4dUlDQndkV0pzYVdNZ1kyaGhibWRsUTI5c2IzSW9ZMjlzYjNJNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUhSb2FYTXViM0IwYVc5dWN5NWpiMnh2Y2lBOUlHTnZiRzl5WEc0Z0lDQWdkR2hwY3k1eVpXUnlZWGNvS1Z4dUlDQjlYRzRnSUhCeWFYWmhkR1VnWTI5dVptbG5VRzlzZVd4cGJtVkNkV1ptWlhKTVlYbGxjaWdwSUh0Y2JpQWdJQ0IwYUdsekxuQnZiSGxzYVc1bFRHRjVaWElnUFNCTUxteGhlV1Z5UjNKdmRYQW9LVnh1SUNBZ0lIUm9hWE11Y0c5c2VXeHBibVZ6TG1admNrVmhZMmdvS0hCdmJIbHNhVzVsS1NBOVBpQjdYRzRnSUNBZ0lDQndiMng1YkdsdVpTNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXNlV3hwYm1WRGJHbGphMGhoYm1Sc1pYSW9jRzlzZVd4cGJtVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdZMjl1YzNRZ2IzQjBhVzl1Y3pvZ1VHOXNlV3hwYm1WQ2RXWm1aWEpNWVhsbGNrOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0Z4dUlDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjV6TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdZMjlzYjNJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NdWNtVnVaR1Z5VUc5c2VXeHBibVZEYjJ4dmNsUjVjR1VnUFQwOUlDZHphVzVuYkdVblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2RHaHBjeTV2Y0hScGIyNXpMbU52Ykc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTVuWlhSVFpXZHRaVzUwWldSUWIyeDViR2x1WlVOdmJHOXlLSEJ2Ykhsc2FXNWxMbWRsZEVSaGRHRW9LU2tzWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNsY2JseHVJQ0FnSUNBZ1kyOXVjM1FnY0c5c2VXeHBibVZDZFdabVpYSWdQU0JNTG1OdmNuSnBaRzl5S0Z4dUlDQWdJQ0FnSUNBb2NHOXNlV3hwYm1VdVoyVjBUR0YwVEc1bmN5Z3BJR0Z6SUV3dVRHRjBURzVuVzEwcExtMWhjQ2dvYkdGMFRHNW5LU0E5UGx4dUlDQWdJQ0FnSUNBZ0lFd3ViR0YwVEc1bktGdHNZWFJNYm1jdWJHNW5MQ0JzWVhSTWJtY3ViR0YwWFNsY2JpQWdJQ0FnSUNBZ0tTeGNiaUFnSUNBZ0lDQWdiM0IwYVc5dWMxeHVJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWIzQjBhVzl1Y3k1MGIyOXNkR2x3UVhSMGNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjJ4NWJHbHVaVUoxWm1abGNpNWlhVzVrVkc5dmJIUnBjQ2gwYUdsekxtZGxkRlJ2YjJ4VWFYQkRiMjUwWlc1MEtIQnZiSGxzYVc1bExtZGxkRVJoZEdFb0tTa3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhR2x6TG5CdmJIbHNhVzVsVEdGNVpYSXVZV1JrVEdGNVpYSW9jRzlzZVd4cGJtVkNkV1ptWlhJcFhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2IyeDViR2x1WlV4aGVXVnlYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUVSaGRHRk1hWE4wU1hSbGJTd2dRMmhoYm01bGJFWjFibU1nZlNCbWNtOXRJQ2N1TGk5a1pXWnBibWwwYVc5dWN5ZGNibWx0Y0c5eWRDQlFiMng1YkdsdVpTd2dleUJRYjJ4NWJHbHVaVTl3ZEdsdmJuTWdmU0JtY205dElDY3VMMUJ2Ykhsc2FXNWxKMXh1WEc0dktpb2c1cml5NXArVDZhS2M2SW15NXFDMzVieVBJT1dObGVpSnNuemxpSWJtcnJVZ0tpOWNiblI1Y0dVZ1VHOXNlV3hwYm1WTVlYbGxjbEpsYm1SbGNrTnZiRzl5Vkhsd1pTQTlJQ2R6YVc1bmJHVW5JSHdnSjNObFoyMWxiblJsWkNkY2JtbHVkR1Z5Wm1GalpTQlFiMng1YkdsdVpVeGhlV1Z5VDNCMGFXOXVjeUJsZUhSbGJtUnpJRXd1VUc5c2VXeHBibVZQY0hScGIyNXpJSHRjYmlBZ2NtVnVaR1Z5VUc5c2VXeHBibVZEYjJ4dmNsUjVjR1U2SUZCdmJIbHNhVzVsVEdGNVpYSlNaVzVrWlhKRGIyeHZjbFI1Y0dWY2JseHVJQ0F2S2lvZ2NHOXdkWEFnNWJHVjU2UzY1YTJYNXE2MUlDb3ZYRzRnSUhCdmNIVndRWFIwY2o4NklITjBjbWx1WjF4dUlDQXZLaW9nZEc5dmJIUnBjQ0Rsc1pYbnBMcmxyWmZtcnJVZ0tpOWNiaUFnZEc5dmJIUnBjRUYwZEhJL09pQnpkSEpwYm1kY2JseHVJQ0J2Y0dGamFYUjVQem9nYm5WdFltVnlYRzVjYmlBZ0x5b3FJT1dJaHVhdXRlYTRzdWFmaytlN24raXVvZVd0bCthdXRTQXFMMXh1SUNCelpXZHRaVzUwWldSQmRIUnlQem9nYzNSeWFXNW5YRzRnSUhObFoyMWxiblJsWkVOdmJHOXljejg2SUhOMGNtbHVaMXRkWEc1OVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJRYjJ4NWJHbHVaWE5NWVhsbGNpQjdYRzRnSUhCMVlteHBZeUIwZVhCbE9pQnpkSEpwYm1kY2JseHVJQ0J3Y205MFpXTjBaV1FnZG1semFXSnNaVG9nWW05dmJHVmhibHh1SUNCd2NtOTBaV04wWldRZ2JHRjVaWEk2SUV3dVRHRjVaWEpIY205MWNGeHVYRzRnSUhCeWIzUmxZM1JsWkNCdFlYQTZJRXd1VFdGd1hHNGdJSEJ5YjNSbFkzUmxaQ0JrWVhSaFRHbHpkRG9nUkdGMFlVeHBjM1JKZEdWdFcxMWNiaUFnY0hKdmRHVmpkR1ZrSUc5d2RHbHZibk02SUZCdmJIbHNhVzVsVEdGNVpYSlBjSFJwYjI1elhHNGdJSEJ5YjNSbFkzUmxaQ0JqYUdGdWJtVnNSblZ1WXpvZ1EyaGhibTVsYkVaMWJtTmNiaUFnY0hKdmRHVmpkR1ZrSUhCdmJIbHNhVzVsY3pvZ1VHOXNlV3hwYm1WYlhWeHVJQ0J3Y205MFpXTjBaV1FnYzJWbmJXVnVkR1ZrVFdsdU9pQnVkVzFpWlhKY2JpQWdjSEp2ZEdWamRHVmtJSE5sWjIxbGJuUmxaRk4wWlhBNklHNTFiV0psY2x4dUlDQXZMeUJ3Y21sMllYUmxJR1p2WTNWelpXUlFiMng1YkdsdVpUb2dVRzlzZVd4cGJtVmNiaUFnY0hKdmRHVmpkR1ZrSUhCdmJIbHNhVzVsVEdGNVpYSTZJRXd1VEdGNVpYSkhjbTkxY0Z4dUlDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQnRZWEE2SUV3dVRXRndMRnh1SUNBZ0lHUmhkR0ZNYVhOME9pQkVZWFJoVEdsemRFbDBaVzFiWFN4Y2JpQWdJQ0J2Y0hScGIyNXpPaUJRYjJ4NWJHbHVaVXhoZVdWeVQzQjBhVzl1Y3l4Y2JpQWdJQ0JqYUdGdWJtVnNSblZ1WXpvZ1EyaGhibTVsYkVaMWJtTmNiaUFnS1NCN1hHNGdJQ0FnWTI5dWMzUWdaR1ZtWVhWc2RFOXdkR2x2Ym5NNklGQnZiSGxzYVc1bFRHRjVaWEpQY0hScGIyNXpJRDBnZTF4dUlDQWdJQ0FnWTI5c2IzSTZJQ2NqTXpNNE9FWkdKeXhjYmlBZ0lDQWdJSEpsYm1SbGNsQnZiSGxzYVc1bFEyOXNiM0pVZVhCbE9pQW5jMmx1WjJ4bEp5eGNiaUFnSUNBZ0lITmxaMjFsYm5SbFpFTnZiRzl5Y3pvZ1d5Y2pNek00T0VaR0oxMHNYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVkSGx3WlNBOUlDZHdiMng1YkdsdVpTZGNiaUFnSUNCMGFHbHpMbTFoY0NBOUlHMWhjRnh1SUNBZ0lIUm9hWE11WkdGMFlVeHBjM1FnUFNCa1lYUmhUR2x6ZEZ4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5OY2JpQWdJQ0IwYUdsekxtTm9ZVzV1Wld4R2RXNWpJRDBnWTJoaGJtNWxiRVoxYm1OY2JseHVJQ0FnSUhSb2FYTXVkbWx6YVdKc1pTQTlJSFJ5ZFdWY2JpQWdJQ0IwYUdsekxuQnZiSGxzYVc1bGN5QTlJRnRkWEc0Z0lDQWdkR2hwY3k1elpXZHRaVzUwWldSTmFXNGdQU0JKYm1acGJtbDBlVnh1SUNBZ0lIUm9hWE11YzJWbmJXVnVkR1ZrVTNSbGNDQTlJREZjYmlBZ0lDQXZMeUIwYUdsekxtWnZZM1Z6WldSUWIyeDViR2x1WlNBOUlHNTFiR3hjYmx4dUlDQWdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lHUmxabUYxYkhSUGNIUnBiMjV6TENCdmNIUnBiMjV6S1Z4dVhHNGdJQ0FnTHk4ZzU3eVQ1YTJZSUhObFoyMWxiblFnNTV1NDVZV3o1cFd3NW8ydVhHNGdJQ0FnZEdocGN5NWpZV05vWlZObFoyMWxiblJRWVhKaGJYTW9LVnh1SUNBZ0lIUm9hWE11YVc1cGRGQnZiSGxzYVc1bGN5Z3BYRzRnSUgxY2JpQWdjSFZpYkdsaklHUnlZWGNvYjNCMGFXOXVjejg2SUZCdmJIbHNhVzVsVEdGNVpYSlBjSFJwYjI1ektTQjdYRzRnSUNBZ2RHaHBjeTV2Y0hScGIyNXpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDBhR2x6TG05d2RHbHZibk1zSUc5d2RHbHZibk1wWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wa2NtRjNLQ2xjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdjbVZrY21GM0tDa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NTJhWE5wWW14bEtTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXViR0Y1WlhJcElIdGNiaUFnSUNBZ0lIUm9hWE11YkdGNVpYSXVjbVZ0YjNabEtDbGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXNZWGxsY2lBOUlIUm9hWE11WTI5dVptbG5VRzlzZVd4cGJtVk1ZWGxsY2lncFhHNGdJQ0FnZEdocGN5NXRZWEF1WVdSa1RHRjVaWElvZEdocGN5NXNZWGxsY2lsY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzRnSUhCMVlteHBZeUJtYVhSQ2IzVnVaSE1vS1NCN1hHNGdJQ0FnZEdocGN5NXRZWEF1Wm1sMFFtOTFibVJ6S0hSb2FYTXVaMlYwUW05MWJtUnpLQ2twWEc0Z0lIMWNiaUFnY0hWaWJHbGpJR2RsZEVKdmRXNWtjeWdwT2lCTUxreGhkRXh1WjBKdmRXNWtjMFY0Y0hKbGMzTnBiMjRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJ2Ykhsc2FXNWxjeTVzWlc1bmRHZ2dQRDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0Z3TG1kbGRFSnZkVzVrY3lncFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CdmJIbHNhVzVsY3k1eVpXUjFZMlVvWEc0Z0lDQWdJQ0FvY0hKbGRpd2dZM1Z5Y2lrZ1BUNGdjSEpsZGk1bGVIUmxibVFvWTNWeWNpNW5aWFJDYjNWdVpITW9LU2tzWEc0Z0lDQWdJQ0IwYUdsekxuQnZiSGxzYVc1bGMxc3dYUzVuWlhSQ2IzVnVaSE1vS1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXNZWGxsY2lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVzWVhsbGNpNXlaVzF2ZG1Vb0tWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCd2RXSnNhV01nZEc5bloyeGxWbWx6YVdKc1pTaDJhWE5wWW14bE9pQmliMjlzWldGdUtTQjdYRzRnSUNBZ2RHaHBjeTUyYVhOcFlteGxJRDBnZG1semFXSnNaVnh1SUNBZ0lHbG1JQ2doZEdocGN5NXNZWGxsY2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyYVhOcFlteGxLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtMWhjQzVoWkdSTVlYbGxjaWgwYUdsekxteGhlV1Z5S1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhR2x6TG0xaGNDNXlaVzF2ZG1WTVlYbGxjaWgwYUdsekxteGhlV1Z5S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J3ZFdKc2FXTWdZMmhoYm1kbFEyOXNiM0lvWTI5c2IzSTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lIUm9hWE11YjNCMGFXOXVjeTVtYVd4c1EyOXNiM0lnUFNCamIyeHZjbHh1SUNBZ0lIUm9hWE11Y21Wa2NtRjNLQ2xjYmlBZ2ZWeHVJQ0J3Y205MFpXTjBaV1FnYVc1cGRGQnZiSGxzYVc1bGN5Z3BJSHRjYmlBZ0lDQjBhR2x6TG1SaGRHRk1hWE4wTG1admNrVmhZMmdvS0dSaGRHRXBJRDArSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMkZqYUdWVFpXZHRaVzUwVUdGeVlXMXpLQ2xjYmx4dUlDQWdJQ0FnWTI5dWMzUWdiR0Y1WlhJZ1BTQk1MbWRsYjBwVFQwNG9aR0YwWVM1blpXOXRaWFJ5ZVNrdVoyVjBUR0Y1WlhKektDbGJNRjFjYmlBZ0lDQWdJR3hsZENCbWFXeHNRMjlzYjNJZ1BTQjBhR2x6TG05d2RHbHZibk11Wm1sc2JFTnZiRzl5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbkpsYm1SbGNsQnZiSGxzYVc1bFEyOXNiM0pVZVhCbElEMDlQU0FuYzJWbmJXVnVkR1ZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQm1hV3hzUTI5c2IzSWdQU0IwYUdsekxtZGxkRk5sWjIxbGJuUmxaRkJ2Ykhsc2FXNWxRMjlzYjNJb1pHRjBZU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OMElIQnZiSGxzYVc1bElEMGdibVYzSUZCdmJIbHNhVzVsS0Z4dUlDQWdJQ0FnSUNBb2JHRjVaWElnWVhNZ1RDNVFiMng1YkdsdVpTa3VaMlYwVEdGMFRHNW5jeWdwSUdGeklGQnZiSGxzYVc1bFQzQjBhVzl1Y3l4Y2JpQWdJQ0FnSUNBZ1QySnFaV04wTG1GemMybG5iaWg3ZlN3Z2RHaHBjeTV2Y0hScGIyNXpMQ0I3SUdacGJHeERiMnh2Y2lCOUtWeHVJQ0FnSUNBZ0tWeHVYRzRnSUNBZ0lDQXZMeURsc0libm03amxoYlBsZ0x6bnU1SGxycHJsaUxBZ2JXRnlhMlZ5NUxpS1hHNGdJQ0FnSUNCd2IyeDViR2x1WlM1elpYUkVZWFJoS0dSaGRHRXBYRzVjYmlBZ0lDQWdJSFJvYVhNdWNHOXNlV3hwYm1WekxuQjFjMmdvY0c5c2VXeHBibVVwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVJQ0J3Y205MFpXTjBaV1FnWjJWMFUyVm5iV1Z1ZEdWa1VHOXNlV3hwYm1WRGIyeHZjaWhrWVhSaE9pQkVZWFJoVEdsemRFbDBaVzBwT2lCemRISnBibWNnZTF4dUlDQWdJR052Ym5OMElIWmhiQ0E5SUdSaGRHRmJkR2hwY3k1dmNIUnBiMjV6TG5ObFoyMWxiblJsWkVGMGRISmRYRzRnSUNBZ1kyOXVjM1FnWTI5c2IzSWdQU0IwYUdsekxtOXdkR2x2Ym5NdWMyVm5iV1Z1ZEdWa1EyOXNiM0p6VzF4dUlDQWdJQ0FnS0haaGJDQXRJSFJvYVhNdWMyVm5iV1Z1ZEdWa1RXbHVLU0F2SUhSb2FYTXVjMlZuYldWdWRHVmtVM1JsY0Z4dUlDQWdJRjFjYmlBZ0lDQnlaWFIxY200Z1kyOXNiM0pjYmlBZ2ZWeHVJQ0J3Y205MFpXTjBaV1FnY0c5c2VXeHBibVZEYkdsamEwaGhibVJzWlhJb2NHOXNlV3hwYm1VNklGQnZiSGxzYVc1bEtTQjdYRzRnSUNBZ0x5OGdkR2hwY3k1bWIyTjFjMlZrVUc5c2VXeHBibVVnUFNCd2IyeDViR2x1WlZ4dUlDQWdJSFJvYVhNdVkyaGhibTVsYkVaMWJtTW9KMjl1TFdOc2FXTnJMWEJ2Ykhsc2FXNWxKeXdnY0c5c2VXeHBibVVwWEc0Z0lIMWNiaUFnY0hKdmRHVmpkR1ZrSUdkbGRGUnZiMnhVYVhCRGIyNTBaVzUwS0dSaGRHRTZJRVJoZEdGTWFYTjBTWFJsYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuSnlBcklHUmhkR0ZiZEdocGN5NXZjSFJwYjI1ekxuUnZiMngwYVhCQmRIUnlYVnh1SUNCOVhHNGdJSEJ5YVhaaGRHVWdZMjl1Wm1sblVHOXNlV3hwYm1WTVlYbGxjaWdwSUh0Y2JpQWdJQ0IwYUdsekxuQnZiSGxzYVc1bFRHRjVaWElnUFNCTUxteGhlV1Z5UjNKdmRYQW9LVnh1SUNBZ0lIUm9hWE11Y0c5c2VXeHBibVZ6TG1admNrVmhZMmdvS0hCdmJIbHNhVzVsS1NBOVBpQjdYRzRnSUNBZ0lDQndiMng1YkdsdVpTNXZiaWduWTJ4cFkyc25MQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXNlV3hwYm1WRGJHbGphMGhoYm1Sc1pYSW9jRzlzZVd4cGJtVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdZMjl1YzNRZ2IzQjBhVzl1Y3pvZ1RDNVFiMng1YkdsdVpVOXdkR2x2Ym5NZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQjBhR2x6TG05d2RHbHZibk1zSUh0Y2JpQWdJQ0FnSUNBZ1kyOXNiM0k2SUhSb2FYTXVaMlYwVTJWbmJXVnVkR1ZrVUc5c2VXeHBibVZEYjJ4dmNpaHdiMng1YkdsdVpTNW5aWFJFWVhSaEtDa3BMRnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQWdJR052Ym5OMElHNWxkMUJ2Ykhsc2FXNWxJRDBnYm1WM0lGQnZiSGxzYVc1bEtGeHVJQ0FnSUNBZ0lDQndiMng1YkdsdVpTNW5aWFJNWVhSTWJtZHpLQ2tnWVhNZ1VHOXNlV3hwYm1WUGNIUnBiMjV6TEZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6WEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0IwYUdsekxuQnZiSGxzYVc1bFRHRjVaWEl1WVdSa1RHRjVaWElvYm1WM1VHOXNlV3hwYm1VcFhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2IyeDViR2x1WlV4aGVXVnlYRzRnSUgxY2JpQWdjSEpwZG1GMFpTQmpZV05vWlZObFoyMWxiblJRWVhKaGJYTW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2MyVm5iV1Z1ZEdWa1RHVnVaM1JvSUQwZ2RHaHBjeTV2Y0hScGIyNXpMbk5sWjIxbGJuUmxaRU52Ykc5eWN5NXNaVzVuZEdoY2JpQWdJQ0JzWlhRZ2JXRjRWbUZzSUQwZ0xVbHVabWx1YVhSNVhHNGdJQ0FnYkdWMElHMXBibFpoYkNBOUlFbHVabWx1YVhSNVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCa1lYUmhJRzltSUhSb2FYTXVaR0YwWVV4cGMzUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElIWmhiQ0E5SUdSaGRHRmJkR2hwY3k1dmNIUnBiMjV6TG5ObFoyMWxiblJsWkVGMGRISmRYRzRnSUNBZ0lDQnRZWGhXWVd3Z1BTQk5ZWFJvTG0xaGVDaHRZWGhXWVd3c0lIWmhiQ2xjYmlBZ0lDQWdJRzFwYmxaaGJDQTlJRTFoZEdndWJXbHVLRzFwYmxaaGJDd2dkbUZzS1Z4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCemRHVndJRDBnS0cxaGVGWmhiQ0F0SUcxcGJsWmhiQ0FySURFcElDOGdjMlZuYldWdWRHVmtUR1Z1WjNSb1hHNGdJQ0FnZEdocGN5NXpaV2R0Wlc1MFpXUk5hVzRnUFNCdGFXNVdZV3hjYmlBZ0lDQjBhR2x6TG5ObFoyMWxiblJsWkZOMFpYQWdQU0J6ZEdWd1hHNGdJSDFjYm4xY2JpSmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD0iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNvbG9ycyA9IHsgZW5hYmxlZDogdHJ1ZSwgdmlzaWJsZTogdHJ1ZSwgc3R5bGVzOiB7fSwga2V5czoge30gfTtcblxuaWYgKCdGT1JDRV9DT0xPUicgaW4gcHJvY2Vzcy5lbnYpIHtcbiAgY29sb3JzLmVuYWJsZWQgPSBwcm9jZXNzLmVudi5GT1JDRV9DT0xPUiAhPT0gJzAnID8gdHJ1ZSA6IGZhbHNlO1xufVxuXG5jb25zdCBhbnNpID0gY29kZXMgPT4ge1xuICBjb2Rlcy5vcGVuID0gYFxcdTAwMWJbJHtjb2Rlc1swXX1tYDtcbiAgY29kZXMuY2xvc2UgPSBgXFx1MDAxYlske2NvZGVzWzFdfW1gO1xuICBjb2Rlcy5yZWdleCA9IG5ldyBSZWdFeHAoYFxcXFx1MDAxYlxcXFxbJHtjb2Rlc1sxXX1tYCwgJ2cnKTtcbiAgcmV0dXJuIGNvZGVzO1xufTtcblxuY29uc3Qgd3JhcCA9IChzdHlsZSwgc3RyLCBubCkgPT4ge1xuICBsZXQgeyBvcGVuLCBjbG9zZSwgcmVnZXggfSA9IHN0eWxlO1xuICBzdHIgPSBvcGVuICsgKHN0ci5pbmNsdWRlcyhjbG9zZSkgPyBzdHIucmVwbGFjZShyZWdleCwgb3BlbikgOiBzdHIpICsgY2xvc2U7XG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhbGsvY2hhbGsvcHVsbC85MiwgdGhhbmtzIHRvIHRoZVxuICAvLyBjaGFsayBjb250cmlidXRvcnMgZm9yIHRoaXMgZml4LiBIb3dldmVyLCB3ZSd2ZSBjb25maXJtZWQgdGhhdFxuICAvLyB0aGlzIGlzc3VlIGlzIGFsc28gcHJlc2VudCBpbiBXaW5kb3dzIHRlcm1pbmFsc1xuICByZXR1cm4gbmwgPyBzdHIucmVwbGFjZSgvXFxyP1xcbi9nLCBgJHtjbG9zZX0kJiR7b3Blbn1gKSA6IHN0cjtcbn07XG5cbmNvbnN0IHN0eWxlID0gKGlucHV0LCBzdGFjaykgPT4ge1xuICBpZiAoaW5wdXQgPT09ICcnIHx8IGlucHV0ID09IG51bGwpIHJldHVybiAnJztcbiAgaWYgKGNvbG9ycy5lbmFibGVkID09PSBmYWxzZSkgcmV0dXJuIGlucHV0O1xuICBpZiAoY29sb3JzLnZpc2libGUgPT09IGZhbHNlKSByZXR1cm4gJyc7XG4gIGxldCBzdHIgPSAnJyArIGlucHV0O1xuICBsZXQgbmwgPSBzdHIuaW5jbHVkZXMoJ1xcbicpO1xuICBsZXQgbiA9IHN0YWNrLmxlbmd0aDtcbiAgd2hpbGUgKG4tLSA+IDApIHN0ciA9IHdyYXAoY29sb3JzLnN0eWxlc1tzdGFja1tuXV0sIHN0ciwgbmwpO1xuICByZXR1cm4gc3RyO1xufTtcblxuY29uc3QgZGVmaW5lID0gKG5hbWUsIGNvZGVzLCB0eXBlKSA9PiB7XG4gIGNvbG9ycy5zdHlsZXNbbmFtZV0gPSBhbnNpKGNvZGVzKTtcbiAgbGV0IHQgPSBjb2xvcnMua2V5c1t0eXBlXSB8fCAoY29sb3JzLmtleXNbdHlwZV0gPSBbXSk7XG4gIHQucHVzaChuYW1lKTtcblxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGNvbG9ycywgbmFtZSwge1xuICAgIGdldCgpIHtcbiAgICAgIGxldCBjb2xvciA9IGlucHV0ID0+IHN0eWxlKGlucHV0LCBjb2xvci5zdGFjayk7XG4gICAgICBSZWZsZWN0LnNldFByb3RvdHlwZU9mKGNvbG9yLCBjb2xvcnMpO1xuICAgICAgY29sb3Iuc3RhY2sgPSB0aGlzLnN0YWNrID8gdGhpcy5zdGFjay5jb25jYXQobmFtZSkgOiBbbmFtZV07XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICB9KTtcbn07XG5cbmRlZmluZSgncmVzZXQnLCBbMCwgMF0sICdtb2RpZmllcicpO1xuZGVmaW5lKCdib2xkJywgWzEsIDIyXSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ2RpbScsIFsyLCAyMl0sICdtb2RpZmllcicpO1xuZGVmaW5lKCdpdGFsaWMnLCBbMywgMjNdLCAnbW9kaWZpZXInKTtcbmRlZmluZSgndW5kZXJsaW5lJywgWzQsIDI0XSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ2ludmVyc2UnLCBbNywgMjddLCAnbW9kaWZpZXInKTtcbmRlZmluZSgnaGlkZGVuJywgWzgsIDI4XSwgJ21vZGlmaWVyJyk7XG5kZWZpbmUoJ3N0cmlrZXRocm91Z2gnLCBbOSwgMjldLCAnbW9kaWZpZXInKTtcblxuZGVmaW5lKCdibGFjaycsIFszMCwgMzldLCAnY29sb3InKTtcbmRlZmluZSgncmVkJywgWzMxLCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdncmVlbicsIFszMiwgMzldLCAnY29sb3InKTtcbmRlZmluZSgneWVsbG93JywgWzMzLCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdibHVlJywgWzM0LCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdtYWdlbnRhJywgWzM1LCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCdjeWFuJywgWzM2LCAzOV0sICdjb2xvcicpO1xuZGVmaW5lKCd3aGl0ZScsIFszNywgMzldLCAnY29sb3InKTtcbmRlZmluZSgnZ3JheScsIFs5MCwgMzldLCAnY29sb3InKTtcbmRlZmluZSgnZ3JleScsIFs5MCwgMzldLCAnY29sb3InKTtcblxuZGVmaW5lKCdiZ0JsYWNrJywgWzQwLCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ1JlZCcsIFs0MSwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdHcmVlbicsIFs0MiwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdZZWxsb3cnLCBbNDMsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnQmx1ZScsIFs0NCwgNDldLCAnYmcnKTtcbmRlZmluZSgnYmdNYWdlbnRhJywgWzQ1LCA0OV0sICdiZycpO1xuZGVmaW5lKCdiZ0N5YW4nLCBbNDYsIDQ5XSwgJ2JnJyk7XG5kZWZpbmUoJ2JnV2hpdGUnLCBbNDcsIDQ5XSwgJ2JnJyk7XG5cbmRlZmluZSgnYmxhY2tCcmlnaHQnLCBbOTAsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCdyZWRCcmlnaHQnLCBbOTEsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCdncmVlbkJyaWdodCcsIFs5MiwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ3llbGxvd0JyaWdodCcsIFs5MywgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ2JsdWVCcmlnaHQnLCBbOTQsIDM5XSwgJ2JyaWdodCcpO1xuZGVmaW5lKCdtYWdlbnRhQnJpZ2h0JywgWzk1LCAzOV0sICdicmlnaHQnKTtcbmRlZmluZSgnY3lhbkJyaWdodCcsIFs5NiwgMzldLCAnYnJpZ2h0Jyk7XG5kZWZpbmUoJ3doaXRlQnJpZ2h0JywgWzk3LCAzOV0sICdicmlnaHQnKTtcblxuZGVmaW5lKCdiZ0JsYWNrQnJpZ2h0JywgWzEwMCwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdSZWRCcmlnaHQnLCBbMTAxLCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ0dyZWVuQnJpZ2h0JywgWzEwMiwgNDldLCAnYmdCcmlnaHQnKTtcbmRlZmluZSgnYmdZZWxsb3dCcmlnaHQnLCBbMTAzLCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ0JsdWVCcmlnaHQnLCBbMTA0LCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ01hZ2VudGFCcmlnaHQnLCBbMTA1LCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ0N5YW5CcmlnaHQnLCBbMTA2LCA0OV0sICdiZ0JyaWdodCcpO1xuZGVmaW5lKCdiZ1doaXRlQnJpZ2h0JywgWzEwNywgNDldLCAnYmdCcmlnaHQnKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xuLy8gYW5zaVJlZ2V4IG1vZGlmaWVkIGZyb20gbm9kZS5qcyByZWFkbGluZTogaHR0cHM6Ly9naXQuaW8vZk5XRlAsIHdoaWNoIGl0c2VsZlxuLy8gaXMgYWRvcHRlZCBmcm9tIHJlZ2V4IHVzZWQgZm9yIGFuc2kgZXNjYXBlIGNvZGUgc3BsaXR0aW5nIGluIGFuc2ktcmVnZXhcbi8vIEFkb3B0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vY2hhbGsvYW5zaS1yZWdleC9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gTGljZW5zZTogTUlULCBhdXRob3JzOiBAc2luZHJlc29yaHVzLCBRaXgtLCBhbmQgYXJqdW5tZWh0YSBNYXRjaGVzIGFsbFxuLy8gYW5zaSBlc2NhcGUgY29kZSBzZXF1ZW5jZXMgaW4gYSBzdHJpbmdcbmNvbG9ycy5hbnNpUmVnZXggPSAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1PUlpjZi1ucXJ5PT48XS9nbTtcbmNvbG9ycy5oYXNBbnNpID0gc3RyID0+IHN0ciAmJiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBjb2xvcnMuYW5zaVJlZ2V4LnRlc3Qoc3RyKTtcbmNvbG9ycy51bnN0eWxlID0gc3RyID0+IHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnJlcGxhY2UoY29sb3JzLmFuc2lSZWdleCwgJycpIDogc3RyO1xuY29sb3JzLm5vbmUgPSBjb2xvcnMuY2xlYXIgPSBzdHIgPT4gc3RyOyAvLyBub29wLCBmb3IgcHJvZ3JhbW1hdGljIHVzYWdlXG5jb2xvcnMuc3RyaXBDb2xvciA9IGNvbG9ycy51bnN0eWxlO1xuY29sb3JzLmhhc0NvbG9yID0gY29sb3JzLmhhc0Fuc2k7XG5jb2xvcnMuc3ltYm9scyA9IHJlcXVpcmUoJy4vc3ltYm9scycpO1xubW9kdWxlLmV4cG9ydHMgPSBjb2xvcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzV2luZG93cyA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5jb25zdCBpc0xpbnV4ID0gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4JztcblxuY29uc3Qgd2luZG93cyA9IHtcbiAgYnVsbGV0OiAn4oCiJyxcbiAgY2hlY2s6ICfiiJonLFxuICBjcm9zczogJ8OXJyxcbiAgZWxsaXBzaXM6ICcuLi4nLFxuICBoZWFydDogJ+KdpCcsXG4gIGluZm86ICdpJyxcbiAgbGluZTogJ+KUgCcsXG4gIG1pZGRvdDogJ8K3JyxcbiAgbWludXM6ICfvvI0nLFxuICBwbHVzOiAn77yLJyxcbiAgcXVlc3Rpb246ICc/JyxcbiAgcXVlc3Rpb25TbWFsbDogJ++5licsXG4gIHBvaW50ZXI6ICc+JyxcbiAgcG9pbnRlclNtYWxsOiAnwrsnLFxuICB3YXJuaW5nOiAn4oC8J1xufTtcblxuY29uc3Qgb3RoZXIgPSB7XG4gIGJhbGxvdENyb3NzOiAn4pyYJyxcbiAgYnVsbGV0OiAn4oCiJyxcbiAgY2hlY2s6ICfinJQnLFxuICBjcm9zczogJ+KclicsXG4gIGVsbGlwc2lzOiAn4oCmJyxcbiAgaGVhcnQ6ICfinaQnLFxuICBpbmZvOiAn4oS5JyxcbiAgbGluZTogJ+KUgCcsXG4gIG1pZGRvdDogJ8K3JyxcbiAgbWludXM6ICfvvI0nLFxuICBwbHVzOiAn77yLJyxcbiAgcXVlc3Rpb246ICc/JyxcbiAgcXVlc3Rpb25GdWxsOiAn77yfJyxcbiAgcXVlc3Rpb25TbWFsbDogJ++5licsXG4gIHBvaW50ZXI6IGlzTGludXggPyAn4pa4JyA6ICfina8nLFxuICBwb2ludGVyU21hbGw6IGlzTGludXggPyAn4oCjJyA6ICfigLonLFxuICB3YXJuaW5nOiAn4pqgJ1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1dpbmRvd3MgPyB3aW5kb3dzIDogb3RoZXI7XG5SZWZsZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnd2luZG93cycsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiB3aW5kb3dzIH0pO1xuUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ290aGVyJywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG90aGVyIH0pO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8vIEB0cy1pZ25vcmVcbmltcG9ydCBsZWFmbGV0TWFwIGZyb20gJy4uLy4uLy4uL2xlYWZsZXQtbGF5ZXInXG5pbXBvcnQgeyByZWQgfSBmcm9tICdhbnNpLWNvbG9ycydcblxuLy8gQHRzLWlnbm9yZVxuY29uc3QgTCA9IHdpbmRvdy5MXG5cbnZhciBwb3NpdGlvbiA9IG5ldyBMLkxhdExuZygzMi4wMzA0LCAxMTguNzk2OClcbnZhciBtYXAgPSBMLm1hcCgnbWFwJykuc2V0Vmlldyhwb3NpdGlvbiwgMTMpXG5cbkwudGlsZUxheWVyXG4gIC5jaGluYVByb3ZpZGVyKCdHYW9EZS5Ob3JtYWwuTWFwJywgeyBtYXhab29tOiAxOCwgbWluWm9vbTogMyB9KVxuICAuYWRkVG8obWFwKVxuXG4vLyBMLm1hcmtlcihbMzIuMDMwNCwgMTE4Ljc5NjhdLCB7XG4vLyAgIGljb246IEwuZGl2SWNvbih7XG4vLyAgICAgaHRtbDogJzxpIGNsYXNzPVwiaWNvbmZvbnRcIiBzdHlsZT1cImZvbnQtc2l6ZTogNDBweDtcIj4mI3hlNjU1OzwvaT4nLFxuLy8gICAgIGljb25TaXplOiBbNDAsIDQwXSxcbi8vICAgICBjbGFzc05hbWU6ICd0ZXN0Jyxcbi8vICAgfSksXG4vLyB9KS5hZGRUbyhtYXApXG4vLyBMLm1hcmtlcihbMzIuMDMwNCwgMTE4Ljc5NjhdKS5hZGRUbyhtYXApXG52YXIgZGF0YUxpc3QgPSBbXG4gIHtcbiAgICBnZW9tZXRyeToge1xuICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnLFxuICAgICAgY29vcmRpbmF0ZXM6IFtbMzIuMDQwNCwgMTE4Ljc5NjhdLCBbMzIuMDQwNCwgMTE4Ljc4NjhdXSxcbiAgICB9LFxuICAgIHByaWNlOiAyLFxuICB9LFxuXVxuXG5jb25zdCBsYXllciA9IG5ldyBsZWFmbGV0TWFwLlBvbHlsaW5lc0J1ZmZlckxheWVyKFxuICBtYXAsXG4gIGRhdGFMaXN0LFxuICB7IHRvb2x0aXBBdHRyOiAncHJpY2UnIH0sXG4gIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIGNvbnNvbGUubG9nKGV2ZW50TmFtZSlcbiAgfVxuKVxuXG5sYXllci5kcmF3KClcblxud2luZG93LmxheWVyID0gbGF5ZXJcbiJdLCJzb3VyY2VSb290IjoiIn0=