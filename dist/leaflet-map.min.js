!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.leafletMap=t():e.leafletMap=t()}(window,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class o extends L.Marker{constructor(e,t){super(e,t)}setData(e){this.data=e}getData(){return this.data}}t.default={MarkersLayer:class{constructor(e,t,n,o){this.map=e,this.dataList=t,this.options=n,this.channelFunc=o,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.initLayer()}draw(e){return this.redraw(e)}redraw(e){switch(this.layer&&this.layer.removeFrom(this.map),this.options=Object.assign(this.options,e),this.options.renderType){case"point":this.renderMarkerToPoint();break;case"heat":this.renderMarkerToHeat();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.layer.addTo(this.map),this}setOptions(e,t=!1){this.options=Object.assign(this.options,e),t&&this.redraw()}initLayer(){this.dataList.forEach(e=>{let t=L.geoJSON(e.geometry).getLayers()[0];(t=new o([t.getLatLng().lng,t.getLatLng().lat],{icon:this.getMarkerIcon(e)})).setData(e),this.markers.push(t),this.cacheSegmentParams()})}markerClickHandler(e){this.focusedMarker=e,this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new o(e.getLatLng(),{icon:this.getLargerMarkerIcon(e.getData())}),this.focusedDisplayMarker.addTo(this.map),this.map.panTo(this.focusedMarker.getLatLng()),this.channelFunc("on-click-marker",e)}renderMarkerToPoint(){const e=L.canvasIconLayer({}).addTo(this.map);e.addOnClickListener((e,[{data:t}])=>{this.markerClickHandler(t)}),e.addOnHoverListener((e,[{data:t}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=t,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr],{permanent:!0})}),e.addMarkers(this.markers),this.map.panTo(this.map.getCenter()),this.markerLayer=e,this.layer=this.markerLayer}renderMarkerToHeat(){this.markers.forEach(e=>{const t=e.getLatLng();let n=e.getData()[this.options.heatOptions.dimensionAttr];"number"!=typeof n&&(n=this.options.heatOptions.max),e.setLatLng(L.latLng(t.lat,t.lng,n))}),this.heatLayer=L.heatLayer(this.markers.map(e=>e.getLatLng()),this.options.heatOptions),this.layer=this.heatLayer}getLargerMarkerIcon(e){return this._getMarkerIcon(e,!0)}getMarkerIcon(e){return this._getMarkerIcon(e,!1)}_getMarkerIcon(e,t){let n=this.options.iconSize,o=this.options.iconAnchor;n=t?[1.5*n[0],1.5*n[1]]:n,o=t?[1.5*o[0],1.5*o[1]]:o;const r=this.options.iconColor;switch(this.options.iconType){case"image":return L.icon({iconUrl:this.options.iconImageUrl,iconSize:n,iconAnchor:o});case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(e,{iconSize:n,iconColor:r}),className:t?"large-div-icon-marker":"",iconSize:n,iconAnchor:o});default:throw new Error(`图标类型不支持"${this.options.iconType}"`)}}getCustomIconHTML(e,t){if(this.options.iconRenderer)return t=Object.assign({},this.options,t),this.options.iconRenderer(e,t);switch(this.options.renderPointColorType){case"single":switch(this.options.iconType){case"font_class":return`\n              <i class="${this.options.iconClass}"\n                style="\n                  color: ${t.iconColor};\n                  font-size: ${t.iconSize}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${t.iconColor};\n                  font-size: ${t.iconSize[0]}px;\n                "\n                >\n                ${this.options.iconUnicode}\n              </i>\n            `}case"segmented":switch(this.options.iconType){case"font_class":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(e)};\n                  font-size: ${t.iconSize}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(e)};\n                  font-size: ${t.iconSize}px;\n                "\n                >\n                &#${this.options.iconUnicode}\n              </i>\n            `}default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}}cacheSegmentParams(){const e=this.options.segmentedColors.length;let t=-1/0,n=1/0;for(const e of this.markers){const o=e.getData()[this.options.segmentedAttr];t=Math.max(t,o),n=Math.min(n,o)}const o=(t-n+1)/e;this.segmentedMin=n,this.segmentedStep=o}getSegmentedMarkerColor(e){const t=e[this.options.segmentedAttr];return this.options.segmentedColors[(t-this.segmentedMin)/this.segmentedStep]}},Marker:o}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,