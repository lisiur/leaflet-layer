!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.leafletMap=n():t.leafletMap=n()}(window,function(){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=12)}([function(t,n,e){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,s=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",l="__lodash_hash_undefined__",c=500,h="__lodash_placeholder__",f=1,p=2,g=4,d=1,y=2,v=1,b=2,m=4,_=8,w=16,L=32,k=64,C=128,x=256,M=512,A=30,S="...",P=800,O=16,j=1,D=2,T=1/0,B=9007199254740991,z=1.7976931348623157e308,E=NaN,R=4294967295,I=R-1,F=R>>>1,$=[["ary",C],["bind",v],["bindKey",b],["curry",_],["curryRight",w],["flip",M],["partial",L],["partialRight",k],["rearg",x]],W="[object Arguments]",N="[object Array]",U="[object AsyncFunction]",q="[object Boolean]",H="[object Date]",G="[object DOMException]",J="[object Error]",V="[object Function]",Z="[object GeneratorFunction]",K="[object Map]",Y="[object Number]",Q="[object Null]",X="[object Object]",tt="[object Proxy]",nt="[object RegExp]",et="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",st="[object WeakMap]",at="[object WeakSet]",ut="[object ArrayBuffer]",lt="[object DataView]",ct="[object Float32Array]",ht="[object Float64Array]",ft="[object Int8Array]",pt="[object Int16Array]",gt="[object Int32Array]",dt="[object Uint8Array]",yt="[object Uint8ClampedArray]",vt="[object Uint16Array]",bt="[object Uint32Array]",mt=/\b__p \+= '';/g,_t=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Lt=/&(?:amp|lt|gt|quot|#39);/g,kt=/[&<>"']/g,Ct=RegExp(Lt.source),xt=RegExp(kt.source),Mt=/<%-([\s\S]+?)%>/g,At=/<%([\s\S]+?)%>/g,St=/<%=([\s\S]+?)%>/g,Pt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Ot=/^\w*$/,jt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Dt=/[\\^$.*+?()[\]{}|]/g,Tt=RegExp(Dt.source),Bt=/^\s+|\s+$/g,zt=/^\s+/,Et=/\s+$/,Rt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,It=/\{\n\/\* \[wrapped with (.+)\] \*/,Ft=/,? & /,$t=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wt=/\\(\\)?/g,Nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Ut=/\w*$/,qt=/^[-+]0x[0-9a-f]+$/i,Ht=/^0b[01]+$/i,Gt=/^\[object .+?Constructor\]$/,Jt=/^0o[0-7]+$/i,Vt=/^(?:0|[1-9]\d*)$/,Zt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Kt=/($^)/,Yt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Xt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tn="[\\ud800-\\udfff]",nn="["+Xt+"]",en="["+Qt+"]",rn="\\d+",on="[\\u2700-\\u27bf]",sn="[a-z\\xdf-\\xf6\\xf8-\\xff]",an="[^\\ud800-\\udfff"+Xt+rn+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",un="\\ud83c[\\udffb-\\udfff]",ln="[^\\ud800-\\udfff]",cn="(?:\\ud83c[\\udde6-\\uddff]){2}",hn="[\\ud800-\\udbff][\\udc00-\\udfff]",fn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pn="(?:"+sn+"|"+an+")",gn="(?:"+fn+"|"+an+")",dn="(?:"+en+"|"+un+")"+"?",yn="[\\ufe0e\\ufe0f]?"+dn+("(?:\\u200d(?:"+[ln,cn,hn].join("|")+")[\\ufe0e\\ufe0f]?"+dn+")*"),vn="(?:"+[on,cn,hn].join("|")+")"+yn,bn="(?:"+[ln+en+"?",en,cn,hn,tn].join("|")+")",mn=RegExp("['’]","g"),_n=RegExp(en,"g"),wn=RegExp(un+"(?="+un+")|"+bn+yn,"g"),Ln=RegExp([fn+"?"+sn+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[nn,fn,"$"].join("|")+")",gn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[nn,fn+pn,"$"].join("|")+")",fn+"?"+pn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",rn,vn].join("|"),"g"),kn=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),Cn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,xn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Mn=-1,An={};An[ct]=An[ht]=An[ft]=An[pt]=An[gt]=An[dt]=An[yt]=An[vt]=An[bt]=!0,An[W]=An[N]=An[ut]=An[q]=An[lt]=An[H]=An[J]=An[V]=An[K]=An[Y]=An[X]=An[nt]=An[et]=An[rt]=An[st]=!1;var Sn={};Sn[W]=Sn[N]=Sn[ut]=Sn[lt]=Sn[q]=Sn[H]=Sn[ct]=Sn[ht]=Sn[ft]=Sn[pt]=Sn[gt]=Sn[K]=Sn[Y]=Sn[X]=Sn[nt]=Sn[et]=Sn[rt]=Sn[it]=Sn[dt]=Sn[yt]=Sn[vt]=Sn[bt]=!0,Sn[J]=Sn[V]=Sn[st]=!1;var Pn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},On=parseFloat,jn=parseInt,Dn="object"==typeof t&&t&&t.Object===Object&&t,Tn="object"==typeof self&&self&&self.Object===Object&&self,Bn=Dn||Tn||Function("return this")(),zn="object"==typeof n&&n&&!n.nodeType&&n,En=zn&&"object"==typeof r&&r&&!r.nodeType&&r,Rn=En&&En.exports===zn,In=Rn&&Dn.process,Fn=function(){try{var t=En&&En.require&&En.require("util").types;return t||In&&In.binding&&In.binding("util")}catch(t){}}(),$n=Fn&&Fn.isArrayBuffer,Wn=Fn&&Fn.isDate,Nn=Fn&&Fn.isMap,Un=Fn&&Fn.isRegExp,qn=Fn&&Fn.isSet,Hn=Fn&&Fn.isTypedArray;function Gn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Jn(t,n,e,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];n(r,s,e(s),t)}return r}function Vn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function Zn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function Kn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Yn(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var s=t[e];n(s,e,t)&&(o[i++]=s)}return o}function Qn(t,n){return!!(null==t?0:t.length)&&ue(t,n,0)>-1}function Xn(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}function te(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}function ne(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}function ee(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}function re(t,n,e,r){var i=null==t?0:t.length;for(r&&i&&(e=t[--i]);i--;)e=n(e,t[i],i,t);return e}function ie(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var oe=fe("length");function se(t,n,e){var r;return e(t,function(t,e,i){if(n(t,e,i))return r=e,!1}),r}function ae(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}function ue(t,n,e){return n==n?function(t,n,e){var r=e-1,i=t.length;for(;++r<i;)if(t[r]===n)return r;return-1}(t,n,e):ae(t,ce,e)}function le(t,n,e,r){for(var i=e-1,o=t.length;++i<o;)if(r(t[i],n))return i;return-1}function ce(t){return t!=t}function he(t,n){var e=null==t?0:t.length;return e?de(t,n)/e:E}function fe(t){return function(n){return null==n?o:n[t]}}function pe(t){return function(n){return null==t?o:t[n]}}function ge(t,n,e,r,i){return i(t,function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)}),e}function de(t,n){for(var e,r=-1,i=t.length;++r<i;){var s=n(t[r]);s!==o&&(e=e===o?s:e+s)}return e}function ye(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function ve(t){return function(n){return t(n)}}function be(t,n){return te(n,function(n){return t[n]})}function me(t,n){return t.has(n)}function _e(t,n){for(var e=-1,r=t.length;++e<r&&ue(n,t[e],0)>-1;);return e}function we(t,n){for(var e=t.length;e--&&ue(n,t[e],0)>-1;);return e}var Le=pe({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),ke=pe({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ce(t){return"\\"+Pn[t]}function xe(t){return kn.test(t)}function Me(t){var n=-1,e=Array(t.size);return t.forEach(function(t,r){e[++n]=[r,t]}),e}function Ae(t,n){return function(e){return t(n(e))}}function Se(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var s=t[e];s!==n&&s!==h||(t[e]=h,o[i++]=e)}return o}function Pe(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=t}),e}function Oe(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=[t,t]}),e}function je(t){return xe(t)?function(t){var n=wn.lastIndex=0;for(;wn.test(t);)++n;return n}(t):oe(t)}function De(t){return xe(t)?function(t){return t.match(wn)||[]}(t):function(t){return t.split("")}(t)}var Te=pe({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Be=function t(n){var e=(n=null==n?Bn:Be.defaults(Bn.Object(),n,Be.pick(Bn,xn))).Array,r=n.Date,i=n.Error,Qt=n.Function,Xt=n.Math,tn=n.Object,nn=n.RegExp,en=n.String,rn=n.TypeError,on=e.prototype,sn=Qt.prototype,an=tn.prototype,un=n["__core-js_shared__"],ln=sn.toString,cn=an.hasOwnProperty,hn=0,fn=function(){var t=/[^.]+$/.exec(un&&un.keys&&un.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),pn=an.toString,gn=ln.call(tn),dn=Bn._,yn=nn("^"+ln.call(cn).replace(Dt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),vn=Rn?n.Buffer:o,bn=n.Symbol,wn=n.Uint8Array,kn=vn?vn.allocUnsafe:o,Pn=Ae(tn.getPrototypeOf,tn),Dn=tn.create,Tn=an.propertyIsEnumerable,zn=on.splice,En=bn?bn.isConcatSpreadable:o,In=bn?bn.iterator:o,Fn=bn?bn.toStringTag:o,oe=function(){try{var t=Io(tn,"defineProperty");return t({},"",{}),t}catch(t){}}(),pe=n.clearTimeout!==Bn.clearTimeout&&n.clearTimeout,ze=r&&r.now!==Bn.Date.now&&r.now,Ee=n.setTimeout!==Bn.setTimeout&&n.setTimeout,Re=Xt.ceil,Ie=Xt.floor,Fe=tn.getOwnPropertySymbols,$e=vn?vn.isBuffer:o,We=n.isFinite,Ne=on.join,Ue=Ae(tn.keys,tn),qe=Xt.max,He=Xt.min,Ge=r.now,Je=n.parseInt,Ve=Xt.random,Ze=on.reverse,Ke=Io(n,"DataView"),Ye=Io(n,"Map"),Qe=Io(n,"Promise"),Xe=Io(n,"Set"),tr=Io(n,"WeakMap"),nr=Io(tn,"create"),er=tr&&new tr,rr={},ir=cs(Ke),or=cs(Ye),sr=cs(Qe),ar=cs(Xe),ur=cs(tr),lr=bn?bn.prototype:o,cr=lr?lr.valueOf:o,hr=lr?lr.toString:o;function fr(t){if(Aa(t)&&!ya(t)&&!(t instanceof yr)){if(t instanceof dr)return t;if(cn.call(t,"__wrapped__"))return hs(t)}return new dr(t)}var pr=function(){function t(){}return function(n){if(!Ma(n))return{};if(Dn)return Dn(n);t.prototype=n;var e=new t;return t.prototype=o,e}}();function gr(){}function dr(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=o}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=R,this.__views__=[]}function vr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function br(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function mr(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function _r(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new mr;++n<e;)this.add(t[n])}function wr(t){var n=this.__data__=new br(t);this.size=n.size}function Lr(t,n){var e=ya(t),r=!e&&da(t),i=!e&&!r&&_a(t),o=!e&&!r&&!i&&za(t),s=e||r||i||o,a=s?ye(t.length,en):[],u=a.length;for(var l in t)!n&&!cn.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Ho(l,u))||a.push(l);return a}function kr(t){var n=t.length;return n?t[_i(0,n-1)]:o}function Cr(t,n){return as(no(t),Tr(n,0,t.length))}function xr(t){return as(no(t))}function Mr(t,n,e){(e===o||fa(t[n],e))&&(e!==o||n in t)||jr(t,n,e)}function Ar(t,n,e){var r=t[n];cn.call(t,n)&&fa(r,e)&&(e!==o||n in t)||jr(t,n,e)}function Sr(t,n){for(var e=t.length;e--;)if(fa(t[e][0],n))return e;return-1}function Pr(t,n,e,r){return Ir(t,function(t,i,o){n(r,t,e(t),o)}),r}function Or(t,n){return t&&eo(n,ru(n),t)}function jr(t,n,e){"__proto__"==n&&oe?oe(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function Dr(t,n){for(var r=-1,i=n.length,s=e(i),a=null==t;++r<i;)s[r]=a?o:Qa(t,n[r]);return s}function Tr(t,n,e){return t==t&&(e!==o&&(t=t<=e?t:e),n!==o&&(t=t>=n?t:n)),t}function Br(t,n,e,r,i,s){var a,u=n&f,l=n&p,c=n&g;if(e&&(a=i?e(t,r,i,s):e(t)),a!==o)return a;if(!Ma(t))return t;var h=ya(t);if(h){if(a=function(t){var n=t.length,e=new t.constructor(n);return n&&"string"==typeof t[0]&&cn.call(t,"index")&&(e.index=t.index,e.input=t.input),e}(t),!u)return no(t,a)}else{var d=Wo(t),y=d==V||d==Z;if(_a(t))return Zi(t,u);if(d==X||d==W||y&&!i){if(a=l||y?{}:Uo(t),!u)return l?function(t,n){return eo(t,$o(t),n)}(t,function(t,n){return t&&eo(n,iu(n),t)}(a,t)):function(t,n){return eo(t,Fo(t),n)}(t,Or(a,t))}else{if(!Sn[d])return i?t:{};a=function(t,n,e){var r=t.constructor;switch(n){case ut:return Ki(t);case q:case H:return new r(+t);case lt:return function(t,n){var e=n?Ki(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case ct:case ht:case ft:case pt:case gt:case dt:case yt:case vt:case bt:return Yi(t,e);case K:return new r;case Y:case rt:return new r(t);case nt:return function(t){var n=new t.constructor(t.source,Ut.exec(t));return n.lastIndex=t.lastIndex,n}(t);case et:return new r;case it:return function(t){return cr?tn(cr.call(t)):{}}(t)}}(t,d,u)}}s||(s=new wr);var v=s.get(t);if(v)return v;if(s.set(t,a),Da(t))return t.forEach(function(r){a.add(Br(r,n,e,r,t,s))}),a;if(Sa(t))return t.forEach(function(r,i){a.set(i,Br(r,n,e,i,t,s))}),a;var b=h?o:(c?l?jo:Oo:l?iu:ru)(t);return Vn(b||t,function(r,i){b&&(r=t[i=r]),Ar(a,i,Br(r,n,e,i,t,s))}),a}function zr(t,n,e){var r=e.length;if(null==t)return!r;for(t=tn(t);r--;){var i=e[r],s=n[i],a=t[i];if(a===o&&!(i in t)||!s(a))return!1}return!0}function Er(t,n,e){if("function"!=typeof t)throw new rn(u);return rs(function(){t.apply(o,e)},n)}function Rr(t,n,e,r){var i=-1,o=Qn,a=!0,u=t.length,l=[],c=n.length;if(!u)return l;e&&(n=te(n,ve(e))),r?(o=Xn,a=!1):n.length>=s&&(o=me,a=!1,n=new _r(n));t:for(;++i<u;){var h=t[i],f=null==e?h:e(h);if(h=r||0!==h?h:0,a&&f==f){for(var p=c;p--;)if(n[p]===f)continue t;l.push(h)}else o(n,f,r)||l.push(h)}return l}fr.templateSettings={escape:Mt,evaluate:At,interpolate:St,variable:"",imports:{_:fr}},fr.prototype=gr.prototype,fr.prototype.constructor=fr,dr.prototype=pr(gr.prototype),dr.prototype.constructor=dr,yr.prototype=pr(gr.prototype),yr.prototype.constructor=yr,vr.prototype.clear=function(){this.__data__=nr?nr(null):{},this.size=0},vr.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},vr.prototype.get=function(t){var n=this.__data__;if(nr){var e=n[t];return e===l?o:e}return cn.call(n,t)?n[t]:o},vr.prototype.has=function(t){var n=this.__data__;return nr?n[t]!==o:cn.call(n,t)},vr.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=nr&&n===o?l:n,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(t){var n=this.__data__,e=Sr(n,t);return!(e<0||(e==n.length-1?n.pop():zn.call(n,e,1),--this.size,0))},br.prototype.get=function(t){var n=this.__data__,e=Sr(n,t);return e<0?o:n[e][1]},br.prototype.has=function(t){return Sr(this.__data__,t)>-1},br.prototype.set=function(t,n){var e=this.__data__,r=Sr(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},mr.prototype.clear=function(){this.size=0,this.__data__={hash:new vr,map:new(Ye||br),string:new vr}},mr.prototype.delete=function(t){var n=Eo(this,t).delete(t);return this.size-=n?1:0,n},mr.prototype.get=function(t){return Eo(this,t).get(t)},mr.prototype.has=function(t){return Eo(this,t).has(t)},mr.prototype.set=function(t,n){var e=Eo(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},_r.prototype.add=_r.prototype.push=function(t){return this.__data__.set(t,l),this},_r.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new br,this.size=0},wr.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,n){var e=this.__data__;if(e instanceof br){var r=e.__data__;if(!Ye||r.length<s-1)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new mr(r)}return e.set(t,n),this.size=e.size,this};var Ir=oo(Gr),Fr=oo(Jr,!0);function $r(t,n){var e=!0;return Ir(t,function(t,r,i){return e=!!n(t,r,i)}),e}function Wr(t,n,e){for(var r=-1,i=t.length;++r<i;){var s=t[r],a=n(s);if(null!=a&&(u===o?a==a&&!Ba(a):e(a,u)))var u=a,l=s}return l}function Nr(t,n){var e=[];return Ir(t,function(t,r,i){n(t,r,i)&&e.push(t)}),e}function Ur(t,n,e,r,i){var o=-1,s=t.length;for(e||(e=qo),i||(i=[]);++o<s;){var a=t[o];n>0&&e(a)?n>1?Ur(a,n-1,e,r,i):ne(i,a):r||(i[i.length]=a)}return i}var qr=so(),Hr=so(!0);function Gr(t,n){return t&&qr(t,n,ru)}function Jr(t,n){return t&&Hr(t,n,ru)}function Vr(t,n){return Yn(n,function(n){return ka(t[n])})}function Zr(t,n){for(var e=0,r=(n=Hi(n,t)).length;null!=t&&e<r;)t=t[ls(n[e++])];return e&&e==r?t:o}function Kr(t,n,e){var r=n(t);return ya(t)?r:ne(r,e(t))}function Yr(t){return null==t?t===o?ot:Q:Fn&&Fn in tn(t)?function(t){var n=cn.call(t,Fn),e=t[Fn];try{t[Fn]=o;var r=!0}catch(t){}var i=pn.call(t);return r&&(n?t[Fn]=e:delete t[Fn]),i}(t):function(t){return pn.call(t)}(t)}function Qr(t,n){return t>n}function Xr(t,n){return null!=t&&cn.call(t,n)}function ti(t,n){return null!=t&&n in tn(t)}function ni(t,n,r){for(var i=r?Xn:Qn,s=t[0].length,a=t.length,u=a,l=e(a),c=1/0,h=[];u--;){var f=t[u];u&&n&&(f=te(f,ve(n))),c=He(f.length,c),l[u]=!r&&(n||s>=120&&f.length>=120)?new _r(u&&f):o}f=t[0];var p=-1,g=l[0];t:for(;++p<s&&h.length<c;){var d=f[p],y=n?n(d):d;if(d=r||0!==d?d:0,!(g?me(g,y):i(h,y,r))){for(u=a;--u;){var v=l[u];if(!(v?me(v,y):i(t[u],y,r)))continue t}g&&g.push(y),h.push(d)}}return h}function ei(t,n,e){var r=null==(t=ts(t,n=Hi(n,t)))?t:t[ls(Ls(n))];return null==r?o:Gn(r,t,e)}function ri(t){return Aa(t)&&Yr(t)==W}function ii(t,n,e,r,i){return t===n||(null==t||null==n||!Aa(t)&&!Aa(n)?t!=t&&n!=n:function(t,n,e,r,i,s){var a=ya(t),u=ya(n),l=a?N:Wo(t),c=u?N:Wo(n),h=(l=l==W?X:l)==X,f=(c=c==W?X:c)==X,p=l==c;if(p&&_a(t)){if(!_a(n))return!1;a=!0,h=!1}if(p&&!h)return s||(s=new wr),a||za(t)?So(t,n,e,r,i,s):function(t,n,e,r,i,o,s){switch(e){case lt:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case ut:return!(t.byteLength!=n.byteLength||!o(new wn(t),new wn(n)));case q:case H:case Y:return fa(+t,+n);case J:return t.name==n.name&&t.message==n.message;case nt:case rt:return t==n+"";case K:var a=Me;case et:var u=r&d;if(a||(a=Pe),t.size!=n.size&&!u)return!1;var l=s.get(t);if(l)return l==n;r|=y,s.set(t,n);var c=So(a(t),a(n),r,i,o,s);return s.delete(t),c;case it:if(cr)return cr.call(t)==cr.call(n)}return!1}(t,n,l,e,r,i,s);if(!(e&d)){var g=h&&cn.call(t,"__wrapped__"),v=f&&cn.call(n,"__wrapped__");if(g||v){var b=g?t.value():t,m=v?n.value():n;return s||(s=new wr),i(b,m,e,r,s)}}return!!p&&(s||(s=new wr),function(t,n,e,r,i,s){var a=e&d,u=Oo(t),l=u.length,c=Oo(n).length;if(l!=c&&!a)return!1;for(var h=l;h--;){var f=u[h];if(!(a?f in n:cn.call(n,f)))return!1}var p=s.get(t);if(p&&s.get(n))return p==n;var g=!0;s.set(t,n),s.set(n,t);for(var y=a;++h<l;){f=u[h];var v=t[f],b=n[f];if(r)var m=a?r(b,v,f,n,t,s):r(v,b,f,t,n,s);if(!(m===o?v===b||i(v,b,e,r,s):m)){g=!1;break}y||(y="constructor"==f)}if(g&&!y){var _=t.constructor,w=n.constructor;_!=w&&"constructor"in t&&"constructor"in n&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(g=!1)}return s.delete(t),s.delete(n),g}(t,n,e,r,i,s))}(t,n,e,r,ii,i))}function oi(t,n,e,r){var i=e.length,s=i,a=!r;if(null==t)return!s;for(t=tn(t);i--;){var u=e[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<s;){var l=(u=e[i])[0],c=t[l],h=u[1];if(a&&u[2]){if(c===o&&!(l in t))return!1}else{var f=new wr;if(r)var p=r(c,h,l,t,n,f);if(!(p===o?ii(h,c,d|y,r,f):p))return!1}}return!0}function si(t){return!(!Ma(t)||function(t){return!!fn&&fn in t}(t))&&(ka(t)?yn:Gt).test(cs(t))}function ai(t){return"function"==typeof t?t:null==t?Pu:"object"==typeof t?ya(t)?pi(t[0],t[1]):fi(t):Iu(t)}function ui(t){if(!Ko(t))return Ue(t);var n=[];for(var e in tn(t))cn.call(t,e)&&"constructor"!=e&&n.push(e);return n}function li(t){if(!Ma(t))return function(t){var n=[];if(null!=t)for(var e in tn(t))n.push(e);return n}(t);var n=Ko(t),e=[];for(var r in t)("constructor"!=r||!n&&cn.call(t,r))&&e.push(r);return e}function ci(t,n){return t<n}function hi(t,n){var r=-1,i=ba(t)?e(t.length):[];return Ir(t,function(t,e,o){i[++r]=n(t,e,o)}),i}function fi(t){var n=Ro(t);return 1==n.length&&n[0][2]?Qo(n[0][0],n[0][1]):function(e){return e===t||oi(e,t,n)}}function pi(t,n){return Jo(t)&&Yo(n)?Qo(ls(t),n):function(e){var r=Qa(e,t);return r===o&&r===n?Xa(e,t):ii(n,r,d|y)}}function gi(t,n,e,r,i){t!==n&&qr(n,function(s,a){if(Ma(s))i||(i=new wr),function(t,n,e,r,i,s,a){var u=ns(t,e),l=ns(n,e),c=a.get(l);if(c)Mr(t,e,c);else{var h=s?s(u,l,e+"",t,n,a):o,f=h===o;if(f){var p=ya(l),g=!p&&_a(l),d=!p&&!g&&za(l);h=l,p||g||d?ya(u)?h=u:ma(u)?h=no(u):g?(f=!1,h=Zi(l,!0)):d?(f=!1,h=Yi(l,!0)):h=[]:Oa(l)||da(l)?(h=u,da(u)?h=Ua(u):Ma(u)&&!ka(u)||(h=Uo(l))):f=!1}f&&(a.set(l,h),i(h,l,r,s,a),a.delete(l)),Mr(t,e,h)}}(t,n,a,e,gi,r,i);else{var u=r?r(ns(t,a),s,a+"",t,n,i):o;u===o&&(u=s),Mr(t,a,u)}},iu)}function di(t,n){var e=t.length;if(e)return Ho(n+=n<0?e:0,e)?t[n]:o}function yi(t,n,e){var r=-1;return n=te(n.length?n:[Pu],ve(zo())),function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(hi(t,function(t,e,i){return{criteria:te(n,function(n){return n(t)}),index:++r,value:t}}),function(t,n){return function(t,n,e){for(var r=-1,i=t.criteria,o=n.criteria,s=i.length,a=e.length;++r<s;){var u=Qi(i[r],o[r]);if(u){if(r>=a)return u;var l=e[r];return u*("desc"==l?-1:1)}}return t.index-n.index}(t,n,e)})}function vi(t,n,e){for(var r=-1,i=n.length,o={};++r<i;){var s=n[r],a=Zr(t,s);e(a,s)&&xi(o,Hi(s,t),a)}return o}function bi(t,n,e,r){var i=r?le:ue,o=-1,s=n.length,a=t;for(t===n&&(n=no(n)),e&&(a=te(t,ve(e)));++o<s;)for(var u=0,l=n[o],c=e?e(l):l;(u=i(a,c,u,r))>-1;)a!==t&&zn.call(a,u,1),zn.call(t,u,1);return t}function mi(t,n){for(var e=t?n.length:0,r=e-1;e--;){var i=n[e];if(e==r||i!==o){var o=i;Ho(i)?zn.call(t,i,1):Ri(t,i)}}return t}function _i(t,n){return t+Ie(Ve()*(n-t+1))}function wi(t,n){var e="";if(!t||n<1||n>B)return e;do{n%2&&(e+=t),(n=Ie(n/2))&&(t+=t)}while(n);return e}function Li(t,n){return is(Xo(t,n,Pu),t+"")}function ki(t){return kr(fu(t))}function Ci(t,n){var e=fu(t);return as(e,Tr(n,0,e.length))}function xi(t,n,e,r){if(!Ma(t))return t;for(var i=-1,s=(n=Hi(n,t)).length,a=s-1,u=t;null!=u&&++i<s;){var l=ls(n[i]),c=e;if(i!=a){var h=u[l];(c=r?r(h,l,u):o)===o&&(c=Ma(h)?h:Ho(n[i+1])?[]:{})}Ar(u,l,c),u=u[l]}return t}var Mi=er?function(t,n){return er.set(t,n),t}:Pu,Ai=oe?function(t,n){return oe(t,"toString",{configurable:!0,enumerable:!1,value:Mu(n),writable:!0})}:Pu;function Si(t){return as(fu(t))}function Pi(t,n,r){var i=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(r=r>o?o:r)<0&&(r+=o),o=n>r?0:r-n>>>0,n>>>=0;for(var s=e(o);++i<o;)s[i]=t[i+n];return s}function Oi(t,n){var e;return Ir(t,function(t,r,i){return!(e=n(t,r,i))}),!!e}function ji(t,n,e){var r=0,i=null==t?r:t.length;if("number"==typeof n&&n==n&&i<=F){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!Ba(s)&&(e?s<=n:s<n)?r=o+1:i=o}return i}return Di(t,n,Pu,e)}function Di(t,n,e,r){n=e(n);for(var i=0,s=null==t?0:t.length,a=n!=n,u=null===n,l=Ba(n),c=n===o;i<s;){var h=Ie((i+s)/2),f=e(t[h]),p=f!==o,g=null===f,d=f==f,y=Ba(f);if(a)var v=r||d;else v=c?d&&(r||p):u?d&&p&&(r||!g):l?d&&p&&!g&&(r||!y):!g&&!y&&(r?f<=n:f<n);v?i=h+1:s=h}return He(s,I)}function Ti(t,n){for(var e=-1,r=t.length,i=0,o=[];++e<r;){var s=t[e],a=n?n(s):s;if(!e||!fa(a,u)){var u=a;o[i++]=0===s?0:s}}return o}function Bi(t){return"number"==typeof t?t:Ba(t)?E:+t}function zi(t){if("string"==typeof t)return t;if(ya(t))return te(t,zi)+"";if(Ba(t))return hr?hr.call(t):"";var n=t+"";return"0"==n&&1/t==-T?"-0":n}function Ei(t,n,e){var r=-1,i=Qn,o=t.length,a=!0,u=[],l=u;if(e)a=!1,i=Xn;else if(o>=s){var c=n?null:Lo(t);if(c)return Pe(c);a=!1,i=me,l=new _r}else l=n?[]:u;t:for(;++r<o;){var h=t[r],f=n?n(h):h;if(h=e||0!==h?h:0,a&&f==f){for(var p=l.length;p--;)if(l[p]===f)continue t;n&&l.push(f),u.push(h)}else i(l,f,e)||(l!==u&&l.push(f),u.push(h))}return u}function Ri(t,n){return null==(t=ts(t,n=Hi(n,t)))||delete t[ls(Ls(n))]}function Ii(t,n,e,r){return xi(t,n,e(Zr(t,n)),r)}function Fi(t,n,e,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&n(t[o],o,t););return e?Pi(t,r?0:o,r?o+1:i):Pi(t,r?o+1:0,r?i:o)}function $i(t,n){var e=t;return e instanceof yr&&(e=e.value()),ee(n,function(t,n){return n.func.apply(n.thisArg,ne([t],n.args))},e)}function Wi(t,n,r){var i=t.length;if(i<2)return i?Ei(t[0]):[];for(var o=-1,s=e(i);++o<i;)for(var a=t[o],u=-1;++u<i;)u!=o&&(s[o]=Rr(s[o]||a,t[u],n,r));return Ei(Ur(s,1),n,r)}function Ni(t,n,e){for(var r=-1,i=t.length,s=n.length,a={};++r<i;){var u=r<s?n[r]:o;e(a,t[r],u)}return a}function Ui(t){return ma(t)?t:[]}function qi(t){return"function"==typeof t?t:Pu}function Hi(t,n){return ya(t)?t:Jo(t,n)?[t]:us(qa(t))}var Gi=Li;function Ji(t,n,e){var r=t.length;return e=e===o?r:e,!n&&e>=r?t:Pi(t,n,e)}var Vi=pe||function(t){return Bn.clearTimeout(t)};function Zi(t,n){if(n)return t.slice();var e=t.length,r=kn?kn(e):new t.constructor(e);return t.copy(r),r}function Ki(t){var n=new t.constructor(t.byteLength);return new wn(n).set(new wn(t)),n}function Yi(t,n){var e=n?Ki(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Qi(t,n){if(t!==n){var e=t!==o,r=null===t,i=t==t,s=Ba(t),a=n!==o,u=null===n,l=n==n,c=Ba(n);if(!u&&!c&&!s&&t>n||s&&a&&l&&!u&&!c||r&&a&&l||!e&&l||!i)return 1;if(!r&&!s&&!c&&t<n||c&&e&&i&&!r&&!s||u&&e&&i||!a&&i||!l)return-1}return 0}function Xi(t,n,r,i){for(var o=-1,s=t.length,a=r.length,u=-1,l=n.length,c=qe(s-a,0),h=e(l+c),f=!i;++u<l;)h[u]=n[u];for(;++o<a;)(f||o<s)&&(h[r[o]]=t[o]);for(;c--;)h[u++]=t[o++];return h}function to(t,n,r,i){for(var o=-1,s=t.length,a=-1,u=r.length,l=-1,c=n.length,h=qe(s-u,0),f=e(h+c),p=!i;++o<h;)f[o]=t[o];for(var g=o;++l<c;)f[g+l]=n[l];for(;++a<u;)(p||o<s)&&(f[g+r[a]]=t[o++]);return f}function no(t,n){var r=-1,i=t.length;for(n||(n=e(i));++r<i;)n[r]=t[r];return n}function eo(t,n,e,r){var i=!e;e||(e={});for(var s=-1,a=n.length;++s<a;){var u=n[s],l=r?r(e[u],t[u],u,e,t):o;l===o&&(l=t[u]),i?jr(e,u,l):Ar(e,u,l)}return e}function ro(t,n){return function(e,r){var i=ya(e)?Jn:Pr,o=n?n():{};return i(e,t,zo(r,2),o)}}function io(t){return Li(function(n,e){var r=-1,i=e.length,s=i>1?e[i-1]:o,a=i>2?e[2]:o;for(s=t.length>3&&"function"==typeof s?(i--,s):o,a&&Go(e[0],e[1],a)&&(s=i<3?o:s,i=1),n=tn(n);++r<i;){var u=e[r];u&&t(n,u,r,s)}return n})}function oo(t,n){return function(e,r){if(null==e)return e;if(!ba(e))return t(e,r);for(var i=e.length,o=n?i:-1,s=tn(e);(n?o--:++o<i)&&!1!==r(s[o],o,s););return e}}function so(t){return function(n,e,r){for(var i=-1,o=tn(n),s=r(n),a=s.length;a--;){var u=s[t?a:++i];if(!1===e(o[u],u,o))break}return n}}function ao(t){return function(n){var e=xe(n=qa(n))?De(n):o,r=e?e[0]:n.charAt(0),i=e?Ji(e,1).join(""):n.slice(1);return r[t]()+i}}function uo(t){return function(n){return ee(ku(du(n).replace(mn,"")),t,"")}}function lo(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=pr(t.prototype),r=t.apply(e,n);return Ma(r)?r:e}}function co(t){return function(n,e,r){var i=tn(n);if(!ba(n)){var s=zo(e,3);n=ru(n),e=function(t){return s(i[t],t,i)}}var a=t(n,e,r);return a>-1?i[s?n[a]:a]:o}}function ho(t){return Po(function(n){var e=n.length,r=e,i=dr.prototype.thru;for(t&&n.reverse();r--;){var s=n[r];if("function"!=typeof s)throw new rn(u);if(i&&!a&&"wrapper"==To(s))var a=new dr([],!0)}for(r=a?r:e;++r<e;){var l=To(s=n[r]),c="wrapper"==l?Do(s):o;a=c&&Vo(c[0])&&c[1]==(C|_|L|x)&&!c[4].length&&1==c[9]?a[To(c[0])].apply(a,c[3]):1==s.length&&Vo(s)?a[l]():a.thru(s)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&ya(r))return a.plant(r).value();for(var i=0,o=e?n[i].apply(this,t):r;++i<e;)o=n[i].call(this,o);return o}})}function fo(t,n,r,i,s,a,u,l,c,h){var f=n&C,p=n&v,g=n&b,d=n&(_|w),y=n&M,m=g?o:lo(t);return function v(){for(var b=arguments.length,_=e(b),w=b;w--;)_[w]=arguments[w];if(d)var L=Bo(v),k=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(_,L);if(i&&(_=Xi(_,i,s,d)),a&&(_=to(_,a,u,d)),b-=k,d&&b<h){var C=Se(_,L);return _o(t,n,fo,v.placeholder,r,_,C,l,c,h-b)}var x=p?r:this,M=g?x[t]:t;return b=_.length,l?_=function(t,n){for(var e=t.length,r=He(n.length,e),i=no(t);r--;){var s=n[r];t[r]=Ho(s,e)?i[s]:o}return t}(_,l):y&&b>1&&_.reverse(),f&&c<b&&(_.length=c),this&&this!==Bn&&this instanceof v&&(M=m||lo(M)),M.apply(x,_)}}function po(t,n){return function(e,r){return function(t,n,e,r){return Gr(t,function(t,i,o){n(r,e(t),i,o)}),r}(e,t,n(r),{})}}function go(t,n){return function(e,r){var i;if(e===o&&r===o)return n;if(e!==o&&(i=e),r!==o){if(i===o)return r;"string"==typeof e||"string"==typeof r?(e=zi(e),r=zi(r)):(e=Bi(e),r=Bi(r)),i=t(e,r)}return i}}function yo(t){return Po(function(n){return n=te(n,ve(zo())),Li(function(e){var r=this;return t(n,function(t){return Gn(t,r,e)})})})}function vo(t,n){var e=(n=n===o?" ":zi(n)).length;if(e<2)return e?wi(n,t):n;var r=wi(n,Re(t/je(n)));return xe(n)?Ji(De(r),0,t).join(""):r.slice(0,t)}function bo(t){return function(n,r,i){return i&&"number"!=typeof i&&Go(n,r,i)&&(r=i=o),n=Fa(n),r===o?(r=n,n=0):r=Fa(r),function(t,n,r,i){for(var o=-1,s=qe(Re((n-t)/(r||1)),0),a=e(s);s--;)a[i?s:++o]=t,t+=r;return a}(n,r,i=i===o?n<r?1:-1:Fa(i),t)}}function mo(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=Na(n),e=Na(e)),t(n,e)}}function _o(t,n,e,r,i,s,a,u,l,c){var h=n&_;n|=h?L:k,(n&=~(h?k:L))&m||(n&=~(v|b));var f=[t,n,i,h?s:o,h?a:o,h?o:s,h?o:a,u,l,c],p=e.apply(o,f);return Vo(t)&&es(p,f),p.placeholder=r,os(p,t,n)}function wo(t){var n=Xt[t];return function(t,e){if(t=Na(t),e=null==e?0:He($a(e),292)){var r=(qa(t)+"e").split("e");return+((r=(qa(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Lo=Xe&&1/Pe(new Xe([,-0]))[1]==T?function(t){return new Xe(t)}:Bu;function ko(t){return function(n){var e=Wo(n);return e==K?Me(n):e==et?Oe(n):function(t,n){return te(n,function(n){return[n,t[n]]})}(n,t(n))}}function Co(t,n,r,i,s,a,l,c){var f=n&b;if(!f&&"function"!=typeof t)throw new rn(u);var p=i?i.length:0;if(p||(n&=~(L|k),i=s=o),l=l===o?l:qe($a(l),0),c=c===o?c:$a(c),p-=s?s.length:0,n&k){var g=i,d=s;i=s=o}var y=f?o:Do(t),M=[t,n,r,i,s,g,d,a,l,c];if(y&&function(t,n){var e=t[1],r=n[1],i=e|r,o=i<(v|b|C),s=r==C&&e==_||r==C&&e==x&&t[7].length<=n[8]||r==(C|x)&&n[7].length<=n[8]&&e==_;if(!o&&!s)return t;r&v&&(t[2]=n[2],i|=e&v?0:m);var a=n[3];if(a){var u=t[3];t[3]=u?Xi(u,a,n[4]):a,t[4]=u?Se(t[3],h):n[4]}(a=n[5])&&(u=t[5],t[5]=u?to(u,a,n[6]):a,t[6]=u?Se(t[5],h):n[6]),(a=n[7])&&(t[7]=a),r&C&&(t[8]=null==t[8]?n[8]:He(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(M,y),t=M[0],n=M[1],r=M[2],i=M[3],s=M[4],!(c=M[9]=M[9]===o?f?0:t.length:qe(M[9]-p,0))&&n&(_|w)&&(n&=~(_|w)),n&&n!=v)A=n==_||n==w?function(t,n,r){var i=lo(t);return function s(){for(var a=arguments.length,u=e(a),l=a,c=Bo(s);l--;)u[l]=arguments[l];var h=a<3&&u[0]!==c&&u[a-1]!==c?[]:Se(u,c);return(a-=h.length)<r?_o(t,n,fo,s.placeholder,o,u,h,o,o,r-a):Gn(this&&this!==Bn&&this instanceof s?i:t,this,u)}}(t,n,c):n!=L&&n!=(v|L)||s.length?fo.apply(o,M):function(t,n,r,i){var o=n&v,s=lo(t);return function n(){for(var a=-1,u=arguments.length,l=-1,c=i.length,h=e(c+u),f=this&&this!==Bn&&this instanceof n?s:t;++l<c;)h[l]=i[l];for(;u--;)h[l++]=arguments[++a];return Gn(f,o?r:this,h)}}(t,n,r,i);else var A=function(t,n,e){var r=n&v,i=lo(t);return function n(){return(this&&this!==Bn&&this instanceof n?i:t).apply(r?e:this,arguments)}}(t,n,r);return os((y?Mi:es)(A,M),t,n)}function xo(t,n,e,r){return t===o||fa(t,an[e])&&!cn.call(r,e)?n:t}function Mo(t,n,e,r,i,s){return Ma(t)&&Ma(n)&&(s.set(n,t),gi(t,n,o,Mo,s),s.delete(n)),t}function Ao(t){return Oa(t)?o:t}function So(t,n,e,r,i,s){var a=e&d,u=t.length,l=n.length;if(u!=l&&!(a&&l>u))return!1;var c=s.get(t);if(c&&s.get(n))return c==n;var h=-1,f=!0,p=e&y?new _r:o;for(s.set(t,n),s.set(n,t);++h<u;){var g=t[h],v=n[h];if(r)var b=a?r(v,g,h,n,t,s):r(g,v,h,t,n,s);if(b!==o){if(b)continue;f=!1;break}if(p){if(!ie(n,function(t,n){if(!me(p,n)&&(g===t||i(g,t,e,r,s)))return p.push(n)})){f=!1;break}}else if(g!==v&&!i(g,v,e,r,s)){f=!1;break}}return s.delete(t),s.delete(n),f}function Po(t){return is(Xo(t,o,vs),t+"")}function Oo(t){return Kr(t,ru,Fo)}function jo(t){return Kr(t,iu,$o)}var Do=er?function(t){return er.get(t)}:Bu;function To(t){for(var n=t.name+"",e=rr[n],r=cn.call(rr,n)?e.length:0;r--;){var i=e[r],o=i.func;if(null==o||o==t)return i.name}return n}function Bo(t){return(cn.call(fr,"placeholder")?fr:t).placeholder}function zo(){var t=fr.iteratee||Ou;return t=t===Ou?ai:t,arguments.length?t(arguments[0],arguments[1]):t}function Eo(t,n){var e=t.__data__;return function(t){var n=typeof t;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==t:null===t}(n)?e["string"==typeof n?"string":"hash"]:e.map}function Ro(t){for(var n=ru(t),e=n.length;e--;){var r=n[e],i=t[r];n[e]=[r,i,Yo(i)]}return n}function Io(t,n){var e=function(t,n){return null==t?o:t[n]}(t,n);return si(e)?e:o}var Fo=Fe?function(t){return null==t?[]:(t=tn(t),Yn(Fe(t),function(n){return Tn.call(t,n)}))}:Wu,$o=Fe?function(t){for(var n=[];t;)ne(n,Fo(t)),t=Pn(t);return n}:Wu,Wo=Yr;function No(t,n,e){for(var r=-1,i=(n=Hi(n,t)).length,o=!1;++r<i;){var s=ls(n[r]);if(!(o=null!=t&&e(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&xa(i)&&Ho(s,i)&&(ya(t)||da(t))}function Uo(t){return"function"!=typeof t.constructor||Ko(t)?{}:pr(Pn(t))}function qo(t){return ya(t)||da(t)||!!(En&&t&&t[En])}function Ho(t,n){var e=typeof t;return!!(n=null==n?B:n)&&("number"==e||"symbol"!=e&&Vt.test(t))&&t>-1&&t%1==0&&t<n}function Go(t,n,e){if(!Ma(e))return!1;var r=typeof n;return!!("number"==r?ba(e)&&Ho(n,e.length):"string"==r&&n in e)&&fa(e[n],t)}function Jo(t,n){if(ya(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!Ba(t))||Ot.test(t)||!Pt.test(t)||null!=n&&t in tn(n)}function Vo(t){var n=To(t),e=fr[n];if("function"!=typeof e||!(n in yr.prototype))return!1;if(t===e)return!0;var r=Do(e);return!!r&&t===r[0]}(Ke&&Wo(new Ke(new ArrayBuffer(1)))!=lt||Ye&&Wo(new Ye)!=K||Qe&&"[object Promise]"!=Wo(Qe.resolve())||Xe&&Wo(new Xe)!=et||tr&&Wo(new tr)!=st)&&(Wo=function(t){var n=Yr(t),e=n==X?t.constructor:o,r=e?cs(e):"";if(r)switch(r){case ir:return lt;case or:return K;case sr:return"[object Promise]";case ar:return et;case ur:return st}return n});var Zo=un?ka:Nu;function Ko(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||an)}function Yo(t){return t==t&&!Ma(t)}function Qo(t,n){return function(e){return null!=e&&e[t]===n&&(n!==o||t in tn(e))}}function Xo(t,n,r){return n=qe(n===o?t.length-1:n,0),function(){for(var i=arguments,o=-1,s=qe(i.length-n,0),a=e(s);++o<s;)a[o]=i[n+o];o=-1;for(var u=e(n+1);++o<n;)u[o]=i[o];return u[n]=r(a),Gn(t,this,u)}}function ts(t,n){return n.length<2?t:Zr(t,Pi(n,0,-1))}function ns(t,n){if("__proto__"!=n)return t[n]}var es=ss(Mi),rs=Ee||function(t,n){return Bn.setTimeout(t,n)},is=ss(Ai);function os(t,n,e){var r=n+"";return is(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(Rt,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Vn($,function(e){var r="_."+e[0];n&e[1]&&!Qn(t,r)&&t.push(r)}),t.sort()}(function(t){var n=t.match(It);return n?n[1].split(Ft):[]}(r),e)))}function ss(t){var n=0,e=0;return function(){var r=Ge(),i=O-(r-e);if(e=r,i>0){if(++n>=P)return arguments[0]}else n=0;return t.apply(o,arguments)}}function as(t,n){var e=-1,r=t.length,i=r-1;for(n=n===o?r:n;++e<n;){var s=_i(e,i),a=t[s];t[s]=t[e],t[e]=a}return t.length=n,t}var us=function(t){var n=sa(t,function(t){return e.size===c&&e.clear(),t}),e=n.cache;return n}(function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(jt,function(t,e,r,i){n.push(r?i.replace(Wt,"$1"):e||t)}),n});function ls(t){if("string"==typeof t||Ba(t))return t;var n=t+"";return"0"==n&&1/t==-T?"-0":n}function cs(t){if(null!=t){try{return ln.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function hs(t){if(t instanceof yr)return t.clone();var n=new dr(t.__wrapped__,t.__chain__);return n.__actions__=no(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var fs=Li(function(t,n){return ma(t)?Rr(t,Ur(n,1,ma,!0)):[]}),ps=Li(function(t,n){var e=Ls(n);return ma(e)&&(e=o),ma(t)?Rr(t,Ur(n,1,ma,!0),zo(e,2)):[]}),gs=Li(function(t,n){var e=Ls(n);return ma(e)&&(e=o),ma(t)?Rr(t,Ur(n,1,ma,!0),o,e):[]});function ds(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:$a(e);return i<0&&(i=qe(r+i,0)),ae(t,zo(n,3),i)}function ys(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return e!==o&&(i=$a(e),i=e<0?qe(r+i,0):He(i,r-1)),ae(t,zo(n,3),i,!0)}function vs(t){return null!=t&&t.length?Ur(t,1):[]}function bs(t){return t&&t.length?t[0]:o}var ms=Li(function(t){var n=te(t,Ui);return n.length&&n[0]===t[0]?ni(n):[]}),_s=Li(function(t){var n=Ls(t),e=te(t,Ui);return n===Ls(e)?n=o:e.pop(),e.length&&e[0]===t[0]?ni(e,zo(n,2)):[]}),ws=Li(function(t){var n=Ls(t),e=te(t,Ui);return(n="function"==typeof n?n:o)&&e.pop(),e.length&&e[0]===t[0]?ni(e,o,n):[]});function Ls(t){var n=null==t?0:t.length;return n?t[n-1]:o}var ks=Li(Cs);function Cs(t,n){return t&&t.length&&n&&n.length?bi(t,n):t}var xs=Po(function(t,n){var e=null==t?0:t.length,r=Dr(t,n);return mi(t,te(n,function(t){return Ho(t,e)?+t:t}).sort(Qi)),r});function Ms(t){return null==t?t:Ze.call(t)}var As=Li(function(t){return Ei(Ur(t,1,ma,!0))}),Ss=Li(function(t){var n=Ls(t);return ma(n)&&(n=o),Ei(Ur(t,1,ma,!0),zo(n,2))}),Ps=Li(function(t){var n=Ls(t);return n="function"==typeof n?n:o,Ei(Ur(t,1,ma,!0),o,n)});function Os(t){if(!t||!t.length)return[];var n=0;return t=Yn(t,function(t){if(ma(t))return n=qe(t.length,n),!0}),ye(n,function(n){return te(t,fe(n))})}function js(t,n){if(!t||!t.length)return[];var e=Os(t);return null==n?e:te(e,function(t){return Gn(n,o,t)})}var Ds=Li(function(t,n){return ma(t)?Rr(t,n):[]}),Ts=Li(function(t){return Wi(Yn(t,ma))}),Bs=Li(function(t){var n=Ls(t);return ma(n)&&(n=o),Wi(Yn(t,ma),zo(n,2))}),zs=Li(function(t){var n=Ls(t);return n="function"==typeof n?n:o,Wi(Yn(t,ma),o,n)}),Es=Li(Os);var Rs=Li(function(t){var n=t.length,e=n>1?t[n-1]:o;return js(t,e="function"==typeof e?(t.pop(),e):o)});function Is(t){var n=fr(t);return n.__chain__=!0,n}function Fs(t,n){return n(t)}var $s=Po(function(t){var n=t.length,e=n?t[0]:0,r=this.__wrapped__,i=function(n){return Dr(n,t)};return!(n>1||this.__actions__.length)&&r instanceof yr&&Ho(e)?((r=r.slice(e,+e+(n?1:0))).__actions__.push({func:Fs,args:[i],thisArg:o}),new dr(r,this.__chain__).thru(function(t){return n&&!t.length&&t.push(o),t})):this.thru(i)});var Ws=ro(function(t,n,e){cn.call(t,e)?++t[e]:jr(t,e,1)});var Ns=co(ds),Us=co(ys);function qs(t,n){return(ya(t)?Vn:Ir)(t,zo(n,3))}function Hs(t,n){return(ya(t)?Zn:Fr)(t,zo(n,3))}var Gs=ro(function(t,n,e){cn.call(t,e)?t[e].push(n):jr(t,e,[n])});var Js=Li(function(t,n,r){var i=-1,o="function"==typeof n,s=ba(t)?e(t.length):[];return Ir(t,function(t){s[++i]=o?Gn(n,t,r):ei(t,n,r)}),s}),Vs=ro(function(t,n,e){jr(t,e,n)});function Zs(t,n){return(ya(t)?te:hi)(t,zo(n,3))}var Ks=ro(function(t,n,e){t[e?0:1].push(n)},function(){return[[],[]]});var Ys=Li(function(t,n){if(null==t)return[];var e=n.length;return e>1&&Go(t,n[0],n[1])?n=[]:e>2&&Go(n[0],n[1],n[2])&&(n=[n[0]]),yi(t,Ur(n,1),[])}),Qs=ze||function(){return Bn.Date.now()};function Xs(t,n,e){return n=e?o:n,n=t&&null==n?t.length:n,Co(t,C,o,o,o,o,n)}function ta(t,n){var e;if("function"!=typeof n)throw new rn(u);return t=$a(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=o),e}}var na=Li(function(t,n,e){var r=v;if(e.length){var i=Se(e,Bo(na));r|=L}return Co(t,r,n,e,i)}),ea=Li(function(t,n,e){var r=v|b;if(e.length){var i=Se(e,Bo(ea));r|=L}return Co(n,r,t,e,i)});function ra(t,n,e){var r,i,s,a,l,c,h=0,f=!1,p=!1,g=!0;if("function"!=typeof t)throw new rn(u);function d(n){var e=r,s=i;return r=i=o,h=n,a=t.apply(s,e)}function y(t){var e=t-c;return c===o||e>=n||e<0||p&&t-h>=s}function v(){var t=Qs();if(y(t))return b(t);l=rs(v,function(t){var e=n-(t-c);return p?He(e,s-(t-h)):e}(t))}function b(t){return l=o,g&&r?d(t):(r=i=o,a)}function m(){var t=Qs(),e=y(t);if(r=arguments,i=this,c=t,e){if(l===o)return function(t){return h=t,l=rs(v,n),f?d(t):a}(c);if(p)return l=rs(v,n),d(c)}return l===o&&(l=rs(v,n)),a}return n=Na(n)||0,Ma(e)&&(f=!!e.leading,s=(p="maxWait"in e)?qe(Na(e.maxWait)||0,n):s,g="trailing"in e?!!e.trailing:g),m.cancel=function(){l!==o&&Vi(l),h=0,r=c=i=l=o},m.flush=function(){return l===o?a:b(Qs())},m}var ia=Li(function(t,n){return Er(t,1,n)}),oa=Li(function(t,n,e){return Er(t,Na(n)||0,e)});function sa(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new rn(u);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return e.cache=o.set(i,s)||o,s};return e.cache=new(sa.Cache||mr),e}function aa(t){if("function"!=typeof t)throw new rn(u);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}sa.Cache=mr;var ua=Gi(function(t,n){var e=(n=1==n.length&&ya(n[0])?te(n[0],ve(zo())):te(Ur(n,1),ve(zo()))).length;return Li(function(r){for(var i=-1,o=He(r.length,e);++i<o;)r[i]=n[i].call(this,r[i]);return Gn(t,this,r)})}),la=Li(function(t,n){var e=Se(n,Bo(la));return Co(t,L,o,n,e)}),ca=Li(function(t,n){var e=Se(n,Bo(ca));return Co(t,k,o,n,e)}),ha=Po(function(t,n){return Co(t,x,o,o,o,n)});function fa(t,n){return t===n||t!=t&&n!=n}var pa=mo(Qr),ga=mo(function(t,n){return t>=n}),da=ri(function(){return arguments}())?ri:function(t){return Aa(t)&&cn.call(t,"callee")&&!Tn.call(t,"callee")},ya=e.isArray,va=$n?ve($n):function(t){return Aa(t)&&Yr(t)==ut};function ba(t){return null!=t&&xa(t.length)&&!ka(t)}function ma(t){return Aa(t)&&ba(t)}var _a=$e||Nu,wa=Wn?ve(Wn):function(t){return Aa(t)&&Yr(t)==H};function La(t){if(!Aa(t))return!1;var n=Yr(t);return n==J||n==G||"string"==typeof t.message&&"string"==typeof t.name&&!Oa(t)}function ka(t){if(!Ma(t))return!1;var n=Yr(t);return n==V||n==Z||n==U||n==tt}function Ca(t){return"number"==typeof t&&t==$a(t)}function xa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=B}function Ma(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Aa(t){return null!=t&&"object"==typeof t}var Sa=Nn?ve(Nn):function(t){return Aa(t)&&Wo(t)==K};function Pa(t){return"number"==typeof t||Aa(t)&&Yr(t)==Y}function Oa(t){if(!Aa(t)||Yr(t)!=X)return!1;var n=Pn(t);if(null===n)return!0;var e=cn.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&ln.call(e)==gn}var ja=Un?ve(Un):function(t){return Aa(t)&&Yr(t)==nt};var Da=qn?ve(qn):function(t){return Aa(t)&&Wo(t)==et};function Ta(t){return"string"==typeof t||!ya(t)&&Aa(t)&&Yr(t)==rt}function Ba(t){return"symbol"==typeof t||Aa(t)&&Yr(t)==it}var za=Hn?ve(Hn):function(t){return Aa(t)&&xa(t.length)&&!!An[Yr(t)]};var Ea=mo(ci),Ra=mo(function(t,n){return t<=n});function Ia(t){if(!t)return[];if(ba(t))return Ta(t)?De(t):no(t);if(In&&t[In])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[In]());var n=Wo(t);return(n==K?Me:n==et?Pe:fu)(t)}function Fa(t){return t?(t=Na(t))===T||t===-T?(t<0?-1:1)*z:t==t?t:0:0===t?t:0}function $a(t){var n=Fa(t),e=n%1;return n==n?e?n-e:n:0}function Wa(t){return t?Tr($a(t),0,R):0}function Na(t){if("number"==typeof t)return t;if(Ba(t))return E;if(Ma(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=Ma(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Bt,"");var e=Ht.test(t);return e||Jt.test(t)?jn(t.slice(2),e?2:8):qt.test(t)?E:+t}function Ua(t){return eo(t,iu(t))}function qa(t){return null==t?"":zi(t)}var Ha=io(function(t,n){if(Ko(n)||ba(n))eo(n,ru(n),t);else for(var e in n)cn.call(n,e)&&Ar(t,e,n[e])}),Ga=io(function(t,n){eo(n,iu(n),t)}),Ja=io(function(t,n,e,r){eo(n,iu(n),t,r)}),Va=io(function(t,n,e,r){eo(n,ru(n),t,r)}),Za=Po(Dr);var Ka=Li(function(t,n){t=tn(t);var e=-1,r=n.length,i=r>2?n[2]:o;for(i&&Go(n[0],n[1],i)&&(r=1);++e<r;)for(var s=n[e],a=iu(s),u=-1,l=a.length;++u<l;){var c=a[u],h=t[c];(h===o||fa(h,an[c])&&!cn.call(t,c))&&(t[c]=s[c])}return t}),Ya=Li(function(t){return t.push(o,Mo),Gn(su,o,t)});function Qa(t,n,e){var r=null==t?o:Zr(t,n);return r===o?e:r}function Xa(t,n){return null!=t&&No(t,n,ti)}var tu=po(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=pn.call(n)),t[n]=e},Mu(Pu)),nu=po(function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=pn.call(n)),cn.call(t,n)?t[n].push(e):t[n]=[e]},zo),eu=Li(ei);function ru(t){return ba(t)?Lr(t):ui(t)}function iu(t){return ba(t)?Lr(t,!0):li(t)}var ou=io(function(t,n,e){gi(t,n,e)}),su=io(function(t,n,e,r){gi(t,n,e,r)}),au=Po(function(t,n){var e={};if(null==t)return e;var r=!1;n=te(n,function(n){return n=Hi(n,t),r||(r=n.length>1),n}),eo(t,jo(t),e),r&&(e=Br(e,f|p|g,Ao));for(var i=n.length;i--;)Ri(e,n[i]);return e});var uu=Po(function(t,n){return null==t?{}:function(t,n){return vi(t,n,function(n,e){return Xa(t,e)})}(t,n)});function lu(t,n){if(null==t)return{};var e=te(jo(t),function(t){return[t]});return n=zo(n),vi(t,e,function(t,e){return n(t,e[0])})}var cu=ko(ru),hu=ko(iu);function fu(t){return null==t?[]:be(t,ru(t))}var pu=uo(function(t,n,e){return n=n.toLowerCase(),t+(e?gu(n):n)});function gu(t){return Lu(qa(t).toLowerCase())}function du(t){return(t=qa(t))&&t.replace(Zt,Le).replace(_n,"")}var yu=uo(function(t,n,e){return t+(e?"-":"")+n.toLowerCase()}),vu=uo(function(t,n,e){return t+(e?" ":"")+n.toLowerCase()}),bu=ao("toLowerCase");var mu=uo(function(t,n,e){return t+(e?"_":"")+n.toLowerCase()});var _u=uo(function(t,n,e){return t+(e?" ":"")+Lu(n)});var wu=uo(function(t,n,e){return t+(e?" ":"")+n.toUpperCase()}),Lu=ao("toUpperCase");function ku(t,n,e){return t=qa(t),(n=e?o:n)===o?function(t){return Cn.test(t)}(t)?function(t){return t.match(Ln)||[]}(t):function(t){return t.match($t)||[]}(t):t.match(n)||[]}var Cu=Li(function(t,n){try{return Gn(t,o,n)}catch(t){return La(t)?t:new i(t)}}),xu=Po(function(t,n){return Vn(n,function(n){n=ls(n),jr(t,n,na(t[n],t))}),t});function Mu(t){return function(){return t}}var Au=ho(),Su=ho(!0);function Pu(t){return t}function Ou(t){return ai("function"==typeof t?t:Br(t,f))}var ju=Li(function(t,n){return function(e){return ei(e,t,n)}}),Du=Li(function(t,n){return function(e){return ei(t,e,n)}});function Tu(t,n,e){var r=ru(n),i=Vr(n,r);null!=e||Ma(n)&&(i.length||!r.length)||(e=n,n=t,t=this,i=Vr(n,ru(n)));var o=!(Ma(e)&&"chain"in e&&!e.chain),s=ka(t);return Vn(i,function(e){var r=n[e];t[e]=r,s&&(t.prototype[e]=function(){var n=this.__chain__;if(o||n){var e=t(this.__wrapped__);return(e.__actions__=no(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,ne([this.value()],arguments))})}),t}function Bu(){}var zu=yo(te),Eu=yo(Kn),Ru=yo(ie);function Iu(t){return Jo(t)?fe(ls(t)):function(t){return function(n){return Zr(n,t)}}(t)}var Fu=bo(),$u=bo(!0);function Wu(){return[]}function Nu(){return!1}var Uu=go(function(t,n){return t+n},0),qu=wo("ceil"),Hu=go(function(t,n){return t/n},1),Gu=wo("floor");var Ju=go(function(t,n){return t*n},1),Vu=wo("round"),Zu=go(function(t,n){return t-n},0);return fr.after=function(t,n){if("function"!=typeof n)throw new rn(u);return t=$a(t),function(){if(--t<1)return n.apply(this,arguments)}},fr.ary=Xs,fr.assign=Ha,fr.assignIn=Ga,fr.assignInWith=Ja,fr.assignWith=Va,fr.at=Za,fr.before=ta,fr.bind=na,fr.bindAll=xu,fr.bindKey=ea,fr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ya(t)?t:[t]},fr.chain=Is,fr.chunk=function(t,n,r){n=(r?Go(t,n,r):n===o)?1:qe($a(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var s=0,a=0,u=e(Re(i/n));s<i;)u[a++]=Pi(t,s,s+=n);return u},fr.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,i=[];++n<e;){var o=t[n];o&&(i[r++]=o)}return i},fr.concat=function(){var t=arguments.length;if(!t)return[];for(var n=e(t-1),r=arguments[0],i=t;i--;)n[i-1]=arguments[i];return ne(ya(r)?no(r):[r],Ur(n,1))},fr.cond=function(t){var n=null==t?0:t.length,e=zo();return t=n?te(t,function(t){if("function"!=typeof t[1])throw new rn(u);return[e(t[0]),t[1]]}):[],Li(function(e){for(var r=-1;++r<n;){var i=t[r];if(Gn(i[0],this,e))return Gn(i[1],this,e)}})},fr.conforms=function(t){return function(t){var n=ru(t);return function(e){return zr(e,t,n)}}(Br(t,f))},fr.constant=Mu,fr.countBy=Ws,fr.create=function(t,n){var e=pr(t);return null==n?e:Or(e,n)},fr.curry=function t(n,e,r){var i=Co(n,_,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},fr.curryRight=function t(n,e,r){var i=Co(n,w,o,o,o,o,o,e=r?o:e);return i.placeholder=t.placeholder,i},fr.debounce=ra,fr.defaults=Ka,fr.defaultsDeep=Ya,fr.defer=ia,fr.delay=oa,fr.difference=fs,fr.differenceBy=ps,fr.differenceWith=gs,fr.drop=function(t,n,e){var r=null==t?0:t.length;return r?Pi(t,(n=e||n===o?1:$a(n))<0?0:n,r):[]},fr.dropRight=function(t,n,e){var r=null==t?0:t.length;return r?Pi(t,0,(n=r-(n=e||n===o?1:$a(n)))<0?0:n):[]},fr.dropRightWhile=function(t,n){return t&&t.length?Fi(t,zo(n,3),!0,!0):[]},fr.dropWhile=function(t,n){return t&&t.length?Fi(t,zo(n,3),!0):[]},fr.fill=function(t,n,e,r){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Go(t,n,e)&&(e=0,r=i),function(t,n,e,r){var i=t.length;for((e=$a(e))<0&&(e=-e>i?0:i+e),(r=r===o||r>i?i:$a(r))<0&&(r+=i),r=e>r?0:Wa(r);e<r;)t[e++]=n;return t}(t,n,e,r)):[]},fr.filter=function(t,n){return(ya(t)?Yn:Nr)(t,zo(n,3))},fr.flatMap=function(t,n){return Ur(Zs(t,n),1)},fr.flatMapDeep=function(t,n){return Ur(Zs(t,n),T)},fr.flatMapDepth=function(t,n,e){return e=e===o?1:$a(e),Ur(Zs(t,n),e)},fr.flatten=vs,fr.flattenDeep=function(t){return null!=t&&t.length?Ur(t,T):[]},fr.flattenDepth=function(t,n){return null!=t&&t.length?Ur(t,n=n===o?1:$a(n)):[]},fr.flip=function(t){return Co(t,M)},fr.flow=Au,fr.flowRight=Su,fr.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var i=t[n];r[i[0]]=i[1]}return r},fr.functions=function(t){return null==t?[]:Vr(t,ru(t))},fr.functionsIn=function(t){return null==t?[]:Vr(t,iu(t))},fr.groupBy=Gs,fr.initial=function(t){return null!=t&&t.length?Pi(t,0,-1):[]},fr.intersection=ms,fr.intersectionBy=_s,fr.intersectionWith=ws,fr.invert=tu,fr.invertBy=nu,fr.invokeMap=Js,fr.iteratee=Ou,fr.keyBy=Vs,fr.keys=ru,fr.keysIn=iu,fr.map=Zs,fr.mapKeys=function(t,n){var e={};return n=zo(n,3),Gr(t,function(t,r,i){jr(e,n(t,r,i),t)}),e},fr.mapValues=function(t,n){var e={};return n=zo(n,3),Gr(t,function(t,r,i){jr(e,r,n(t,r,i))}),e},fr.matches=function(t){return fi(Br(t,f))},fr.matchesProperty=function(t,n){return pi(t,Br(n,f))},fr.memoize=sa,fr.merge=ou,fr.mergeWith=su,fr.method=ju,fr.methodOf=Du,fr.mixin=Tu,fr.negate=aa,fr.nthArg=function(t){return t=$a(t),Li(function(n){return di(n,t)})},fr.omit=au,fr.omitBy=function(t,n){return lu(t,aa(zo(n)))},fr.once=function(t){return ta(2,t)},fr.orderBy=function(t,n,e,r){return null==t?[]:(ya(n)||(n=null==n?[]:[n]),ya(e=r?o:e)||(e=null==e?[]:[e]),yi(t,n,e))},fr.over=zu,fr.overArgs=ua,fr.overEvery=Eu,fr.overSome=Ru,fr.partial=la,fr.partialRight=ca,fr.partition=Ks,fr.pick=uu,fr.pickBy=lu,fr.property=Iu,fr.propertyOf=function(t){return function(n){return null==t?o:Zr(t,n)}},fr.pull=ks,fr.pullAll=Cs,fr.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?bi(t,n,zo(e,2)):t},fr.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?bi(t,n,o,e):t},fr.pullAt=xs,fr.range=Fu,fr.rangeRight=$u,fr.rearg=ha,fr.reject=function(t,n){return(ya(t)?Yn:Nr)(t,aa(zo(n,3)))},fr.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,i=[],o=t.length;for(n=zo(n,3);++r<o;){var s=t[r];n(s,r,t)&&(e.push(s),i.push(r))}return mi(t,i),e},fr.rest=function(t,n){if("function"!=typeof t)throw new rn(u);return Li(t,n=n===o?n:$a(n))},fr.reverse=Ms,fr.sampleSize=function(t,n,e){return n=(e?Go(t,n,e):n===o)?1:$a(n),(ya(t)?Cr:Ci)(t,n)},fr.set=function(t,n,e){return null==t?t:xi(t,n,e)},fr.setWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:xi(t,n,e,r)},fr.shuffle=function(t){return(ya(t)?xr:Si)(t)},fr.slice=function(t,n,e){var r=null==t?0:t.length;return r?(e&&"number"!=typeof e&&Go(t,n,e)?(n=0,e=r):(n=null==n?0:$a(n),e=e===o?r:$a(e)),Pi(t,n,e)):[]},fr.sortBy=Ys,fr.sortedUniq=function(t){return t&&t.length?Ti(t):[]},fr.sortedUniqBy=function(t,n){return t&&t.length?Ti(t,zo(n,2)):[]},fr.split=function(t,n,e){return e&&"number"!=typeof e&&Go(t,n,e)&&(n=e=o),(e=e===o?R:e>>>0)?(t=qa(t))&&("string"==typeof n||null!=n&&!ja(n))&&!(n=zi(n))&&xe(t)?Ji(De(t),0,e):t.split(n,e):[]},fr.spread=function(t,n){if("function"!=typeof t)throw new rn(u);return n=null==n?0:qe($a(n),0),Li(function(e){var r=e[n],i=Ji(e,0,n);return r&&ne(i,r),Gn(t,this,i)})},fr.tail=function(t){var n=null==t?0:t.length;return n?Pi(t,1,n):[]},fr.take=function(t,n,e){return t&&t.length?Pi(t,0,(n=e||n===o?1:$a(n))<0?0:n):[]},fr.takeRight=function(t,n,e){var r=null==t?0:t.length;return r?Pi(t,(n=r-(n=e||n===o?1:$a(n)))<0?0:n,r):[]},fr.takeRightWhile=function(t,n){return t&&t.length?Fi(t,zo(n,3),!1,!0):[]},fr.takeWhile=function(t,n){return t&&t.length?Fi(t,zo(n,3)):[]},fr.tap=function(t,n){return n(t),t},fr.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new rn(u);return Ma(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),ra(t,n,{leading:r,maxWait:n,trailing:i})},fr.thru=Fs,fr.toArray=Ia,fr.toPairs=cu,fr.toPairsIn=hu,fr.toPath=function(t){return ya(t)?te(t,ls):Ba(t)?[t]:no(us(qa(t)))},fr.toPlainObject=Ua,fr.transform=function(t,n,e){var r=ya(t),i=r||_a(t)||za(t);if(n=zo(n,4),null==e){var o=t&&t.constructor;e=i?r?new o:[]:Ma(t)&&ka(o)?pr(Pn(t)):{}}return(i?Vn:Gr)(t,function(t,r,i){return n(e,t,r,i)}),e},fr.unary=function(t){return Xs(t,1)},fr.union=As,fr.unionBy=Ss,fr.unionWith=Ps,fr.uniq=function(t){return t&&t.length?Ei(t):[]},fr.uniqBy=function(t,n){return t&&t.length?Ei(t,zo(n,2)):[]},fr.uniqWith=function(t,n){return n="function"==typeof n?n:o,t&&t.length?Ei(t,o,n):[]},fr.unset=function(t,n){return null==t||Ri(t,n)},fr.unzip=Os,fr.unzipWith=js,fr.update=function(t,n,e){return null==t?t:Ii(t,n,qi(e))},fr.updateWith=function(t,n,e,r){return r="function"==typeof r?r:o,null==t?t:Ii(t,n,qi(e),r)},fr.values=fu,fr.valuesIn=function(t){return null==t?[]:be(t,iu(t))},fr.without=Ds,fr.words=ku,fr.wrap=function(t,n){return la(qi(n),t)},fr.xor=Ts,fr.xorBy=Bs,fr.xorWith=zs,fr.zip=Es,fr.zipObject=function(t,n){return Ni(t||[],n||[],Ar)},fr.zipObjectDeep=function(t,n){return Ni(t||[],n||[],xi)},fr.zipWith=Rs,fr.entries=cu,fr.entriesIn=hu,fr.extend=Ga,fr.extendWith=Ja,Tu(fr,fr),fr.add=Uu,fr.attempt=Cu,fr.camelCase=pu,fr.capitalize=gu,fr.ceil=qu,fr.clamp=function(t,n,e){return e===o&&(e=n,n=o),e!==o&&(e=(e=Na(e))==e?e:0),n!==o&&(n=(n=Na(n))==n?n:0),Tr(Na(t),n,e)},fr.clone=function(t){return Br(t,g)},fr.cloneDeep=function(t){return Br(t,f|g)},fr.cloneDeepWith=function(t,n){return Br(t,f|g,n="function"==typeof n?n:o)},fr.cloneWith=function(t,n){return Br(t,g,n="function"==typeof n?n:o)},fr.conformsTo=function(t,n){return null==n||zr(t,n,ru(n))},fr.deburr=du,fr.defaultTo=function(t,n){return null==t||t!=t?n:t},fr.divide=Hu,fr.endsWith=function(t,n,e){t=qa(t),n=zi(n);var r=t.length,i=e=e===o?r:Tr($a(e),0,r);return(e-=n.length)>=0&&t.slice(e,i)==n},fr.eq=fa,fr.escape=function(t){return(t=qa(t))&&xt.test(t)?t.replace(kt,ke):t},fr.escapeRegExp=function(t){return(t=qa(t))&&Tt.test(t)?t.replace(Dt,"\\$&"):t},fr.every=function(t,n,e){var r=ya(t)?Kn:$r;return e&&Go(t,n,e)&&(n=o),r(t,zo(n,3))},fr.find=Ns,fr.findIndex=ds,fr.findKey=function(t,n){return se(t,zo(n,3),Gr)},fr.findLast=Us,fr.findLastIndex=ys,fr.findLastKey=function(t,n){return se(t,zo(n,3),Jr)},fr.floor=Gu,fr.forEach=qs,fr.forEachRight=Hs,fr.forIn=function(t,n){return null==t?t:qr(t,zo(n,3),iu)},fr.forInRight=function(t,n){return null==t?t:Hr(t,zo(n,3),iu)},fr.forOwn=function(t,n){return t&&Gr(t,zo(n,3))},fr.forOwnRight=function(t,n){return t&&Jr(t,zo(n,3))},fr.get=Qa,fr.gt=pa,fr.gte=ga,fr.has=function(t,n){return null!=t&&No(t,n,Xr)},fr.hasIn=Xa,fr.head=bs,fr.identity=Pu,fr.includes=function(t,n,e,r){t=ba(t)?t:fu(t),e=e&&!r?$a(e):0;var i=t.length;return e<0&&(e=qe(i+e,0)),Ta(t)?e<=i&&t.indexOf(n,e)>-1:!!i&&ue(t,n,e)>-1},fr.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=null==e?0:$a(e);return i<0&&(i=qe(r+i,0)),ue(t,n,i)},fr.inRange=function(t,n,e){return n=Fa(n),e===o?(e=n,n=0):e=Fa(e),function(t,n,e){return t>=He(n,e)&&t<qe(n,e)}(t=Na(t),n,e)},fr.invoke=eu,fr.isArguments=da,fr.isArray=ya,fr.isArrayBuffer=va,fr.isArrayLike=ba,fr.isArrayLikeObject=ma,fr.isBoolean=function(t){return!0===t||!1===t||Aa(t)&&Yr(t)==q},fr.isBuffer=_a,fr.isDate=wa,fr.isElement=function(t){return Aa(t)&&1===t.nodeType&&!Oa(t)},fr.isEmpty=function(t){if(null==t)return!0;if(ba(t)&&(ya(t)||"string"==typeof t||"function"==typeof t.splice||_a(t)||za(t)||da(t)))return!t.length;var n=Wo(t);if(n==K||n==et)return!t.size;if(Ko(t))return!ui(t).length;for(var e in t)if(cn.call(t,e))return!1;return!0},fr.isEqual=function(t,n){return ii(t,n)},fr.isEqualWith=function(t,n,e){var r=(e="function"==typeof e?e:o)?e(t,n):o;return r===o?ii(t,n,o,e):!!r},fr.isError=La,fr.isFinite=function(t){return"number"==typeof t&&We(t)},fr.isFunction=ka,fr.isInteger=Ca,fr.isLength=xa,fr.isMap=Sa,fr.isMatch=function(t,n){return t===n||oi(t,n,Ro(n))},fr.isMatchWith=function(t,n,e){return e="function"==typeof e?e:o,oi(t,n,Ro(n),e)},fr.isNaN=function(t){return Pa(t)&&t!=+t},fr.isNative=function(t){if(Zo(t))throw new i(a);return si(t)},fr.isNil=function(t){return null==t},fr.isNull=function(t){return null===t},fr.isNumber=Pa,fr.isObject=Ma,fr.isObjectLike=Aa,fr.isPlainObject=Oa,fr.isRegExp=ja,fr.isSafeInteger=function(t){return Ca(t)&&t>=-B&&t<=B},fr.isSet=Da,fr.isString=Ta,fr.isSymbol=Ba,fr.isTypedArray=za,fr.isUndefined=function(t){return t===o},fr.isWeakMap=function(t){return Aa(t)&&Wo(t)==st},fr.isWeakSet=function(t){return Aa(t)&&Yr(t)==at},fr.join=function(t,n){return null==t?"":Ne.call(t,n)},fr.kebabCase=yu,fr.last=Ls,fr.lastIndexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var i=r;return e!==o&&(i=(i=$a(e))<0?qe(r+i,0):He(i,r-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):ae(t,ce,i,!0)},fr.lowerCase=vu,fr.lowerFirst=bu,fr.lt=Ea,fr.lte=Ra,fr.max=function(t){return t&&t.length?Wr(t,Pu,Qr):o},fr.maxBy=function(t,n){return t&&t.length?Wr(t,zo(n,2),Qr):o},fr.mean=function(t){return he(t,Pu)},fr.meanBy=function(t,n){return he(t,zo(n,2))},fr.min=function(t){return t&&t.length?Wr(t,Pu,ci):o},fr.minBy=function(t,n){return t&&t.length?Wr(t,zo(n,2),ci):o},fr.stubArray=Wu,fr.stubFalse=Nu,fr.stubObject=function(){return{}},fr.stubString=function(){return""},fr.stubTrue=function(){return!0},fr.multiply=Ju,fr.nth=function(t,n){return t&&t.length?di(t,$a(n)):o},fr.noConflict=function(){return Bn._===this&&(Bn._=dn),this},fr.noop=Bu,fr.now=Qs,fr.pad=function(t,n,e){t=qa(t);var r=(n=$a(n))?je(t):0;if(!n||r>=n)return t;var i=(n-r)/2;return vo(Ie(i),e)+t+vo(Re(i),e)},fr.padEnd=function(t,n,e){t=qa(t);var r=(n=$a(n))?je(t):0;return n&&r<n?t+vo(n-r,e):t},fr.padStart=function(t,n,e){t=qa(t);var r=(n=$a(n))?je(t):0;return n&&r<n?vo(n-r,e)+t:t},fr.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Je(qa(t).replace(zt,""),n||0)},fr.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Go(t,n,e)&&(n=e=o),e===o&&("boolean"==typeof n?(e=n,n=o):"boolean"==typeof t&&(e=t,t=o)),t===o&&n===o?(t=0,n=1):(t=Fa(t),n===o?(n=t,t=0):n=Fa(n)),t>n){var r=t;t=n,n=r}if(e||t%1||n%1){var i=Ve();return He(t+i*(n-t+On("1e-"+((i+"").length-1))),n)}return _i(t,n)},fr.reduce=function(t,n,e){var r=ya(t)?ee:ge,i=arguments.length<3;return r(t,zo(n,4),e,i,Ir)},fr.reduceRight=function(t,n,e){var r=ya(t)?re:ge,i=arguments.length<3;return r(t,zo(n,4),e,i,Fr)},fr.repeat=function(t,n,e){return n=(e?Go(t,n,e):n===o)?1:$a(n),wi(qa(t),n)},fr.replace=function(){var t=arguments,n=qa(t[0]);return t.length<3?n:n.replace(t[1],t[2])},fr.result=function(t,n,e){var r=-1,i=(n=Hi(n,t)).length;for(i||(i=1,t=o);++r<i;){var s=null==t?o:t[ls(n[r])];s===o&&(r=i,s=e),t=ka(s)?s.call(t):s}return t},fr.round=Vu,fr.runInContext=t,fr.sample=function(t){return(ya(t)?kr:ki)(t)},fr.size=function(t){if(null==t)return 0;if(ba(t))return Ta(t)?je(t):t.length;var n=Wo(t);return n==K||n==et?t.size:ui(t).length},fr.snakeCase=mu,fr.some=function(t,n,e){var r=ya(t)?ie:Oi;return e&&Go(t,n,e)&&(n=o),r(t,zo(n,3))},fr.sortedIndex=function(t,n){return ji(t,n)},fr.sortedIndexBy=function(t,n,e){return Di(t,n,zo(e,2))},fr.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=ji(t,n);if(r<e&&fa(t[r],n))return r}return-1},fr.sortedLastIndex=function(t,n){return ji(t,n,!0)},fr.sortedLastIndexBy=function(t,n,e){return Di(t,n,zo(e,2),!0)},fr.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var e=ji(t,n,!0)-1;if(fa(t[e],n))return e}return-1},fr.startCase=_u,fr.startsWith=function(t,n,e){return t=qa(t),e=null==e?0:Tr($a(e),0,t.length),n=zi(n),t.slice(e,e+n.length)==n},fr.subtract=Zu,fr.sum=function(t){return t&&t.length?de(t,Pu):0},fr.sumBy=function(t,n){return t&&t.length?de(t,zo(n,2)):0},fr.template=function(t,n,e){var r=fr.templateSettings;e&&Go(t,n,e)&&(n=o),t=qa(t),n=Ja({},n,r,xo);var i,s,a=Ja({},n.imports,r.imports,xo),u=ru(a),l=be(a,u),c=0,h=n.interpolate||Kt,f="__p += '",p=nn((n.escape||Kt).source+"|"+h.source+"|"+(h===St?Nt:Kt).source+"|"+(n.evaluate||Kt).source+"|$","g"),g="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++Mn+"]")+"\n";t.replace(p,function(n,e,r,o,a,u){return r||(r=o),f+=t.slice(c,u).replace(Yt,Ce),e&&(i=!0,f+="' +\n__e("+e+") +\n'"),a&&(s=!0,f+="';\n"+a+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+n.length,n}),f+="';\n";var d=n.variable;d||(f="with (obj) {\n"+f+"\n}\n"),f=(s?f.replace(mt,""):f).replace(_t,"$1").replace(wt,"$1;"),f="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Cu(function(){return Qt(u,g+"return "+f).apply(o,l)});if(y.source=f,La(y))throw y;return y},fr.times=function(t,n){if((t=$a(t))<1||t>B)return[];var e=R,r=He(t,R);n=zo(n),t-=R;for(var i=ye(r,n);++e<t;)n(e);return i},fr.toFinite=Fa,fr.toInteger=$a,fr.toLength=Wa,fr.toLower=function(t){return qa(t).toLowerCase()},fr.toNumber=Na,fr.toSafeInteger=function(t){return t?Tr($a(t),-B,B):0===t?t:0},fr.toString=qa,fr.toUpper=function(t){return qa(t).toUpperCase()},fr.trim=function(t,n,e){if((t=qa(t))&&(e||n===o))return t.replace(Bt,"");if(!t||!(n=zi(n)))return t;var r=De(t),i=De(n);return Ji(r,_e(r,i),we(r,i)+1).join("")},fr.trimEnd=function(t,n,e){if((t=qa(t))&&(e||n===o))return t.replace(Et,"");if(!t||!(n=zi(n)))return t;var r=De(t);return Ji(r,0,we(r,De(n))+1).join("")},fr.trimStart=function(t,n,e){if((t=qa(t))&&(e||n===o))return t.replace(zt,"");if(!t||!(n=zi(n)))return t;var r=De(t);return Ji(r,_e(r,De(n))).join("")},fr.truncate=function(t,n){var e=A,r=S;if(Ma(n)){var i="separator"in n?n.separator:i;e="length"in n?$a(n.length):e,r="omission"in n?zi(n.omission):r}var s=(t=qa(t)).length;if(xe(t)){var a=De(t);s=a.length}if(e>=s)return t;var u=e-je(r);if(u<1)return r;var l=a?Ji(a,0,u).join(""):t.slice(0,u);if(i===o)return l+r;if(a&&(u+=l.length-u),ja(i)){if(t.slice(u).search(i)){var c,h=l;for(i.global||(i=nn(i.source,qa(Ut.exec(i))+"g")),i.lastIndex=0;c=i.exec(h);)var f=c.index;l=l.slice(0,f===o?u:f)}}else if(t.indexOf(zi(i),u)!=u){var p=l.lastIndexOf(i);p>-1&&(l=l.slice(0,p))}return l+r},fr.unescape=function(t){return(t=qa(t))&&Ct.test(t)?t.replace(Lt,Te):t},fr.uniqueId=function(t){var n=++hn;return qa(t)+n},fr.upperCase=wu,fr.upperFirst=Lu,fr.each=qs,fr.eachRight=Hs,fr.first=bs,Tu(fr,function(){var t={};return Gr(fr,function(n,e){cn.call(fr.prototype,e)||(t[e]=n)}),t}(),{chain:!1}),fr.VERSION="4.17.11",Vn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){fr[t].placeholder=fr}),Vn(["drop","take"],function(t,n){yr.prototype[t]=function(e){e=e===o?1:qe($a(e),0);var r=this.__filtered__&&!n?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=He(e,r.__takeCount__):r.__views__.push({size:He(e,R),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),Vn(["filter","map","takeWhile"],function(t,n){var e=n+1,r=e==j||3==e;yr.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:zo(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}}),Vn(["head","last"],function(t,n){var e="take"+(n?"Right":"");yr.prototype[t]=function(){return this[e](1).value()[0]}}),Vn(["initial","tail"],function(t,n){var e="drop"+(n?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[e](1)}}),yr.prototype.compact=function(){return this.filter(Pu)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=Li(function(t,n){return"function"==typeof t?new yr(this):this.map(function(e){return ei(e,t,n)})}),yr.prototype.reject=function(t){return this.filter(aa(zo(t)))},yr.prototype.slice=function(t,n){t=$a(t);var e=this;return e.__filtered__&&(t>0||n<0)?new yr(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==o&&(e=(n=$a(n))<0?e.dropRight(-n):e.take(n-t)),e)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(R)},Gr(yr.prototype,function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),r=/^(?:head|last)$/.test(n),i=fr[r?"take"+("last"==n?"Right":""):n],s=r||/^find/.test(n);i&&(fr.prototype[n]=function(){var n=this.__wrapped__,a=r?[1]:arguments,u=n instanceof yr,l=a[0],c=u||ya(n),h=function(t){var n=i.apply(fr,ne([t],a));return r&&f?n[0]:n};c&&e&&"function"==typeof l&&1!=l.length&&(u=c=!1);var f=this.__chain__,p=!!this.__actions__.length,g=s&&!f,d=u&&!p;if(!s&&c){n=d?n:new yr(this);var y=t.apply(n,a);return y.__actions__.push({func:Fs,args:[h],thisArg:o}),new dr(y,f)}return g&&d?t.apply(this,a):(y=this.thru(h),g?r?y.value()[0]:y.value():y)})}),Vn(["pop","push","shift","sort","splice","unshift"],function(t){var n=on[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);fr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return n.apply(ya(i)?i:[],t)}return this[e](function(e){return n.apply(ya(e)?e:[],t)})}}),Gr(yr.prototype,function(t,n){var e=fr[n];if(e){var r=e.name+"";(rr[r]||(rr[r]=[])).push({name:n,func:e})}}),rr[fo(o,b).name]=[{name:"wrapper",func:o}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=no(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=no(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=no(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=ya(t),r=n<0,i=e?t.length:0,o=function(t,n,e){for(var r=-1,i=e.length;++r<i;){var o=e[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":n-=s;break;case"take":n=He(n,t+s);break;case"takeRight":t=qe(t,n-s)}}return{start:t,end:n}}(0,i,this.__views__),s=o.start,a=o.end,u=a-s,l=r?a:s-1,c=this.__iteratees__,h=c.length,f=0,p=He(u,this.__takeCount__);if(!e||!r&&i==u&&p==u)return $i(t,this.__actions__);var g=[];t:for(;u--&&f<p;){for(var d=-1,y=t[l+=n];++d<h;){var v=c[d],b=v.iteratee,m=v.type,_=b(y);if(m==D)y=_;else if(!_){if(m==j)continue t;break t}}g[f++]=y}return g},fr.prototype.at=$s,fr.prototype.chain=function(){return Is(this)},fr.prototype.commit=function(){return new dr(this.value(),this.__chain__)},fr.prototype.next=function(){this.__values__===o&&(this.__values__=Ia(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},fr.prototype.plant=function(t){for(var n,e=this;e instanceof gr;){var r=hs(e);r.__index__=0,r.__values__=o,n?i.__wrapped__=r:n=r;var i=r;e=e.__wrapped__}return i.__wrapped__=t,n},fr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var n=t;return this.__actions__.length&&(n=new yr(this)),(n=n.reverse()).__actions__.push({func:Fs,args:[Ms],thisArg:o}),new dr(n,this.__chain__)}return this.thru(Ms)},fr.prototype.toJSON=fr.prototype.valueOf=fr.prototype.value=function(){return $i(this.__wrapped__,this.__actions__)},fr.prototype.first=fr.prototype.head,In&&(fr.prototype[In]=function(){return this}),fr}();Bn._=Be,(i=function(){return Be}.call(n,e,n,r))===o||(r.exports=i)}).call(this)}).call(this,e(3),e(4)(t))},function(t,n,e){"use strict";var r=e(5),i=e(9),o=[].slice,s=["keyword","gray","hex"],a={};Object.keys(i).forEach(function(t){a[o.call(i[t].labels).sort().join("")]=t});var u={};function l(t,n){if(!(this instanceof l))return new l(t,n);if(n&&n in s&&(n=null),n&&!(n in i))throw new Error("Unknown model: "+n);var e,c;if(void 0===t)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(t instanceof l)this.model=t.model,this.color=t.color.slice(),this.valpha=t.valpha;else if("string"==typeof t){var h=r.get(t);if(null===h)throw new Error("Unable to parse color from string: "+t);this.model=h.model,c=i[this.model].channels,this.color=h.value.slice(0,c),this.valpha="number"==typeof h.value[c]?h.value[c]:1}else if(t.length){this.model=n||"rgb",c=i[this.model].channels;var p=o.call(t,0,c);this.color=f(p,c),this.valpha="number"==typeof t[c]?t[c]:1}else if("number"==typeof t)t&=16777215,this.model="rgb",this.color=[t>>16&255,t>>8&255,255&t],this.valpha=1;else{this.valpha=1;var g=Object.keys(t);"alpha"in t&&(g.splice(g.indexOf("alpha"),1),this.valpha="number"==typeof t.alpha?t.alpha:0);var d=g.sort().join("");if(!(d in a))throw new Error("Unable to parse color from object: "+JSON.stringify(t));this.model=a[d];var y=i[this.model].labels,v=[];for(e=0;e<y.length;e++)v.push(t[y[e]]);this.color=f(v)}if(u[this.model])for(c=i[this.model].channels,e=0;e<c;e++){var b=u[this.model][e];b&&(this.color[e]=b(this.color[e]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function c(t,n,e){return(t=Array.isArray(t)?t:[t]).forEach(function(t){(u[t]||(u[t]=[]))[n]=e}),t=t[0],function(r){var i;return arguments.length?(e&&(r=e(r)),(i=this[t]()).color[n]=r,i):(i=this[t]().color[n],e&&(i=e(i)),i)}}function h(t){return function(n){return Math.max(0,Math.min(t,n))}}function f(t,n){for(var e=0;e<n;e++)"number"!=typeof t[e]&&(t[e]=0);return t}l.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(t){var n=this.model in r.to?this:this.rgb(),e=1===(n=n.round("number"==typeof t?t:1)).valpha?n.color:n.color.concat(this.valpha);return r.to[n.model](e)},percentString:function(t){var n=this.rgb().round("number"==typeof t?t:1),e=1===n.valpha?n.color:n.color.concat(this.valpha);return r.to.rgb.percent(e)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var t={},n=i[this.model].channels,e=i[this.model].labels,r=0;r<n;r++)t[e[r]]=this.color[r];return 1!==this.valpha&&(t.alpha=this.valpha),t},unitArray:function(){var t=this.rgb().color;return t[0]/=255,t[1]/=255,t[2]/=255,1!==this.valpha&&t.push(this.valpha),t},unitObject:function(){var t=this.rgb().object();return t.r/=255,t.g/=255,t.b/=255,1!==this.valpha&&(t.alpha=this.valpha),t},round:function(t){return t=Math.max(t||0,0),new l(this.color.map(function(t){return function(n){return function(t,n){return Number(t.toFixed(n))}(n,t)}}(t)).concat(this.valpha),this.model)},alpha:function(t){return arguments.length?new l(this.color.concat(Math.max(0,Math.min(1,t))),this.model):this.valpha},red:c("rgb",0,h(255)),green:c("rgb",1,h(255)),blue:c("rgb",2,h(255)),hue:c(["hsl","hsv","hsl","hwb","hcg"],0,function(t){return(t%360+360)%360}),saturationl:c("hsl",1,h(100)),lightness:c("hsl",2,h(100)),saturationv:c("hsv",1,h(100)),value:c("hsv",2,h(100)),chroma:c("hcg",1,h(100)),gray:c("hcg",2,h(100)),white:c("hwb",1,h(100)),wblack:c("hwb",2,h(100)),cyan:c("cmyk",0,h(100)),magenta:c("cmyk",1,h(100)),yellow:c("cmyk",2,h(100)),black:c("cmyk",3,h(100)),x:c("xyz",0,h(100)),y:c("xyz",1,h(100)),z:c("xyz",2,h(100)),l:c("lab",0,h(100)),a:c("lab",1),b:c("lab",2),keyword:function(t){return arguments.length?new l(t):i[this.model].keyword(this.color)},hex:function(t){return arguments.length?new l(t):r.to.hex(this.rgb().round().color)},rgbNumber:function(){var t=this.rgb().color;return(255&t[0])<<16|(255&t[1])<<8|255&t[2]},luminosity:function(){for(var t=this.rgb().color,n=[],e=0;e<t.length;e++){var r=t[e]/255;n[e]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*n[0]+.7152*n[1]+.0722*n[2]},contrast:function(t){var n=this.luminosity(),e=t.luminosity();return n>e?(n+.05)/(e+.05):(e+.05)/(n+.05)},level:function(t){var n=this.contrast(t);return n>=7.1?"AAA":n>=4.5?"AA":""},isDark:function(){var t=this.rgb().color;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var t=this.rgb(),n=0;n<3;n++)t.color[n]=255-t.color[n];return t},lighten:function(t){var n=this.hsl();return n.color[2]+=n.color[2]*t,n},darken:function(t){var n=this.hsl();return n.color[2]-=n.color[2]*t,n},saturate:function(t){var n=this.hsl();return n.color[1]+=n.color[1]*t,n},desaturate:function(t){var n=this.hsl();return n.color[1]-=n.color[1]*t,n},whiten:function(t){var n=this.hwb();return n.color[1]+=n.color[1]*t,n},blacken:function(t){var n=this.hwb();return n.color[2]+=n.color[2]*t,n},grayscale:function(){var t=this.rgb().color,n=.3*t[0]+.59*t[1]+.11*t[2];return l.rgb(n,n,n)},fade:function(t){return this.alpha(this.valpha-this.valpha*t)},opaquer:function(t){return this.alpha(this.valpha+this.valpha*t)},rotate:function(t){var n=this.hsl(),e=n.color[0];return e=(e=(e+t)%360)<0?360+e:e,n.color[0]=e,n},mix:function(t,n){var e=t.rgb(),r=this.rgb(),i=void 0===n?.5:n,o=2*i-1,s=e.alpha()-r.alpha(),a=((o*s==-1?o:(o+s)/(1+o*s))+1)/2,u=1-a;return l.rgb(a*e.red()+u*r.red(),a*e.green()+u*r.green(),a*e.blue()+u*r.blue(),e.alpha()*i+r.alpha()*(1-i))}},Object.keys(i).forEach(function(t){if(-1===s.indexOf(t)){var n=i[t].channels;l.prototype[t]=function(){if(this.model===t)return new l(this);if(arguments.length)return new l(arguments,t);var e="number"==typeof arguments[n]?n:this.valpha;return new l(function(t){return Array.isArray(t)?t:[t]}(i[this.model][t].raw(this.color)).concat(e),t)},l[t]=function(e){return"number"==typeof e&&(e=f(o.call(arguments),n)),new l(e,t)}}}),t.exports=l},function(t,n,e){var r=e(10),i={};for(var o in r)r.hasOwnProperty(o)&&(i[r[o]]=o);var s=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in s)if(s.hasOwnProperty(a)){if(!("channels"in s[a]))throw new Error("missing channels property: "+a);if(!("labels"in s[a]))throw new Error("missing channel labels property: "+a);if(s[a].labels.length!==s[a].channels)throw new Error("channel and label counts mismatch: "+a);var u=s[a].channels,l=s[a].labels;delete s[a].channels,delete s[a].labels,Object.defineProperty(s[a],"channels",{value:u}),Object.defineProperty(s[a],"labels",{value:l})}function c(t,n){return Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2)+Math.pow(t[2]-n[2],2)}s.rgb.hsl=function(t){var n,e,r=t[0]/255,i=t[1]/255,o=t[2]/255,s=Math.min(r,i,o),a=Math.max(r,i,o),u=a-s;return a===s?n=0:r===a?n=(i-o)/u:i===a?n=2+(o-r)/u:o===a&&(n=4+(r-i)/u),(n=Math.min(60*n,360))<0&&(n+=360),e=(s+a)/2,[n,100*(a===s?0:e<=.5?u/(a+s):u/(2-a-s)),100*e]},s.rgb.hsv=function(t){var n,e,r,i,o,s=t[0]/255,a=t[1]/255,u=t[2]/255,l=Math.max(s,a,u),c=l-Math.min(s,a,u),h=function(t){return(l-t)/6/c+.5};return 0===c?i=o=0:(o=c/l,n=h(s),e=h(a),r=h(u),s===l?i=r-e:a===l?i=1/3+n-r:u===l&&(i=2/3+e-n),i<0?i+=1:i>1&&(i-=1)),[360*i,100*o,100*l]},s.rgb.hwb=function(t){var n=t[0],e=t[1],r=t[2];return[s.rgb.hsl(t)[0],100*(1/255*Math.min(n,Math.min(e,r))),100*(r=1-1/255*Math.max(n,Math.max(e,r)))]},s.rgb.cmyk=function(t){var n,e=t[0]/255,r=t[1]/255,i=t[2]/255;return[100*((1-e-(n=Math.min(1-e,1-r,1-i)))/(1-n)||0),100*((1-r-n)/(1-n)||0),100*((1-i-n)/(1-n)||0),100*n]},s.rgb.keyword=function(t){var n=i[t];if(n)return n;var e,o=1/0;for(var s in r)if(r.hasOwnProperty(s)){var a=c(t,r[s]);a<o&&(o=a,e=s)}return e},s.keyword.rgb=function(t){return r[t]},s.rgb.xyz=function(t){var n=t[0]/255,e=t[1]/255,r=t[2]/255;return[100*(.4124*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.3576*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*n+.7152*e+.0722*r),100*(.0193*n+.1192*e+.9505*r)]},s.rgb.lab=function(t){var n=s.rgb.xyz(t),e=n[0],r=n[1],i=n[2];return r/=100,i/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(e-r),200*(r-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},s.hsl.rgb=function(t){var n,e,r,i,o,s=t[0]/360,a=t[1]/100,u=t[2]/100;if(0===a)return[o=255*u,o,o];n=2*u-(e=u<.5?u*(1+a):u+a-u*a),i=[0,0,0];for(var l=0;l<3;l++)(r=s+1/3*-(l-1))<0&&r++,r>1&&r--,o=6*r<1?n+6*(e-n)*r:2*r<1?e:3*r<2?n+(e-n)*(2/3-r)*6:n,i[l]=255*o;return i},s.hsl.hsv=function(t){var n=t[0],e=t[1]/100,r=t[2]/100,i=e,o=Math.max(r,.01);return e*=(r*=2)<=1?r:2-r,i*=o<=1?o:2-o,[n,100*(0===r?2*i/(o+i):2*e/(r+e)),100*((r+e)/2)]},s.hsv.rgb=function(t){var n=t[0]/60,e=t[1]/100,r=t[2]/100,i=Math.floor(n)%6,o=n-Math.floor(n),s=255*r*(1-e),a=255*r*(1-e*o),u=255*r*(1-e*(1-o));switch(r*=255,i){case 0:return[r,u,s];case 1:return[a,r,s];case 2:return[s,r,u];case 3:return[s,a,r];case 4:return[u,s,r];case 5:return[r,s,a]}},s.hsv.hsl=function(t){var n,e,r,i=t[0],o=t[1]/100,s=t[2]/100,a=Math.max(s,.01);return r=(2-o)*s,e=o*a,[i,100*(e=(e/=(n=(2-o)*a)<=1?n:2-n)||0),100*(r/=2)]},s.hwb.rgb=function(t){var n,e,r,i,o,s,a,u=t[0]/360,l=t[1]/100,c=t[2]/100,h=l+c;switch(h>1&&(l/=h,c/=h),e=1-c,r=6*u-(n=Math.floor(6*u)),0!=(1&n)&&(r=1-r),i=l+r*(e-l),n){default:case 6:case 0:o=e,s=i,a=l;break;case 1:o=i,s=e,a=l;break;case 2:o=l,s=e,a=i;break;case 3:o=l,s=i,a=e;break;case 4:o=i,s=l,a=e;break;case 5:o=e,s=l,a=i}return[255*o,255*s,255*a]},s.cmyk.rgb=function(t){var n=t[0]/100,e=t[1]/100,r=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]},s.xyz.rgb=function(t){var n,e,r,i=t[0]/100,o=t[1]/100,s=t[2]/100;return e=-.9689*i+1.8758*o+.0415*s,r=.0557*i+-.204*o+1.057*s,n=(n=3.2406*i+-1.5372*o+-.4986*s)>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,e=e>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(n=Math.min(Math.max(0,n),1)),255*(e=Math.min(Math.max(0,e),1)),255*(r=Math.min(Math.max(0,r),1))]},s.xyz.lab=function(t){var n=t[0],e=t[1],r=t[2];return e/=100,r/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(e=e>.008856?Math.pow(e,1/3):7.787*e+16/116)-16,500*(n-e),200*(e-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},s.lab.xyz=function(t){var n,e,r,i=t[0],o=t[1],s=t[2];n=o/500+(e=(i+16)/116),r=e-s/200;var a=Math.pow(e,3),u=Math.pow(n,3),l=Math.pow(r,3);return e=a>.008856?a:(e-16/116)/7.787,n=u>.008856?u:(n-16/116)/7.787,r=l>.008856?l:(r-16/116)/7.787,[n*=95.047,e*=100,r*=108.883]},s.lab.lch=function(t){var n,e=t[0],r=t[1],i=t[2];return(n=360*Math.atan2(i,r)/2/Math.PI)<0&&(n+=360),[e,Math.sqrt(r*r+i*i),n]},s.lch.lab=function(t){var n,e=t[0],r=t[1];return n=t[2]/360*2*Math.PI,[e,r*Math.cos(n),r*Math.sin(n)]},s.rgb.ansi16=function(t){var n=t[0],e=t[1],r=t[2],i=1 in arguments?arguments[1]:s.rgb.hsv(t)[2];if(0===(i=Math.round(i/50)))return 30;var o=30+(Math.round(r/255)<<2|Math.round(e/255)<<1|Math.round(n/255));return 2===i&&(o+=60),o},s.hsv.ansi16=function(t){return s.rgb.ansi16(s.hsv.rgb(t),t[2])},s.rgb.ansi256=function(t){var n=t[0],e=t[1],r=t[2];return n===e&&e===r?n<8?16:n>248?231:Math.round((n-8)/247*24)+232:16+36*Math.round(n/255*5)+6*Math.round(e/255*5)+Math.round(r/255*5)},s.ansi16.rgb=function(t){var n=t%10;if(0===n||7===n)return t>50&&(n+=3.5),[n=n/10.5*255,n,n];var e=.5*(1+~~(t>50));return[(1&n)*e*255,(n>>1&1)*e*255,(n>>2&1)*e*255]},s.ansi256.rgb=function(t){if(t>=232){var n=10*(t-232)+8;return[n,n,n]}var e;return t-=16,[Math.floor(t/36)/5*255,Math.floor((e=t%36)/6)/5*255,e%6/5*255]},s.rgb.hex=function(t){var n=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(n.length)+n},s.hex.rgb=function(t){var n=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!n)return[0,0,0];var e=n[0];3===n[0].length&&(e=e.split("").map(function(t){return t+t}).join(""));var r=parseInt(e,16);return[r>>16&255,r>>8&255,255&r]},s.rgb.hcg=function(t){var n,e,r=t[0]/255,i=t[1]/255,o=t[2]/255,s=Math.max(Math.max(r,i),o),a=Math.min(Math.min(r,i),o),u=s-a;return n=u<1?a/(1-u):0,e=u<=0?0:s===r?(i-o)/u%6:s===i?2+(o-r)/u:4+(r-i)/u+4,e/=6,[360*(e%=1),100*u,100*n]},s.hsl.hcg=function(t){var n=t[1]/100,e=t[2]/100,r=1,i=0;return(r=e<.5?2*n*e:2*n*(1-e))<1&&(i=(e-.5*r)/(1-r)),[t[0],100*r,100*i]},s.hsv.hcg=function(t){var n=t[1]/100,e=t[2]/100,r=n*e,i=0;return r<1&&(i=(e-r)/(1-r)),[t[0],100*r,100*i]},s.hcg.rgb=function(t){var n=t[0]/360,e=t[1]/100,r=t[2]/100;if(0===e)return[255*r,255*r,255*r];var i,o=[0,0,0],s=n%1*6,a=s%1,u=1-a;switch(Math.floor(s)){case 0:o[0]=1,o[1]=a,o[2]=0;break;case 1:o[0]=u,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=a;break;case 3:o[0]=0,o[1]=u,o[2]=1;break;case 4:o[0]=a,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=u}return i=(1-e)*r,[255*(e*o[0]+i),255*(e*o[1]+i),255*(e*o[2]+i)]},s.hcg.hsv=function(t){var n=t[1]/100,e=n+t[2]/100*(1-n),r=0;return e>0&&(r=n/e),[t[0],100*r,100*e]},s.hcg.hsl=function(t){var n=t[1]/100,e=t[2]/100*(1-n)+.5*n,r=0;return e>0&&e<.5?r=n/(2*e):e>=.5&&e<1&&(r=n/(2*(1-e))),[t[0],100*r,100*e]},s.hcg.hwb=function(t){var n=t[1]/100,e=n+t[2]/100*(1-n);return[t[0],100*(e-n),100*(1-e)]},s.hwb.hcg=function(t){var n=t[1]/100,e=1-t[2]/100,r=e-n,i=0;return r<1&&(i=(e-r)/(1-r)),[t[0],100*r,100*i]},s.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},s.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},s.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},s.gray.hsl=s.gray.hsv=function(t){return[0,0,t[0]]},s.gray.hwb=function(t){return[0,100,t[0]]},s.gray.cmyk=function(t){return[0,0,0,t[0]]},s.gray.lab=function(t){return[t[0],0,0]},s.gray.hex=function(t){var n=255&Math.round(t[0]/100*255),e=((n<<16)+(n<<8)+n).toString(16).toUpperCase();return"000000".substring(e.length)+e},s.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n,e){var r=e(6),i=e(7),o={};for(var s in r)r.hasOwnProperty(s)&&(o[r[s]]=s);var a=t.exports={to:{},get:{}};function u(t,n,e){return Math.min(Math.max(n,t),e)}function l(t){var n=t.toString(16).toUpperCase();return n.length<2?"0"+n:n}a.get=function(t){var n,e;switch(t.substring(0,3).toLowerCase()){case"hsl":n=a.get.hsl(t),e="hsl";break;case"hwb":n=a.get.hwb(t),e="hwb";break;default:n=a.get.rgb(t),e="rgb"}return n?{model:e,value:n}:null},a.get.rgb=function(t){if(!t)return null;var n,e,i,o=[0,0,0,1];if(n=t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(i=n[2],n=n[1],e=0;e<3;e++){var s=2*e;o[e]=parseInt(n.slice(s,s+2),16)}i&&(o[3]=Math.round(parseInt(i,16)/255*100)/100)}else if(n=t.match(/^#([a-f0-9]{3,4})$/i)){for(i=(n=n[1])[3],e=0;e<3;e++)o[e]=parseInt(n[e]+n[e],16);i&&(o[3]=Math.round(parseInt(i+i,16)/255*100)/100)}else if(n=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)){for(e=0;e<3;e++)o[e]=parseInt(n[e+1],0);n[4]&&(o[3]=parseFloat(n[4]))}else{if(!(n=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)))return(n=t.match(/(\D+)/))?"transparent"===n[1]?[0,0,0,0]:(o=r[n[1]])?(o[3]=1,o):null:null;for(e=0;e<3;e++)o[e]=Math.round(2.55*parseFloat(n[e+1]));n[4]&&(o[3]=parseFloat(n[4]))}for(e=0;e<3;e++)o[e]=u(o[e],0,255);return o[3]=u(o[3],0,1),o},a.get.hsl=function(t){if(!t)return null;var n=t.match(/^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(n){var e=parseFloat(n[4]);return[(parseFloat(n[1])+360)%360,u(parseFloat(n[2]),0,100),u(parseFloat(n[3]),0,100),u(isNaN(e)?1:e,0,1)]}return null},a.get.hwb=function(t){if(!t)return null;var n=t.match(/^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(n){var e=parseFloat(n[4]);return[(parseFloat(n[1])%360+360)%360,u(parseFloat(n[2]),0,100),u(parseFloat(n[3]),0,100),u(isNaN(e)?1:e,0,1)]}return null},a.to.hex=function(){var t=i(arguments);return"#"+l(t[0])+l(t[1])+l(t[2])+(t[3]<1?l(Math.round(255*t[3])):"")},a.to.rgb=function(){var t=i(arguments);return t.length<4||1===t[3]?"rgb("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+")":"rgba("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+", "+t[3]+")"},a.to.rgb.percent=function(){var t=i(arguments),n=Math.round(t[0]/255*100),e=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return t.length<4||1===t[3]?"rgb("+n+"%, "+e+"%, "+r+"%)":"rgba("+n+"%, "+e+"%, "+r+"%, "+t[3]+")"},a.to.hsl=function(){var t=i(arguments);return t.length<4||1===t[3]?"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)":"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+t[3]+")"},a.to.hwb=function(){var t=i(arguments),n="";return t.length>=4&&1!==t[3]&&(n=", "+t[3]),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+n+")"},a.to.keyword=function(t){return o[t.slice(0,3)]}},function(t,n,e){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,n,e){"use strict";var r=e(8),i=Array.prototype.concat,o=Array.prototype.slice,s=t.exports=function(t){for(var n=[],e=0,s=t.length;e<s;e++){var a=t[e];r(a)?n=i.call(n,o.call(a)):n.push(a)}return n};s.wrap=function(t){return function(){return t(s(arguments))}}},function(t,n){t.exports=function(t){return!(!t||"string"==typeof t)&&(t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&"String"!==t.constructor.name))}},function(t,n,e){var r=e(2),i=e(11),o={};Object.keys(r).forEach(function(t){o[t]={},Object.defineProperty(o[t],"channels",{value:r[t].channels}),Object.defineProperty(o[t],"labels",{value:r[t].labels});var n=i(t);Object.keys(n).forEach(function(e){var r=n[e];o[t][e]=function(t){var n=function(n){if(void 0===n||null===n)return n;arguments.length>1&&(n=Array.prototype.slice.call(arguments));var e=t(n);if("object"==typeof e)for(var r=e.length,i=0;i<r;i++)e[i]=Math.round(e[i]);return e};return"conversion"in t&&(n.conversion=t.conversion),n}(r),o[t][e].raw=function(t){var n=function(n){return void 0===n||null===n?n:(arguments.length>1&&(n=Array.prototype.slice.call(arguments)),t(n))};return"conversion"in t&&(n.conversion=t.conversion),n}(r)})}),t.exports=o},function(t,n,e){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,n,e){var r=e(2);function i(t){var n=function(){for(var t={},n=Object.keys(r),e=n.length,i=0;i<e;i++)t[n[i]]={distance:-1,parent:null};return t}(),e=[t];for(n[t].distance=0;e.length;)for(var i=e.pop(),o=Object.keys(r[i]),s=o.length,a=0;a<s;a++){var u=o[a],l=n[u];-1===l.distance&&(l.distance=n[i].distance+1,l.parent=i,e.unshift(u))}return n}function o(t,n){return function(e){return n(t(e))}}function s(t,n){for(var e=[n[t].parent,t],i=r[n[t].parent][t],s=n[t].parent;n[s].parent;)e.unshift(n[s].parent),i=o(r[n[s].parent][s],i),s=n[s].parent;return i.conversion=e,i}t.exports=function(t){for(var n=i(t),e={},r=Object.keys(n),o=r.length,a=0;a<o;a++){var u=r[a];null!==n[u].parent&&(e[u]=s(u,n))}return e}},function(t,n,e){"use strict";e.r(n);class r extends L.Marker{constructor(t,n){super(t,n)}setData(t){this.__data=t}getData(){return this.__data}}var i=e(0),o=e(1);function s(t){return o(t).lighten(.5).hex()}function a(t){return o(t).darken(.3).hex()}function u(...t){if(0===t.length)return{};if(1===t.length)return t[0];const n=Object(i.cloneDeep)(t[0]),e=Object(i.cloneDeep)(t[1]);for(const t in e)t in n&&"[object Object]"===Object.prototype.toString.call(n[t])?n[t]=u(n[t],e[t]):n[t]=e[t];return u(n,...t.slice(2))}const l="#3388FF";class c{constructor(t,n,e,r){if(!Array.isArray(n)||0===n.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={renderType:"point",renderPointColorType:"single",iconType:"unicode",iconSize:[20,20],iconClass:"iconfont",iconColor:l,color:l,iconAnchor:[10,20],popup:!0,tooltip:!0,popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",segmentedColors:[l],classifiedColors:[l],isCluster:!1,renderClusterColorType:"smart",bubbleStrokeWidth:1,bubbleColors:[l],bubbleStrokeOpacity:.2,bubbleFillOpacity:.5,bubbleSizes:[10],heatOptions:{max:1,minOpacity:.5}},this.type="marker",this.map=t,this.dataList=n,this.options=e,this.channelFunc=r,this.visible=!0,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.clusterLayer=null,this.bubbleLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.bubbledSizeMin=1/0,this.bubbledSizeStep=1,this.classifiedColorMap={},this.bubbledColorMap={},this.initOptions(e),this.initEvents()}draw(t){if(this.visible)return this.initOptions(t),this.initMarkers(),this.initEvents(),this.redraw()}redraw(){if(this.layer&&this.layer.remove(),this.options.isCluster&&"point"===this.options.renderType)this.layer=this.configClusterLayer();else switch(this.options.renderType){case"point":this.layer=this.configMarkerLayer();break;case"cluster":this.layer=this.configClusterLayer();break;case"heat":this.layer=this.configHeatLayer();break;case"bubble":this.layer=this.configBubbleLayer();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.map.addLayer(this.layer),this}setData(t){this.dataList=t}setOptions(t,n=!1){this.options=u(this.options,t),n&&this.redraw()}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.map(t=>[t.getLatLng().lat,t.getLatLng().lng])}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayMarker&&this.map.removeLayer(this.focusedDisplayMarker),this.map.off("zoomstart",this._zoomStartCb,this),this.map.off("zoomend",this._zoomEndCb,this)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayMarker&&this.focusedDisplayMarker.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.color=t,this.options.iconColor=t,this.redraw()}changeIcon(t){this.options.iconUnicode=t,this.redraw()}pitch(t){this.markers.forEach(n=>{n.getData().id!==t||this.markerClickHandler(n,!0)})}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let n=0;n<t;n++){const t=this.segmentedMin+n*this.segmentedStep,e=t+this.segmentedStep;this.segmentedRefs.push({range:[t,e],color:this.options.segmentedColors[n]})}return this.segmentedRefs}getClassifiedColorRefs(){return this.classifiedColorRefs}getBubbledColorRefs(){return this.bubbledColorRefs}getBubbledSizeRefs(){this.bubbledSizeRefs=[];const t=this.options.bubbleSizes.length;for(let n=0;n<t;n++){const t=this.bubbledSizeMin+n*this.bubbledSizeStep,e=t+this.bubbledSizeStep;this.bubbledSizeRefs.push({range:[t,e],size:this.options.bubbleSizes[n]})}return this.bubbledSizeRefs}_zoomStartCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.removeLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.removeLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.removeLayer(this.markerLayer)}}_zoomEndCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.addLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.addLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.addLayer(this.markerLayer)}}configMarkerLayer(){this.markerLayer&&(this.markerLayer.remove(),this.map.removeLayer(this.markerLayer));const t=L.canvasIconLayer({}).addTo(this.map);return t.addOnClickListener((t,[{data:n}])=>{this.markerClickHandler(n)}),t.addOnContextmenuListener((t,[{data:n}])=>{this.channelFunc("contextmenu",{event:t,target:n})}),this.options.tooltip&&t.addOnHoverListener((t,[{data:n}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=n,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr])}),this.markerLayer=t,this.markerLayer.addMarkers(this.markers),this.map.panTo(this.map.getCenter()),this.markerLayer}getToolTipContent(t){return""+t[this.options.tooltipAttr]}initOptions(t){this.options=u(this.defaultOptions,this.options,t),this.options.color=this.options.color||this.options.iconColor}initMarkers(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.cacheBubbleParams(),this.markers=[],this.dataList.forEach(t=>{const n=L.geoJSON(t.geometry).getLayers()[0],e=new r([n.getLatLng().lat,n.getLatLng().lng],{icon:this.getMarkerIcon(t)});e.setData(t),this.markers.push(e)})}initEvents(){this.map.on("zoomstart",this._zoomStartCb,this),this.map.on("zoomend",this._zoomEndCb,this)}getClassifyMarkerColor(t){return this.classifiedColorMap[t[this.options.classifiedAttr]]}getSegmentedMarkerColor(t){const n=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(n-this.segmentedMin)/this.segmentedStep,10)]}markerClickHandler(t,n){this.focusedMarker=t,this.options.popup&&(this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new r(t.getLatLng(),{icon:this.getLargerMarkerIcon(t.getData())}),this.focusedDisplayMarker.addTo(this.map),this.focusedDisplayMarker.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayMarker.on("popupclose",()=>{this.focusedDisplayMarker.remove()})),t.closeTooltip(),this.map.panTo(this.focusedMarker.getLatLng()),n&&this.map.fitBounds(t.getLatLng().toBounds(10)),this.channelFunc("on-click-marker",t)}configClusterLayer(){return this.clusterLayer&&this.clusterLayer.remove(),this.clusterLayer=L.markerClusterGroup({iconCreateFunction:this.iconCreateFunction.bind(this)}),this.clusterLayer.addLayers(this.markers.map(t=>{const n=new r(t.getLatLng(),{icon:this.getMarkerIcon(t.getData())});return n.setData(t.getData()),n.bindTooltip(""+n.getData()[this.options.tooltipAttr]),n.bindPopup(this.getPopupContent(n.getData())),n.on("click",()=>{this.markerClickHandler(n)}),n})),this.clusterLayer}configHeatLayer(){this.heatLayer&&this.heatLayer.remove();const t=[];return this.markers.forEach(n=>{const e=n.getLatLng(),r=this.options.heatOptions&&this.options.heatOptions.dimensionAttr;let i=r&&n.getData()[r]||this.options.heatOptions.max;"number"!=typeof i&&(i=this.options.heatOptions.max),t.push(i),n.setLatLng(L.latLng(e.lat,e.lng,i))}),this.heatLayer=L.heatLayer(this.markers.map((n,e)=>[n.getLatLng().lat,n.getLatLng().lng,t[e]]),u({minOpacity:.5},this.options.heatOptions)),this.heatLayer}configBubbleLayer(){return this.bubbleLayer&&this.bubbleLayer.remove(),this.bubbleLayer=L.layerGroup(),this.markers.forEach(t=>{const n=this.getBubbledMarkerSize(t.getData()),e=this.getBubbledMarkerColor(t.getData()),r=this.options.bubbleStrokeColor||s(e),i=this.options.bubbleStrokeWidth,o=this.options.bubbleStrokeOpacity,a=this.options.bubbleFillOpacity,u=L.circleMarker(t.getLatLng(),{radius:n,color:r,fillColor:e,weight:i,opacity:o,fillOpacity:a});this.options.popup&&u.bindPopup(this.getPopupContent(t.getData())),this.options.tooltip&&u.bindTooltip(this.getToolTipContent(t.getData())),this.bubbleLayer.addLayer(u)}),this.bubbleLayer}getLargerMarkerIcon(t){return this._getMarkerIcon(t,!0)}getMarkerIcon(t){return this._getMarkerIcon(t,!1)}_getMarkerIcon(t,n){const e=this.options.iconSize,r=this.options.iconAnchor,i=[1.5*e[0],1.5*e[1]],o=[1.5*r[0],1.5*r[1]],s=this.options.color||this.options.iconColor;switch(this.options.iconType){case"image":case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(t,{iconSize:n?i:e,iconColor:s}),className:n?"large-div-icon-marker":"",iconSize:n?i:e,iconAnchor:n?o:r,tooltipAnchor:n?[0,-o[1]/2]:[0,-r[1]/2],popupAnchor:n?[0,-o[1]/2]:[0,-r[1]/2]});default:throw new Error(`renderType 不能为 ${this.options.iconType}`)}}getCustomIconHTML(t,n){if(this.options.iconRenderer)return n=Object.assign({},this.options,n),this.options.iconRenderer(t,n);let e=this.options.color||this.options.iconColor;switch(this.options.renderPointColorType){case"single":e=this.options.color||this.options.iconColor;break;case"classified":e=this.getClassifyMarkerColor(t);break;case"segmented":e=this.getSegmentedMarkerColor(t);break;default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}switch(this.options.iconType){case"font_class":return`\n          <i class="${this.options.iconClass}"\n            style="\n              color: ${e};\n              font-size: ${n.iconSize[0]}px;\n            "\n            />\n        `;case"symbol":return`\n          <svg class="icon-symbol" aria-hidden="true">\n            <use xlink:href="${this.options.iconSymbol}" />\n          </svg>\n        `;case"unicode":return`\n          <i\n            class="${this.options.iconClass}"\n            style="\n              color: ${e};\n              font-size: ${n.iconSize[0]}px;\n            "\n            >\n            ${this.options.iconUnicode}\n          </i>\n        `}}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},n=this.options.classifiedAttr;this.dataList.forEach(e=>{e[n]in t?t[e[n]]=[e[n],t[e[n]][1]+1]:t[e[n]]=[e[n],1]});const e=Object.values(t);e.sort((t,n)=>n[1]-t[1]),this.classifiedColorRefs=[];let r=0;e.forEach(([t,n],e)=>{let i=l;e<this.options.classifiedColors.length&&(i=this.options.classifiedColors[e]),this.classifiedColorMap[t]=i,e<this.options.classifiedColors.length?this.classifiedColorRefs.push({attr:t,color:i,nums:n}):r+=n}),r>0&&this.classifiedColorRefs.push({attr:"其它",color:l,nums:r})}cacheBubbleParams(){if(!this.options.bubbleSizeAttr)return;const t=this.options.bubbleSizes.length;let n=-1/0,e=1/0;for(const t of this.dataList){const r=t[this.options.bubbleSizeAttr];void 0!==r&&(n=Math.max(n,r),e=Math.min(e,r))}const r=(n-e+1)/t;if(this.bubbledSizeMin=e,this.bubbledSizeStep=r,!this.options.bubbleColorAttr)return;const i={},o=this.options.bubbleColorAttr;this.dataList.forEach(t=>{t[o]in i?i[t[o]]=[t[o],i[t[o]][1]+1]:i[t[o]]=[t[o],1]});const s=Object.values(i);s.sort((t,n)=>n[1]-t[1]),this.bubbledColorRefs=[];let a=0;s.forEach(([t,n],e)=>{let r=l;e<this.options.bubbleColors.length?(r=this.options.bubbleColors[e],this.bubbledColorRefs.push({attr:t,color:r,nums:n})):a+=n,this.bubbledColorMap[t]=r}),this.options.bubbleColors.length<s.length&&this.bubbledColorRefs.push({attr:"其他",color:l,nums:a})}cacheSegmentParams(){const t=this.options.segmentedColors.length;let n=-1/0,e=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(n=Math.max(n,r),e=Math.min(e,r))}const r=Math.ceil((n-e+1)/t);this.segmentedMin=e,this.segmentedStep=r}getBubbledMarkerSize(t){const n=t[this.options.bubbleSizeAttr];return this.options.bubbleSizes[parseInt(""+(n-this.bubbledSizeMin)/this.bubbledSizeStep,10)]}getBubbledMarkerColor(t){return this.bubbledColorMap[t[this.options.bubbleColorAttr]]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}iconCreateFunction(t){const n=["#757472","#5093E2","#CB7987","#FC763B"],e=this.dataList.length/n.length,r=.25/n.length;let i=this.options.color||this.options.iconColor,o=1;return"smart"===this.options.renderClusterColorType&&(i=n[Math.floor((t.getChildCount()-1)/e)],o=(Math.floor((t.getChildCount()-1)/e)+1)*r+.75),L.divIcon({html:`\n       <div\n        style="\n          border-radius: 50%;\n          position: relative;\n          width: 50px;\n          height: 50px;\n          transform: scale3d(${o}, ${o}, 1)\n        "\n        >\n        <div\n          style="\n            border-radius: 50%;\n            background: ${s(i)};\n            width: 50px;\n            height: 50px;\n            opacity: 0.7;\n            position: absolute;\n            top: 0;\n            left: 0;\n            ">\n        </div>\n        <div\n          style="\n            border-radius: 50%;\n            background: ${i};\n            opacity: 0.8;\n            width: 32px;\n            height: 32px;\n            margin: 9px;\n          ">\n        </div>\n        <div\n          style="\n            text-align: center;\n            line-height: 32px;\n            position: absolute;\n            top: 9px;\n            left: 9px;\n            width: 32px;\n            height: 32px;\n            color: white;\n            font-size: 14px;\n          "\n          >\n          ${t.getChildCount()}\n        </div>\n       </div>\n      `,iconSize:[40,40]})}}class h extends c{constructor(t,n,e,r){super(t,n,e,r),this.type="markerBuffer";this.options=u(this.options,{bufferOptions:{radius:1e3,stroke:!0,weight:1}},JSON.parse(JSON.stringify(e)))}draw(t){return this.options=u(this.options,t),this.options.bufferOptions.color=this.options.color||this.options.iconColor,this.initMarkers(),this.redraw()}redraw(){if(this.visible)return this.markerLayer&&this.map.removeLayer(this.markerLayer),this.bufferLayer&&this.map.removeLayer(this.bufferLayer),this.markerLayer=this.configMarkerLayer(),this.bufferLayer=this.configBufferLayer(),this.layer=L.layerGroup(),this.layer.addLayer(this.markerLayer),this.layer.addLayer(this.bufferLayer),this.map.addLayer(this.layer),this}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.reduce((t,n)=>t.extend(n.getLatLng().toBounds(this.options.bufferOptions.radius)),this.markers[0].getLatLng().toBounds(this.options.bufferOptions.radius))}configBufferLayer(){const t=L.layerGroup();return this.markers.forEach(n=>{const e=L.circle(n.getLatLng(),u(this.options.bufferOptions,{color:"segmented"===this.options.renderPointColorType?this.getSegmentedMarkerColor(n.getData()):this.options.bufferOptions.color}));if(this.options.bufferTooltipAttr)e.bindTooltip(""+n.getData()[this.options.bufferTooltipAttr]);else switch(typeof this.options.popupAttr){case"string":e.bindTooltip(""+n.getData()[this.options.popupAttr]);break;case"object":e.bindTooltip(""+n.getData()[this.options.popupAttr.value])}t.addLayer(e)}),t}}class f extends L.Polyline{constructor(t,n){super(t,n)}setData(t){this.__data=t}getData(){return this.__data}}const p="#3388FF";class g{constructor(t,n,e,r){if(!Array.isArray(n)||0===n.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={color:p,renderPolylineColorType:"single",segmentedColors:[p],popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",classifiedColors:[p]},this.type="polyline",this.map=t,this.dataList=n,this.options=u(this.defaultOptions,e),this.channelFunc=r,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolyline=null,this.focusedDisplayPolyline=null}draw(t){if(this.visible)return this.initOptions(t),this.initPolylines(),this.redraw()}redraw(){return this.layer&&this.layer.remove(),this.layer=this.configPolylineLayer(),this.map.addLayer(this.layer),this}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,n)=>t.extend(n.getBounds()),L.latLngBounds(this.polylines[0].getBounds().getNorthEast(),this.polylines[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polylines.forEach(n=>{n.getData().id!==t||this.polylineClickHandler(n,!0)})}getClassifiedColorRefs(){return this.classifyColorRefs}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let n=0;n<t;n++){const t=this.segmentedMin+n*this.segmentedStep,e=t+this.segmentedStep;this.segmentedRefs.push({range:[t,e],color:this.options.segmentedColors[n]})}return this.segmentedRefs}initOptions(t){this.options=u(this.defaultOptions,this.options,t)}initPolylines(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polylines=this.dataList.map(t=>{const n=L.geoJSON(t.geometry).getLayers()[0],e=new f(n.getLatLngs());return e.setData(t),e})}getSegmentedPolylineColor(t){const n=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(n-this.segmentedMin)/this.segmentedStep,10)]}polylineClickHandler(t,n){this.focusedPolyline=t,this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.focusedDisplayPolyline=new f(t.getLatLngs(),{color:this.getColor(t.getData()),fillColor:this.getColor(t.getData(),"normal")}),this.focusedDisplayPolyline.addTo(this.map),this.focusedDisplayPolyline.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolyline.on("popupclose",()=>{this.focusedDisplayPolyline.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolyline.getCenter()),n&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polyline",t)}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}configPolylineLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{const n=u({},this.options,{color:this.getColor(t.getData())}),e=new f(t.getLatLngs(),n);e.on("click",()=>{this.polylineClickHandler(t)}),e.on("contextmenu",t=>{this.channelFunc("contextmenu",{event:t,target:e})}),e.setData(t.getData()),this.options.tooltipAttr&&e.bindTooltip(this.getToolTipContent(e.getData())),this.polylineLayer.addLayer(e)}),this.polylineLayer}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},n=this.options.classifiedAttr;this.dataList.forEach(e=>{e[n]in t?t[e[n]]=[e[n],t[e[n]][1]+1]:t[e[n]]=[e[n],1]});const e=Object.values(t);e.sort((t,n)=>n[1]-t[1]),this.classifyColorRefs=[];let r=0;e.forEach(([t,n],e)=>{let i=p;e<this.options.classifiedColors.length?(i=this.options.classifiedColors[e],this.classifyColorRefs.push({attr:t,color:i,nums:n})):r+=n,this.classifyColorMap[t]=i}),this.options.classifiedColors.length<e.length&&this.classifyColorRefs.push({attr:"其他",color:p,nums:r})}getClassifyPolylineColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let n=-1/0,e=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(n=Math.max(n,r),e=Math.min(e,r))}const r=Math.ceil((n-e+1)/t);this.segmentedMin=e,this.segmentedStep=r}getColor(t,n){let e=this.options.color;switch("segmented"===this.options.renderPolylineColorType&&(e=this.getSegmentedPolylineColor(t)),"classified"===this.options.renderPolylineColorType&&(e=this.getClassifyPolylineColor(t)),n){case"darken":return a(e);case"lighten":return s(e);default:return e}}}class d extends g{constructor(t,n,e,r){super(t,n,e,r);this.type="polylineBuffer",this.map=t,this.dataList=n,this.options=e,this.channelFunc=r,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolylineColorType:"single",segmentedColors:["#3388FF"],corridor:100,color:"#3388FF",opacity:.5},e)}draw(t){return this.options=Object.assign(this.options,t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineBufferLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,n)=>t.extend(n.getBounds()),this.polylines[0].getBounds())}changeColor(t){this.options.color=t,this.redraw()}configPolylineBufferLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{const n=Object.assign({},this.options,{color:"single"===this.options.renderPolylineColorType?this.options.color:this.getSegmentedPolylineColor(t.getData())}),e=L.corridor(t.getLatLngs().map(t=>L.latLng([t.lat,t.lng])),n);this.options.tooltipAttr&&e.bindTooltip(this.getToolTipContent(t.getData())),this.options.popupAttr&&e.bindPopup(this.getPopupContent(t.getData())),this.polylineLayer.addLayer(e)}),this.polylineLayer}}class y extends L.Polygon{constructor(t,n){super(t,n)}setData(t){this.__data=t}getData(){return this.__data}}const v="#72AFDF";class b{constructor(t,n,e,r){if(!Array.isArray(n)||0===n.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",color:v,fill:!0,fillColor:v,weight:1,opacity:1,fillOpacity:.4,renderPolygonColorType:"single",segmentedColors:[v],classifiedColors:[v]},this.type="polygon",this.map=t,this.dataList=n,this.options=u(this.defaultOptions,e),this.channelFunc=r,this.visible=!0,this.polygons=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolygon=null,this.focusedDisplayPolygon=null}draw(t){if(this.visible)return this.initOptions(t),this.initPolygons(),this.initEvent(),this.redraw()}redraw(){return this.layer&&this.layer.remove(),this.layer=this.configPolygonLayer(),this.map.addLayer(this.layer),this}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polygons.length<=0?this.map.getBounds():this.polygons.reduce((t,n)=>t.extend(n.getBounds()),L.latLngBounds(this.polygons[0].getBounds().getNorthEast(),this.polygons[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayPolygon&&this.map.removeLayer(this.focusedDisplayPolygon)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polygons.forEach(n=>{n.getData().id!==t||this.polygonClickHandler(n,!0)})}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let n=0;n<t;n++){const t=this.segmentedMin+n*this.segmentedStep,e=t+this.segmentedStep;this.segmentedRefs.push({range:[t,e],color:this.options.segmentedColors[n]})}return this.segmentedRefs}getClassifiedColorRefs(){return this.classifyColorRefs}initEvent(){}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},n=this.options.classifiedAttr;this.dataList.forEach(e=>{e[n]in t?t[e[n]]=[e[n],t[e[n]][1]+1]:t[e[n]]=[e[n],1]});const e=Object.values(t);e.sort((t,n)=>n[1]-t[1]),this.classifyColorRefs=[];let r=0;e.forEach(([t,n],e)=>{let i=v;e<this.options.classifiedColors.length?(i=this.options.classifiedColors[e],this.classifyColorRefs.push({attr:t,color:i,nums:n})):r+=n,this.classifyColorMap[t]=i}),this.classifyColorRefs.push({attr:"其他",color:v,nums:r})}getClassifyPolygonColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let n=-1/0,e=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(n=Math.max(n,r),e=Math.min(e,r))}const r=Math.ceil((n-e+1)/t);this.segmentedMin=e,this.segmentedStep=r}getSegmentedPolygonColor(t){const n=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(n-this.segmentedMin)/this.segmentedStep,10)]}polygonClickHandler(t,n){this.focusedPolygon=t,this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.focusedDisplayPolygon=new y(t.getLatLngs(),{color:this.getColor(t.getData(),"darken"),fillColor:this.getColor(t.getData())}),this.focusedDisplayPolygon.addTo(this.map),this.focusedDisplayPolygon.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolygon.on("popupclose",()=>{this.focusedDisplayPolygon.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolygon.getCenter()),n&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polygon",t)}initOptions(t){this.options=u(this.defaultOptions,this.options,t)}initPolygons(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polygons=[],this.dataList.forEach(t=>{const n=L.geoJSON(t.geometry).getLayers()[0],e=new y(n.getLatLngs());e.setData(t),this.polygons.push(e)})}configPolygonLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{const n=u({},this.options,{color:this.getColor(t.getData(),"darken"),fillColor:this.getColor(t.getData())}),e=new y(t.getLatLngs(),n);return e.setData(t.getData()),this.options.tooltipAttr&&e.bindTooltip(this.getToolTipContent(e.getData())),e.on("click",()=>{this.polygonClickHandler(t)}),e.on("contextmenu",t=>{this.channelFunc("contextmenu",{event:t,target:e})}),e}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}getColor(t,n){let e=this.options.color;switch("segmented"===this.options.renderPolygonColorType&&(e=this.getSegmentedPolygonColor(t)),"classified"===this.options.renderPolygonColorType&&(e=this.getClassifyPolygonColor(t)),n){case"darken":return a(e);case"lighten":return s(e);default:return e}}}class m extends b{constructor(t,n,e,r){super(t,n,e,r),this.propMaxLength=-1}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configGridLayer(),this.map.addLayer(this.layer),this.configTooltip(),setTimeout(()=>{this.zoomHandler()},200),this}toggleTooltip(t){this.polygons.forEach(n=>{n.getTooltip()&&n.getTooltip().setOpacity(t?1:0)})}initEvent(){this.map.on("zoom",this.zoomHandler.bind(this))}configTooltip(){this.propMaxLength=this.getPropMaxLength(),this.options.tooltipAttr&&this.polygons.forEach(t=>{t.bindTooltip(this.getToolTipContent(t.getData()),{permanent:!0,direction:"center"})})}configGridLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{let n=this.options.color;"segmented"===this.options.renderPolygonColorType&&(n=this.getSegmentedPolygonColor(t.getData()));const e=Object.assign({},this.options,{color:n}),r=new y(t.getLatLngs(),e);return r.setData(t.getData()),r.on("click",()=>{}),this.options.popupAttr&&r.bindPopup(this.getPopupContent(r.getData())),r}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}zoomHandler(){const t=this.polygons[0];t&&this.toggleTooltip(this.getRectangleWidth(t)>this.getTooltipMaxWidth(this.propMaxLength))}getRectangleWidth(t){return this.map.latLngToLayerPoint(t.getBounds().getNorthEast()).x-this.map.latLngToLayerPoint(t.getBounds().getSouthWest()).x}getTooltipMaxWidth(t){return 12*t+14}getPropMaxLength(){const t="string"==typeof this.options.popupAttr?this.options.popupAttr:this.options.popupAttr.value;return this.polygons.map(n=>`${n.getData()[t]}`.length).reduce((t,n)=>Math.max(t,n),0)}}class _{constructor(t,n,e,r){if(!Array.isArray(n)||0===n.length)throw new Error("dataList 必须是非空数组");this.map=t,this.dynamicDataList=n,this.options=e,this.channelFunc=r,this.currentStep=0,this.isPause=!0}restart(){this.isPause=!1,this.currentStep=0,this.gotoStep(this.currentStep),this.start()}start(){this.isPause=!1,this.options.auto&&setTimeout(()=>{if(!this.isPause)if(this.currentStep>=this.dynamicDataList.length-1){if(!this.options.loop)return;this.restart()}else this.currentStep++,this.gotoStep(this.currentStep),this.start()},this.options.interval)}pause(){this.isPause=!0}prev(){this.currentStep--,this.currentStep=(this.currentStep+this.dynamicDataList.length)%this.dynamicDataList.length,this.gotoStep(this.currentStep)}next(){this.currentStep++,this.currentStep=this.currentStep%this.dynamicDataList.length,this.gotoStep(this.currentStep)}gotoStep(t){if(t<0||t>=this.dynamicDataList.length)throw new Error(`gotoStep(${t}): step is out of index `);this.layer.setData(this.dynamicDataList[t]),this.layer.draw()}draw(t){return this.initOptions(t),this.initLayer(),this.layer.draw(),this}fitBounds(){this.layer.fitBounds()}initOptions(t){this.options=Object.assign({loop:!1,auto:!1,interval:1e3},this.options,t)}initLayer(){const t={renderType:"heat",heatOptions:this.options};return this.layer=new c(this.map,this.dynamicDataList[0],t,this.channelFunc),this.layer}}var w=function(t,n,e,r){return new(e||(e=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(s,a)}u((r=r.apply(t,n||[])).next())})};class k{constructor(t,n,e={},r){this.type="wmsTile",this.visible=!0,this.map=t,this.dataList=n,this.options=e,this.channelFunc=r,this.layer=null,this.initOptions(e),this.initEvents()}draw(t){return w(this,void 0,void 0,function*(){if(this.visible){if(this.layer&&this.layer.remove(),this.popup&&this.popup.remove(),t&&this.initOptions(t),this.options.getWmsConfigs){const{wmsURL:t,layers:n,styles:e}=yield this.options.getWmsConfigs(this.options);this.initOptions({wmsURL:t,layers:n,styles:e})}this.layer=this.getLayer(),this.layer&&this.layer.addTo(this.map)}})}destroy(){this.layer&&this.layer.remove(),this.map.off("click",this.clickHandler,this)}getOptions(){return this.options}pitch(t){this.dataList.forEach(n=>{if(n.id===t){const t=L.geoJSON(n.geometry).getLayers()[0];this.showPopup(n,t.getCenter()),this.map.fitBounds(t.getBounds())}})}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.popup&&this.popup.closePopup(),this.map.removeLayer(this.layer)))}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.dataList.length<=0?this.map.getBounds():this.dataList.reduce((t,n)=>t.extend(L.geoJSON(n.geometry).getLayers()[0].getBounds()),L.latLngBounds(L.geoJSON(this.dataList[0].geometry).getLayers()[0].getBounds().getNorthEast(),L.geoJSON(this.dataList[0].geometry).getLayers()[0].getBounds().getSouthWest()))}initEvents(){this.map.on("click",this.clickHandler,this)}initOptions(t){const n=t.getDataByLatLng||this.options.getDataByLatLng,e=t.getWmsConfigs||this.options.getWmsConfigs,r={format:"image/png",transparent:!0,crs:L.CRS.EPSG4326};this.options=u(this.options,r,t),this.options.getDataByLatLng=n,this.options.getWmsConfigs=e}getLayer(){const{wmsURL:t,layers:n,styles:e}=this.options;return t?L.tileLayer.wms(t,{layers:n,styles:e,transparent:!0,format:"image/png",crs:L.CRS.EPSG4326}):null}clickHandler(t){return w(this,void 0,void 0,function*(){if(this.channelFunc("click",t),!this.options.getDataByLatLng)return;const n=[t.latlng.lat,t.latlng.lng],e=yield this.options.getDataByLatLng(n);e&&this.showPopup(e,t.latlng)})}showPopup(t,n){const e=this.getPopupContent(t);e&&(this.popup=L.popup().setLatLng(n).setContent(e).openOn(this.map))}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?t[this.options.popupAttr]?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:null:"object"==typeof this.options.popupAttr?t[this.options.popupAttr.value]?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:null:void 0:null}}e.d(n,"Marker",function(){return r}),e.d(n,"MarkersLayer",function(){return c}),e.d(n,"MarkersBufferLayer",function(){return h}),e.d(n,"Polyline",function(){return f}),e.d(n,"PolylinesLayer",function(){return g}),e.d(n,"PolylinesBufferLayer",function(){return d}),e.d(n,"Polygon",function(){return y}),e.d(n,"PolygonsLayer",function(){return b}),e.d(n,"GridsLayer",function(){return m}),e.d(n,"DynamicHeatLayer",function(){return _}),e.d(n,"WmsTile",function(){return k});n.default={Marker:r,MarkersLayer:c,MarkersBufferLayer:h,Polyline:f,PolylinesLayer:g,PolylinesBufferLayer:d,Polygon:y,PolygonsLayer:b,GridsLayer:m,DynamicHeatLayer:_,WmsTile:k}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,