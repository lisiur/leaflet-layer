!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.leafletMap=e():t.leafletMap=e()}(window,function(){return function(t){var e={};function r(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(o,i,function(e){return t[e]}.bind(null,i));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=9)}([function(t,e,r){"use strict";var o=r(2),i=r(6),s=[].slice,n=["keyword","gray","hex"],a={};Object.keys(i).forEach(function(t){a[s.call(i[t].labels).sort().join("")]=t});var l={};function h(t,e){if(!(this instanceof h))return new h(t,e);if(e&&e in n&&(e=null),e&&!(e in i))throw new Error("Unknown model: "+e);var r,u;if(void 0===t)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(t instanceof h)this.model=t.model,this.color=t.color.slice(),this.valpha=t.valpha;else if("string"==typeof t){var p=o.get(t);if(null===p)throw new Error("Unable to parse color from string: "+t);this.model=p.model,u=i[this.model].channels,this.color=p.value.slice(0,u),this.valpha="number"==typeof p.value[u]?p.value[u]:1}else if(t.length){this.model=e||"rgb",u=i[this.model].channels;var d=s.call(t,0,u);this.color=c(d,u),this.valpha="number"==typeof t[u]?t[u]:1}else if("number"==typeof t)t&=16777215,this.model="rgb",this.color=[t>>16&255,t>>8&255,255&t],this.valpha=1;else{this.valpha=1;var g=Object.keys(t);"alpha"in t&&(g.splice(g.indexOf("alpha"),1),this.valpha="number"==typeof t.alpha?t.alpha:0);var y=g.sort().join("");if(!(y in a))throw new Error("Unable to parse color from object: "+JSON.stringify(t));this.model=a[y];var f=i[this.model].labels,b=[];for(r=0;r<f.length;r++)b.push(t[f[r]]);this.color=c(b)}if(l[this.model])for(u=i[this.model].channels,r=0;r<u;r++){var m=l[this.model][r];m&&(this.color[r]=m(this.color[r]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function u(t,e,r){return(t=Array.isArray(t)?t:[t]).forEach(function(t){(l[t]||(l[t]=[]))[e]=r}),t=t[0],function(o){var i;return arguments.length?(r&&(o=r(o)),(i=this[t]()).color[e]=o,i):(i=this[t]().color[e],r&&(i=r(i)),i)}}function p(t){return function(e){return Math.max(0,Math.min(t,e))}}function c(t,e){for(var r=0;r<e;r++)"number"!=typeof t[r]&&(t[r]=0);return t}h.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(t){var e=this.model in o.to?this:this.rgb(),r=1===(e=e.round("number"==typeof t?t:1)).valpha?e.color:e.color.concat(this.valpha);return o.to[e.model](r)},percentString:function(t){var e=this.rgb().round("number"==typeof t?t:1),r=1===e.valpha?e.color:e.color.concat(this.valpha);return o.to.rgb.percent(r)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var t={},e=i[this.model].channels,r=i[this.model].labels,o=0;o<e;o++)t[r[o]]=this.color[o];return 1!==this.valpha&&(t.alpha=this.valpha),t},unitArray:function(){var t=this.rgb().color;return t[0]/=255,t[1]/=255,t[2]/=255,1!==this.valpha&&t.push(this.valpha),t},unitObject:function(){var t=this.rgb().object();return t.r/=255,t.g/=255,t.b/=255,1!==this.valpha&&(t.alpha=this.valpha),t},round:function(t){return t=Math.max(t||0,0),new h(this.color.map(function(t){return function(e){return function(t,e){return Number(t.toFixed(e))}(e,t)}}(t)).concat(this.valpha),this.model)},alpha:function(t){return arguments.length?new h(this.color.concat(Math.max(0,Math.min(1,t))),this.model):this.valpha},red:u("rgb",0,p(255)),green:u("rgb",1,p(255)),blue:u("rgb",2,p(255)),hue:u(["hsl","hsv","hsl","hwb","hcg"],0,function(t){return(t%360+360)%360}),saturationl:u("hsl",1,p(100)),lightness:u("hsl",2,p(100)),saturationv:u("hsv",1,p(100)),value:u("hsv",2,p(100)),chroma:u("hcg",1,p(100)),gray:u("hcg",2,p(100)),white:u("hwb",1,p(100)),wblack:u("hwb",2,p(100)),cyan:u("cmyk",0,p(100)),magenta:u("cmyk",1,p(100)),yellow:u("cmyk",2,p(100)),black:u("cmyk",3,p(100)),x:u("xyz",0,p(100)),y:u("xyz",1,p(100)),z:u("xyz",2,p(100)),l:u("lab",0,p(100)),a:u("lab",1),b:u("lab",2),keyword:function(t){return arguments.length?new h(t):i[this.model].keyword(this.color)},hex:function(t){return arguments.length?new h(t):o.to.hex(this.rgb().round().color)},rgbNumber:function(){var t=this.rgb().color;return(255&t[0])<<16|(255&t[1])<<8|255&t[2]},luminosity:function(){for(var t=this.rgb().color,e=[],r=0;r<t.length;r++){var o=t[r]/255;e[r]=o<=.03928?o/12.92:Math.pow((o+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),r=t.luminosity();return e>r?(e+.05)/(r+.05):(r+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},isDark:function(){var t=this.rgb().color;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var t=this.rgb(),e=0;e<3;e++)t.color[e]=255-t.color[e];return t},lighten:function(t){var e=this.hsl();return e.color[2]+=e.color[2]*t,e},darken:function(t){var e=this.hsl();return e.color[2]-=e.color[2]*t,e},saturate:function(t){var e=this.hsl();return e.color[1]+=e.color[1]*t,e},desaturate:function(t){var e=this.hsl();return e.color[1]-=e.color[1]*t,e},whiten:function(t){var e=this.hwb();return e.color[1]+=e.color[1]*t,e},blacken:function(t){var e=this.hwb();return e.color[2]+=e.color[2]*t,e},grayscale:function(){var t=this.rgb().color,e=.3*t[0]+.59*t[1]+.11*t[2];return h.rgb(e,e,e)},fade:function(t){return this.alpha(this.valpha-this.valpha*t)},opaquer:function(t){return this.alpha(this.valpha+this.valpha*t)},rotate:function(t){var e=this.hsl(),r=e.color[0];return r=(r=(r+t)%360)<0?360+r:r,e.color[0]=r,e},mix:function(t,e){var r=t.rgb(),o=this.rgb(),i=void 0===e?.5:e,s=2*i-1,n=r.alpha()-o.alpha(),a=((s*n==-1?s:(s+n)/(1+s*n))+1)/2,l=1-a;return h.rgb(a*r.red()+l*o.red(),a*r.green()+l*o.green(),a*r.blue()+l*o.blue(),r.alpha()*i+o.alpha()*(1-i))}},Object.keys(i).forEach(function(t){if(-1===n.indexOf(t)){var e=i[t].channels;h.prototype[t]=function(){if(this.model===t)return new h(this);if(arguments.length)return new h(arguments,t);var r="number"==typeof arguments[e]?e:this.valpha;return new h(function(t){return Array.isArray(t)?t:[t]}(i[this.model][t].raw(this.color)).concat(r),t)},h[t]=function(r){return"number"==typeof r&&(r=c(s.call(arguments),e)),new h(r,t)}}}),t.exports=h},function(t,e,r){var o=r(7),i={};for(var s in o)o.hasOwnProperty(s)&&(i[o[s]]=s);var n=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in n)if(n.hasOwnProperty(a)){if(!("channels"in n[a]))throw new Error("missing channels property: "+a);if(!("labels"in n[a]))throw new Error("missing channel labels property: "+a);if(n[a].labels.length!==n[a].channels)throw new Error("channel and label counts mismatch: "+a);var l=n[a].channels,h=n[a].labels;delete n[a].channels,delete n[a].labels,Object.defineProperty(n[a],"channels",{value:l}),Object.defineProperty(n[a],"labels",{value:h})}function u(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2)}n.rgb.hsl=function(t){var e,r,o=t[0]/255,i=t[1]/255,s=t[2]/255,n=Math.min(o,i,s),a=Math.max(o,i,s),l=a-n;return a===n?e=0:o===a?e=(i-s)/l:i===a?e=2+(s-o)/l:s===a&&(e=4+(o-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),r=(n+a)/2,[e,100*(a===n?0:r<=.5?l/(a+n):l/(2-a-n)),100*r]},n.rgb.hsv=function(t){var e,r,o,i,s,n=t[0]/255,a=t[1]/255,l=t[2]/255,h=Math.max(n,a,l),u=h-Math.min(n,a,l),p=function(t){return(h-t)/6/u+.5};return 0===u?i=s=0:(s=u/h,e=p(n),r=p(a),o=p(l),n===h?i=o-r:a===h?i=1/3+e-o:l===h&&(i=2/3+r-e),i<0?i+=1:i>1&&(i-=1)),[360*i,100*s,100*h]},n.rgb.hwb=function(t){var e=t[0],r=t[1],o=t[2];return[n.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(r,o))),100*(o=1-1/255*Math.max(e,Math.max(r,o)))]},n.rgb.cmyk=function(t){var e,r=t[0]/255,o=t[1]/255,i=t[2]/255;return[100*((1-r-(e=Math.min(1-r,1-o,1-i)))/(1-e)||0),100*((1-o-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*e]},n.rgb.keyword=function(t){var e=i[t];if(e)return e;var r,s=1/0;for(var n in o)if(o.hasOwnProperty(n)){var a=u(t,o[n]);a<s&&(s=a,r=n)}return r},n.keyword.rgb=function(t){return o[t]},n.rgb.xyz=function(t){var e=t[0]/255,r=t[1]/255,o=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(o=o>.04045?Math.pow((o+.055)/1.055,2.4):o/12.92)),100*(.2126*e+.7152*r+.0722*o),100*(.0193*e+.1192*r+.9505*o)]},n.rgb.lab=function(t){var e=n.rgb.xyz(t),r=e[0],o=e[1],i=e[2];return o/=100,i/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116)-16,500*(r-o),200*(o-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},n.hsl.rgb=function(t){var e,r,o,i,s,n=t[0]/360,a=t[1]/100,l=t[2]/100;if(0===a)return[s=255*l,s,s];e=2*l-(r=l<.5?l*(1+a):l+a-l*a),i=[0,0,0];for(var h=0;h<3;h++)(o=n+1/3*-(h-1))<0&&o++,o>1&&o--,s=6*o<1?e+6*(r-e)*o:2*o<1?r:3*o<2?e+(r-e)*(2/3-o)*6:e,i[h]=255*s;return i},n.hsl.hsv=function(t){var e=t[0],r=t[1]/100,o=t[2]/100,i=r,s=Math.max(o,.01);return r*=(o*=2)<=1?o:2-o,i*=s<=1?s:2-s,[e,100*(0===o?2*i/(s+i):2*r/(o+r)),100*((o+r)/2)]},n.hsv.rgb=function(t){var e=t[0]/60,r=t[1]/100,o=t[2]/100,i=Math.floor(e)%6,s=e-Math.floor(e),n=255*o*(1-r),a=255*o*(1-r*s),l=255*o*(1-r*(1-s));switch(o*=255,i){case 0:return[o,l,n];case 1:return[a,o,n];case 2:return[n,o,l];case 3:return[n,a,o];case 4:return[l,n,o];case 5:return[o,n,a]}},n.hsv.hsl=function(t){var e,r,o,i=t[0],s=t[1]/100,n=t[2]/100,a=Math.max(n,.01);return o=(2-s)*n,r=s*a,[i,100*(r=(r/=(e=(2-s)*a)<=1?e:2-e)||0),100*(o/=2)]},n.hwb.rgb=function(t){var e,r,o,i,s,n,a,l=t[0]/360,h=t[1]/100,u=t[2]/100,p=h+u;switch(p>1&&(h/=p,u/=p),r=1-u,o=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(o=1-o),i=h+o*(r-h),e){default:case 6:case 0:s=r,n=i,a=h;break;case 1:s=i,n=r,a=h;break;case 2:s=h,n=r,a=i;break;case 3:s=h,n=i,a=r;break;case 4:s=i,n=h,a=r;break;case 5:s=r,n=h,a=i}return[255*s,255*n,255*a]},n.cmyk.rgb=function(t){var e=t[0]/100,r=t[1]/100,o=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i)),255*(1-Math.min(1,o*(1-i)+i))]},n.xyz.rgb=function(t){var e,r,o,i=t[0]/100,s=t[1]/100,n=t[2]/100;return r=-.9689*i+1.8758*s+.0415*n,o=.0557*i+-.204*s+1.057*n,e=(e=3.2406*i+-1.5372*s+-.4986*n)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,o=o>.0031308?1.055*Math.pow(o,1/2.4)-.055:12.92*o,[255*(e=Math.min(Math.max(0,e),1)),255*(r=Math.min(Math.max(0,r),1)),255*(o=Math.min(Math.max(0,o),1))]},n.xyz.lab=function(t){var e=t[0],r=t[1],o=t[2];return r/=100,o/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(e-r),200*(r-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},n.lab.xyz=function(t){var e,r,o,i=t[0],s=t[1],n=t[2];e=s/500+(r=(i+16)/116),o=r-n/200;var a=Math.pow(r,3),l=Math.pow(e,3),h=Math.pow(o,3);return r=a>.008856?a:(r-16/116)/7.787,e=l>.008856?l:(e-16/116)/7.787,o=h>.008856?h:(o-16/116)/7.787,[e*=95.047,r*=100,o*=108.883]},n.lab.lch=function(t){var e,r=t[0],o=t[1],i=t[2];return(e=360*Math.atan2(i,o)/2/Math.PI)<0&&(e+=360),[r,Math.sqrt(o*o+i*i),e]},n.lch.lab=function(t){var e,r=t[0],o=t[1];return e=t[2]/360*2*Math.PI,[r,o*Math.cos(e),o*Math.sin(e)]},n.rgb.ansi16=function(t){var e=t[0],r=t[1],o=t[2],i=1 in arguments?arguments[1]:n.rgb.hsv(t)[2];if(0===(i=Math.round(i/50)))return 30;var s=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(e/255));return 2===i&&(s+=60),s},n.hsv.ansi16=function(t){return n.rgb.ansi16(n.hsv.rgb(t),t[2])},n.rgb.ansi256=function(t){var e=t[0],r=t[1],o=t[2];return e===r&&r===o?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(r/255*5)+Math.round(o/255*5)},n.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var r=.5*(1+~~(t>50));return[(1&e)*r*255,(e>>1&1)*r*255,(e>>2&1)*r*255]},n.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var r;return t-=16,[Math.floor(t/36)/5*255,Math.floor((r=t%36)/6)/5*255,r%6/5*255]},n.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},n.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var r=e[0];3===e[0].length&&(r=r.split("").map(function(t){return t+t}).join(""));var o=parseInt(r,16);return[o>>16&255,o>>8&255,255&o]},n.rgb.hcg=function(t){var e,r,o=t[0]/255,i=t[1]/255,s=t[2]/255,n=Math.max(Math.max(o,i),s),a=Math.min(Math.min(o,i),s),l=n-a;return e=l<1?a/(1-l):0,r=l<=0?0:n===o?(i-s)/l%6:n===i?2+(s-o)/l:4+(o-i)/l+4,r/=6,[360*(r%=1),100*l,100*e]},n.hsl.hcg=function(t){var e=t[1]/100,r=t[2]/100,o=1,i=0;return(o=r<.5?2*e*r:2*e*(1-r))<1&&(i=(r-.5*o)/(1-o)),[t[0],100*o,100*i]},n.hsv.hcg=function(t){var e=t[1]/100,r=t[2]/100,o=e*r,i=0;return o<1&&(i=(r-o)/(1-o)),[t[0],100*o,100*i]},n.hcg.rgb=function(t){var e=t[0]/360,r=t[1]/100,o=t[2]/100;if(0===r)return[255*o,255*o,255*o];var i,s=[0,0,0],n=e%1*6,a=n%1,l=1-a;switch(Math.floor(n)){case 0:s[0]=1,s[1]=a,s[2]=0;break;case 1:s[0]=l,s[1]=1,s[2]=0;break;case 2:s[0]=0,s[1]=1,s[2]=a;break;case 3:s[0]=0,s[1]=l,s[2]=1;break;case 4:s[0]=a,s[1]=0,s[2]=1;break;default:s[0]=1,s[1]=0,s[2]=l}return i=(1-r)*o,[255*(r*s[0]+i),255*(r*s[1]+i),255*(r*s[2]+i)]},n.hcg.hsv=function(t){var e=t[1]/100,r=e+t[2]/100*(1-e),o=0;return r>0&&(o=e/r),[t[0],100*o,100*r]},n.hcg.hsl=function(t){var e=t[1]/100,r=t[2]/100*(1-e)+.5*e,o=0;return r>0&&r<.5?o=e/(2*r):r>=.5&&r<1&&(o=e/(2*(1-r))),[t[0],100*o,100*r]},n.hcg.hwb=function(t){var e=t[1]/100,r=e+t[2]/100*(1-e);return[t[0],100*(r-e),100*(1-r)]},n.hwb.hcg=function(t){var e=t[1]/100,r=1-t[2]/100,o=r-e,i=0;return o<1&&(i=(r-o)/(1-o)),[t[0],100*o,100*i]},n.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},n.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},n.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},n.gray.hsl=n.gray.hsv=function(t){return[0,0,t[0]]},n.gray.hwb=function(t){return[0,100,t[0]]},n.gray.cmyk=function(t){return[0,0,0,t[0]]},n.gray.lab=function(t){return[t[0],0,0]},n.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),r=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(r.length)+r},n.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}},function(t,e,r){var o=r(3),i=r(4),s={};for(var n in o)o.hasOwnProperty(n)&&(s[o[n]]=n);var a=t.exports={to:{},get:{}};function l(t,e,r){return Math.min(Math.max(e,t),r)}function h(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}a.get=function(t){var e,r;switch(t.substring(0,3).toLowerCase()){case"hsl":e=a.get.hsl(t),r="hsl";break;case"hwb":e=a.get.hwb(t),r="hwb";break;default:e=a.get.rgb(t),r="rgb"}return e?{model:r,value:e}:null},a.get.rgb=function(t){if(!t)return null;var e,r,i,s=[0,0,0,1];if(e=t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(i=e[2],e=e[1],r=0;r<3;r++){var n=2*r;s[r]=parseInt(e.slice(n,n+2),16)}i&&(s[3]=Math.round(parseInt(i,16)/255*100)/100)}else if(e=t.match(/^#([a-f0-9]{3,4})$/i)){for(i=(e=e[1])[3],r=0;r<3;r++)s[r]=parseInt(e[r]+e[r],16);i&&(s[3]=Math.round(parseInt(i+i,16)/255*100)/100)}else if(e=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)){for(r=0;r<3;r++)s[r]=parseInt(e[r+1],0);e[4]&&(s[3]=parseFloat(e[4]))}else{if(!(e=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)))return(e=t.match(/(\D+)/))?"transparent"===e[1]?[0,0,0,0]:(s=o[e[1]])?(s[3]=1,s):null:null;for(r=0;r<3;r++)s[r]=Math.round(2.55*parseFloat(e[r+1]));e[4]&&(s[3]=parseFloat(e[4]))}for(r=0;r<3;r++)s[r]=l(s[r],0,255);return s[3]=l(s[3],0,1),s},a.get.hsl=function(t){if(!t)return null;var e=t.match(/^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var r=parseFloat(e[4]);return[(parseFloat(e[1])+360)%360,l(parseFloat(e[2]),0,100),l(parseFloat(e[3]),0,100),l(isNaN(r)?1:r,0,1)]}return null},a.get.hwb=function(t){if(!t)return null;var e=t.match(/^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var r=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,l(parseFloat(e[2]),0,100),l(parseFloat(e[3]),0,100),l(isNaN(r)?1:r,0,1)]}return null},a.to.hex=function(){var t=i(arguments);return"#"+h(t[0])+h(t[1])+h(t[2])+(t[3]<1?h(Math.round(255*t[3])):"")},a.to.rgb=function(){var t=i(arguments);return t.length<4||1===t[3]?"rgb("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+")":"rgba("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+", "+t[3]+")"},a.to.rgb.percent=function(){var t=i(arguments),e=Math.round(t[0]/255*100),r=Math.round(t[1]/255*100),o=Math.round(t[2]/255*100);return t.length<4||1===t[3]?"rgb("+e+"%, "+r+"%, "+o+"%)":"rgba("+e+"%, "+r+"%, "+o+"%, "+t[3]+")"},a.to.hsl=function(){var t=i(arguments);return t.length<4||1===t[3]?"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)":"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+t[3]+")"},a.to.hwb=function(){var t=i(arguments),e="";return t.length>=4&&1!==t[3]&&(e=", "+t[3]),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+e+")"},a.to.keyword=function(t){return s[t.slice(0,3)]}},function(t,e,r){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,e,r){"use strict";var o=r(5),i=Array.prototype.concat,s=Array.prototype.slice,n=t.exports=function(t){for(var e=[],r=0,n=t.length;r<n;r++){var a=t[r];o(a)?e=i.call(e,s.call(a)):e.push(a)}return e};n.wrap=function(t){return function(){return t(n(arguments))}}},function(t,e){t.exports=function(t){return!(!t||"string"==typeof t)&&(t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&"String"!==t.constructor.name))}},function(t,e,r){var o=r(1),i=r(8),s={};Object.keys(o).forEach(function(t){s[t]={},Object.defineProperty(s[t],"channels",{value:o[t].channels}),Object.defineProperty(s[t],"labels",{value:o[t].labels});var e=i(t);Object.keys(e).forEach(function(r){var o=e[r];s[t][r]=function(t){var e=function(e){if(void 0===e||null===e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var r=t(e);if("object"==typeof r)for(var o=r.length,i=0;i<o;i++)r[i]=Math.round(r[i]);return r};return"conversion"in t&&(e.conversion=t.conversion),e}(o),s[t][r].raw=function(t){var e=function(e){return void 0===e||null===e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return"conversion"in t&&(e.conversion=t.conversion),e}(o)})}),t.exports=s},function(t,e,r){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,e,r){var o=r(1);function i(t){var e=function(){for(var t={},e=Object.keys(o),r=e.length,i=0;i<r;i++)t[e[i]]={distance:-1,parent:null};return t}(),r=[t];for(e[t].distance=0;r.length;)for(var i=r.pop(),s=Object.keys(o[i]),n=s.length,a=0;a<n;a++){var l=s[a],h=e[l];-1===h.distance&&(h.distance=e[i].distance+1,h.parent=i,r.unshift(l))}return e}function s(t,e){return function(r){return e(t(r))}}function n(t,e){for(var r=[e[t].parent,t],i=o[e[t].parent][t],n=e[t].parent;e[n].parent;)r.unshift(e[n].parent),i=s(o[e[n].parent][n],i),n=e[n].parent;return i.conversion=r,i}t.exports=function(t){for(var e=i(t),r={},o=Object.keys(e),s=o.length,a=0;a<s;a++){var l=o[a];null!==e[l].parent&&(r[l]=n(l,e))}return r}},function(t,e,r){"use strict";r.r(e);class o extends L.Marker{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}var i=r(0);function s(t){return i(t).lighten(.5).hex()}function n(t){return i(t).darken(.5).hex()}function a(...t){if(0===t.length)return{};if(1===t.length)return t[0];const e=t[0];for(const r in t[1])r in e&&"[object Object]"===Object.prototype.toString.call(e[r])?e[r]=a(e[r],t[1][r]):e[r]=t[1][r];return a(e,...t.slice(2))}class l{constructor(t,e,r,o){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={renderType:"point",renderPointColorType:"single",iconType:"unicode",iconSize:[20,20],iconClass:"iconfont",iconColor:"#3388FF",iconAnchor:[10,20],popup:!0,tooltip:!0,popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",segmentedColors:["#3388FF"],classifiedColors:["#3388FF"],isCluster:!1,renderClusterColorType:"smart",bubbleStrokeWidth:1,bubbleColors:["#3388FF"],bubbleStrokeOpacity:.2,bubbleFillOpacity:.5,bubbleSizes:[10],heatOptions:{max:1,minOpacity:.5}},this.type="marker",this.map=t,this.dataList=e,this.options=r,this.channelFunc=o,this.visible=!0,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.clusterLayer=null,this.bubbleLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.bubbledSizeMin=1/0,this.bubbledSizeStep=1,this.classifiedColorMap={},this.bubbledColorMap={}}draw(t){return this.visible=!0,this.initOptions(t),this.initMarkers(),this.initEvents(),this.redraw()}redraw(){if(this.visible){if(this.layer&&this.layer.remove(),this.options.isCluster&&"point"===this.options.renderType)this.layer=this.configClusterLayer();else switch(this.options.renderType){case"point":this.layer=this.configMarkerLayer();break;case"cluster":this.layer=this.configClusterLayer();break;case"heat":this.layer=this.configHeatLayer();break;case"bubble":this.layer=this.configBubbleLayer();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.map.addLayer(this.layer),this}}setData(t){this.dataList=t}setOptions(t,e=!1){this.options=Object.assign(this.options,t),e&&this.redraw()}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.map(t=>[t.getLatLng().lat,t.getLatLng().lng])}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayMarker&&this.map.removeLayer(this.focusedDisplayMarker),this.map.off("zoomstart",this._zoomStartCb,this),this.map.off("zoomend",this._zoomEndCb,this)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayMarker&&this.focusedDisplayMarker.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.iconColor=t,this.redraw()}changeIcon(t){this.options.iconUnicode=t,this.redraw()}pitch(t){this.markers.forEach(e=>{e.getData().id!==t||this.markerClickHandler(e,!0)})}getClassifiedColorRefs(){return this.classifiedColorRefs}getBubbledColorRefs(){return this.bubbledColorRefs}_zoomStartCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.removeLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.removeLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.removeLayer(this.markerLayer)}}_zoomEndCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.addLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.addLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.addLayer(this.markerLayer)}}configMarkerLayer(){this.markerLayer&&this.markerLayer.remove();const t=L.canvasIconLayer({}).addTo(this.map);return t.addOnClickListener((t,[{data:e}])=>{this.markerClickHandler(e)}),t.addOnContextmenuListener((t,[{data:e}])=>{this.channelFunc("contextmenu",{event:t,marker:e})}),this.options.tooltip&&t.addOnHoverListener((t,[{data:e}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=e,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr])}),t.addMarkers(this.markers),this.map.panTo(this.map.getCenter()),this.markerLayer=t,this.markerLayer}getToolTipContent(t){return""+t[this.options.tooltipAttr]}initOptions(t){this.options=a(this.defaultOptions,this.options,t)}initMarkers(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.cacheBubbleParams(),this.markers=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],r=new o([e.getLatLng().lat,e.getLatLng().lng],{icon:this.getMarkerIcon(t)});r.setData(t),this.markers.push(r)})}initEvents(){this.map.on("zoomstart",this._zoomStartCb,this),this.map.on("zoomend",this._zoomEndCb,this)}markerClickHandler(t,e){this.focusedMarker=t,this.options.popup&&(this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new o(t.getLatLng(),{icon:this.getLargerMarkerIcon(t.getData())}),this.focusedDisplayMarker.addTo(this.map),this.focusedDisplayMarker.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayMarker.on("popupclose",()=>{this.focusedDisplayMarker.remove()})),t.closeTooltip(),this.map.panTo(this.focusedMarker.getLatLng()),e&&this.map.fitBounds(t.getLatLng().toBounds(10)),this.channelFunc("on-click-marker",t)}configClusterLayer(){return this.clusterLayer&&this.clusterLayer.remove(),this.clusterLayer=L.markerClusterGroup({iconCreateFunction:this.iconCreateFunction.bind(this)}),this.clusterLayer.addLayers(this.markers.map(t=>{const e=new o(t.getLatLng(),{icon:this.getMarkerIcon(t.getData())});return e.setData(t.getData()),e.bindTooltip(""+e.getData()[this.options.tooltipAttr]),e.bindPopup(this.getPopupContent(e.getData())),e.on("click",()=>{this.markerClickHandler(e)}),e})),this.clusterLayer}configHeatLayer(){this.heatLayer&&this.heatLayer.remove();const t=[];return this.markers.forEach(e=>{const r=e.getLatLng(),o=this.options.heatOptions&&this.options.heatOptions.dimensionAttr;let i=o&&e.getData()[o]||this.options.heatOptions.max;"number"!=typeof i&&(i=this.options.heatOptions.max),t.push(i),e.setLatLng(L.latLng(r.lat,r.lng,i))}),this.heatLayer=L.heatLayer(this.markers.map((e,r)=>[e.getLatLng().lat,e.getLatLng().lng,t[r]]),a({minOpacity:.5},this.options.heatOptions)),this.heatLayer}configBubbleLayer(){return this.bubbleLayer&&this.bubbleLayer.remove(),this.bubbleLayer=L.layerGroup(),this.markers.forEach(t=>{const e=this.getBubbledMarkerSize(t.getData()),r=this.getBubbledMarkerColor(t.getData()),o=this.options.bubbleStrokeColor||s(r),i=this.options.bubbleStrokeWidth,n=this.options.bubbleStrokeOpacity,a=this.options.bubbleFillOpacity,l=L.circleMarker(t.getLatLng(),{radius:e,color:o,fillColor:r,weight:i,opacity:n,fillOpacity:a});this.options.popup&&l.bindPopup(this.getPopupContent(t.getData())),this.options.tooltip&&l.bindTooltip(this.getToolTipContent(t.getData())),this.bubbleLayer.addLayer(l)}),this.bubbleLayer}getLargerMarkerIcon(t){return this._getMarkerIcon(t,!0)}getMarkerIcon(t){return this._getMarkerIcon(t,!1)}_getMarkerIcon(t,e){const r=this.options.iconSize,o=this.options.iconAnchor,i=[1.5*r[0],1.5*r[1]],s=[1.5*o[0],1.5*o[1]],n=this.options.iconColor;switch(this.options.iconType){case"image":case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(t,{iconSize:e?i:r,iconColor:n}),className:e?"large-div-icon-marker":"",iconSize:e?i:r,iconAnchor:e?s:o,tooltipAnchor:e?[0,-s[1]/2]:[0,-o[1]/2],popupAnchor:e?[0,-s[1]/2]:[0,-o[1]/2]});default:throw new Error(`renderType 不能为 ${this.options.iconType}`)}}getCustomIconHTML(t,e){if(this.options.iconRenderer)return e=Object.assign({},this.options,e),this.options.iconRenderer(t,e);let r=this.options.iconColor;switch(this.options.renderPointColorType){case"single":r=this.options.iconColor;break;case"classified":r=this.getClassifyMarkerColor(t);break;case"segmented":r=this.getSegmentedMarkerColor(t);break;default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}switch(this.options.iconType){case"font_class":return`\n          <i class="${this.options.iconClass}"\n            style="\n              color: ${r};\n              font-size: ${e.iconSize[0]}px;\n            "\n            />\n        `;case"symbol":return`\n          <svg class="icon-symbol" aria-hidden="true">\n            <use xlink:href="${this.options.iconSymbol}" />\n          </svg>\n        `;case"unicode":return`\n          <i\n            class="${this.options.iconClass}"\n            style="\n              color: ${r};\n              font-size: ${e.iconSize[0]}px;\n            "\n            >\n            ${this.options.iconUnicode}\n          </i>\n        `}}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(r=>{r[e]in t?t[r[e]]=[r[e],t[r[e]][1]+1]:t[r[e]]=[r[e],1]});const r=Object.values(t);r.sort((t,e)=>e[1]-t[1]),this.classifiedColorRefs=[],r.forEach(([t,e],r)=>{let o="black";r<this.options.classifiedColors.length&&(o=this.options.classifiedColors[r]),this.classifiedColorMap[t]=o,this.classifiedColorRefs.push({attr:t,color:o,nums:e})})}cacheBubbleParams(){if(!this.options.bubbleSizeAttr)return;const t=this.options.bubbleSizes.length;let e=-1/0,r=1/0;for(const t of this.dataList){const o=t[this.options.bubbleSizeAttr];e=Math.max(e,o),r=Math.min(r,o)}const o=(e-r+1)/t;if(this.bubbledSizeMin=r,this.bubbledSizeStep=o,!this.options.bubbleColorAttr)return;const i={},s=this.options.bubbleColorAttr;this.dataList.forEach(t=>{t[s]in i?i[t[s]]=[t[s],i[t[s]][1]+1]:i[t[s]]=[t[s],1]});const n=Object.values(i);n.sort((t,e)=>e[1]-t[1]),this.bubbledColorRefs=[],n.forEach(([t,e],r)=>{let o="black";r<this.options.bubbleColors.length&&(o=this.options.bubbleColors[r]),this.bubbledColorMap[t]=o,this.bubbledColorRefs.push({attr:t,color:o,nums:e})})}getClassifyMarkerColor(t){return this.classifiedColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,r=1/0;for(const t of this.dataList){const o=t[this.options.segmentedAttr];e=Math.max(e,o),r=Math.min(r,o)}const o=(e-r+1)/t;this.segmentedMin=r,this.segmentedStep=o}getSegmentedMarkerColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}getBubbledMarkerSize(t){const e=t[this.options.bubbleSizeAttr];return this.options.bubbleSizes[parseInt(""+(e-this.bubbledSizeMin)/this.bubbledSizeStep,10)]}getBubbledMarkerColor(t){return this.bubbledColorMap[t[this.options.bubbleColorAttr]]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}iconCreateFunction(t){const e=["#757472","#5093E2","#CB7987","#FC763B"],r=this.dataList.length/e.length,o=.25/e.length;let i=this.options.iconColor,n=1;return"smart"===this.options.renderClusterColorType&&(i=e[Math.floor((t.getChildCount()-1)/r)],n=(Math.floor((t.getChildCount()-1)/r)+1)*o+.75),L.divIcon({html:`\n       <div\n        style="\n          border-radius: 50%;\n          position: relative;\n          width: 50px;\n          height: 50px;\n          transform: scale3d(${n}, ${n}, 1)\n        "\n        >\n        <div\n          style="\n            border-radius: 50%;\n            background: ${s(i)};\n            width: 50px;\n            height: 50px;\n            opacity: 0.7;\n            position: absolute;\n            top: 0;\n            left: 0;\n            ">\n        </div>\n        <div\n          style="\n            border-radius: 50%;\n            background: ${i};\n            opacity: 0.8;\n            width: 32px;\n            height: 32px;\n            margin: 9px;\n          ">\n        </div>\n        <div\n          style="\n            text-align: center;\n            line-height: 32px;\n            position: absolute;\n            top: 9px;\n            left: 9px;\n            width: 32px;\n            height: 32px;\n            color: white;\n            font-size: 14px;\n          "\n          >\n          ${t.getChildCount()}\n        </div>\n       </div>\n      `,iconSize:[40,40]})}}class h extends l{constructor(t,e,r,o){super(t,e,r,o),this.type="markerBuffer";this.options=Object.assign(this.options,{bufferOptions:{radius:1e3,stroke:!0,weight:1}},r)}draw(t){return this.options=Object.assign(this.options,t),this.options.bufferOptions.color=this.options.iconColor,this.initMarkers(),this.redraw()}redraw(){if(this.visible)return this.markerLayer&&this.map.removeLayer(this.markerLayer),this.bufferLayer&&this.map.removeLayer(this.bufferLayer),this.markerLayer=this.configMarkerLayer(),this.bufferLayer=this.configBufferLayer(),this.layer=L.layerGroup(),this.layer.addLayer(this.markerLayer),this.layer.addLayer(this.bufferLayer),this.map.addLayer(this.layer),this}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.reduce((t,e)=>t.extend(e.getLatLng().toBounds(this.options.bufferOptions.radius)),this.markers[0].getLatLng().toBounds(this.options.bufferOptions.radius))}configBufferLayer(){const t=L.layerGroup();return this.markers.forEach(e=>{const r=L.circle(e.getLatLng(),this.options.bufferOptions);if(this.options.bufferTooltipAttr)r.bindTooltip(""+e.getData()[this.options.bufferTooltipAttr]);else switch(typeof this.options.popupAttr){case"string":r.bindTooltip(""+e.getData()[this.options.popupAttr]);break;case"object":r.bindTooltip(""+e.getData()[this.options.popupAttr.value])}t.addLayer(r)}),t}}class u extends L.Polyline{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class p{constructor(t,e,r,o){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={color:"#3388FF",renderPolylineColorType:"single",segmentedColors:["#3388FF"],popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",classifiedColors:["#3388FF"]},this.type="polyline",this.map=t,this.dataList=e,this.options=a(this.defaultOptions,r),this.channelFunc=o,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolyline=null,this.focusedDisplayPolyline=null}draw(t){return this.initOptions(t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),L.latLngBounds(this.polylines[0].getBounds().getNorthEast(),this.polylines[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polylines.forEach(e=>{e.getData().id!==t||this.polylineClickHandler(e,!0)})}getClassifyColorRefs(){return this.classifyColorRefs}initOptions(t){this.options=a(this.defaultOptions,this.options,t)}initPolylines(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polylines=this.dataList.map(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],r=new u(e.getLatLngs());return r.setData(t),r})}getSegmentedPolylineColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polylineClickHandler(t,e){this.focusedPolyline=t,this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.focusedDisplayPolyline=new u(t.getLatLngs(),{color:this.getColor(t.getData()),fillColor:this.getColor(t.getData(),"normal")}),this.focusedDisplayPolyline.addTo(this.map),this.focusedDisplayPolyline.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolyline.on("popupclose",()=>{this.focusedDisplayPolyline.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolyline.getCenter()),e&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polyline",t)}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}configPolylineLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{const e=a({},this.options,{color:this.getColor(t.getData())}),r=new u(t.getLatLngs(),e);r.on("click",()=>{this.polylineClickHandler(t)}),r.setData(t.getData()),this.options.tooltipAttr&&r.bindTooltip(this.getToolTipContent(r.getData())),this.polylineLayer.addLayer(r)}),this.polylineLayer}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(r=>{r[e]in t?t[r[e]]=[r[e],t[r[e]][1]+1]:t[r[e]]=[r[e],1]});const r=Object.values(t);r.sort((t,e)=>e[1]-t[1]),this.classifyColorRefs=[],r.forEach(([t,e],r)=>{let o="black";r<this.options.classifiedColors.length&&(o=this.options.classifiedColors[r]),this.classifyColorMap[t]=o,this.classifyColorRefs.push({attr:t,color:o,nums:e})})}getClassifyPolylineColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,r=1/0;for(const t of this.dataList){const o=t[this.options.segmentedAttr];e=Math.max(e,o),r=Math.min(r,o)}const o=(e-r+1)/t;this.segmentedMin=r,this.segmentedStep=o}getColor(t,e){let r=this.options.color;switch("segmented"===this.options.renderPolylineColorType&&(r=this.getSegmentedPolylineColor(t)),"classified"===this.options.renderPolylineColorType&&(r=this.getClassifyPolylineColor(t)),e){case"darken":return n(r);case"lighten":return s(r);default:return r}}}class c extends p{constructor(t,e,r,o){super(t,e,r,o);this.type="polylineBuffer",this.map=t,this.dataList=e,this.options=r,this.channelFunc=o,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolylineColorType:"single",segmentedColors:["#3388FF"],corridor:100,color:"#3388FF",opacity:.5},r)}draw(t){return this.options=Object.assign(this.options,t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineBufferLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),this.polylines[0].getBounds())}changeColor(t){this.options.color=t,this.redraw()}configPolylineBufferLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{t.on("click",()=>{this.polylineClickHandler(t)});const e=Object.assign({},this.options,{color:"single"===this.options.renderPolylineColorType?this.options.color:this.getSegmentedPolylineColor(t.getData())}),r=L.corridor(t.getLatLngs().map(t=>L.latLng([t.lat,t.lng])),e);this.options.tooltipAttr&&r.bindTooltip(this.getToolTipContent(t.getData())),this.polylineLayer.addLayer(r)}),this.polylineLayer}}class d extends L.Polygon{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}const g="#72AFDF";class y{constructor(t,e,r,o){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",color:g,fill:!0,fillColor:g,weight:1,opacity:1,fillOpacity:.4,renderPolygonColorType:"single",segmentedColors:[g],classifiedColors:[g]},this.type="polygon",this.map=t,this.dataList=e,this.options=a(this.defaultOptions,r),this.channelFunc=o,this.visible=!0,this.polygons=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolygon=null,this.focusedDisplayPolygon=null}draw(t){return this.initOptions(t),this.initPolygons(),this.initEvent(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolygonLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polygons.length<=0?this.map.getBounds():this.polygons.reduce((t,e)=>t.extend(e.getBounds()),L.latLngBounds(this.polygons[0].getBounds().getNorthEast(),this.polygons[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayPolygon&&this.map.removeLayer(this.focusedDisplayPolygon)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polygons.forEach(e=>{e.getData().id!==t||this.polygonClickHandler(e,!0)})}getClassifyColorRefs(){return this.classifyColorRefs}initEvent(){}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(r=>{r[e]in t?t[r[e]]=[r[e],t[r[e]][1]+1]:t[r[e]]=[r[e],1]});const r=Object.values(t);r.sort((t,e)=>e[1]-t[1]),this.classifyColorRefs=[],r.forEach(([t,e],r)=>{let o="black";r<this.options.classifiedColors.length&&(o=this.options.classifiedColors[r]),this.classifyColorMap[t]=o,this.classifyColorRefs.push({attr:t,color:o,nums:e})})}getClassifyPolygonColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,r=1/0;for(const t of this.dataList){const o=t[this.options.segmentedAttr];e=Math.max(e,o),r=Math.min(r,o)}const o=(e-r+1)/t;this.segmentedMin=r,this.segmentedStep=o}getSegmentedPolygonColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polygonClickHandler(t,e){this.focusedPolygon=t,this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.focusedDisplayPolygon=new d(t.getLatLngs(),{color:g,fillColor:this.getColor(t.getData())}),this.focusedDisplayPolygon.addTo(this.map),this.focusedDisplayPolygon.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolygon.on("popupclose",()=>{this.focusedDisplayPolygon.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolygon.getCenter()),e&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polygon",t)}initOptions(t){this.options=a(this.defaultOptions,this.options,t)}initPolygons(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polygons=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],r=new d(e.getLatLngs());r.setData(t),this.polygons.push(r)})}configPolygonLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{const e=a({},this.options,{color:g,fillColor:this.getColor(t.getData())}),r=new d(t.getLatLngs(),e);return r.setData(t.getData()),this.options.tooltipAttr&&r.bindTooltip(this.getToolTipContent(r.getData())),r.on("click",()=>{this.polygonClickHandler(t)}),r}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}getColor(t,e){let r=this.options.color;switch("segmented"===this.options.renderPolygonColorType&&(r=this.getSegmentedPolygonColor(t)),"classified"===this.options.renderPolygonColorType&&(r=this.getClassifyPolygonColor(t)),e){case"darken":return n(r);case"lighten":return s(r);default:return r}}}class f extends y{constructor(t,e,r,o){super(t,e,r,o),this.propMaxLength=-1}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configGridLayer(),this.map.addLayer(this.layer),this.configTooltip(),setTimeout(()=>{this.zoomHandler()},200),this}toggleTooltip(t){this.polygons.forEach(e=>{e.getTooltip()&&e.getTooltip().setOpacity(t?1:0)})}initEvent(){this.map.on("zoom",this.zoomHandler.bind(this))}configTooltip(){this.propMaxLength=this.getPropMaxLength(),this.options.tooltipAttr&&this.polygons.forEach(t=>{t.bindTooltip(this.getToolTipContent(t.getData()),{permanent:!0,direction:"center"})})}configGridLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{let e=this.options.color;"segmented"===this.options.renderPolygonColorType&&(e=this.getSegmentedPolygonColor(t.getData()));const r=Object.assign({},this.options,{color:e}),o=new d(t.getLatLngs(),r);return o.setData(t.getData()),o.on("click",()=>{}),this.options.popupAttr&&o.bindPopup(this.getPopupContent(o.getData())),o}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}zoomHandler(){const t=this.polygons[0];t&&this.toggleTooltip(this.getRectangleWidth(t)>this.getTooltipMaxWidth(this.propMaxLength))}getRectangleWidth(t){return this.map.latLngToLayerPoint(t.getBounds().getNorthEast()).x-this.map.latLngToLayerPoint(t.getBounds().getSouthWest()).x}getTooltipMaxWidth(t){return 12*t+14}getPropMaxLength(){const t="string"==typeof this.options.popupAttr?this.options.popupAttr:this.options.popupAttr.value;return this.polygons.map(e=>`${e.getData()[t]}`.length).reduce((t,e)=>Math.max(t,e),0)}}class b{constructor(t,e,r,o){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.map=t,this.dynamicDataList=e,this.options=r,this.channelFunc=o,this.currentStep=0,this.isPause=!0}restart(){this.isPause=!1,this.currentStep=0,this.gotoStep(this.currentStep),this.start()}start(){this.isPause=!1,this.options.auto&&setTimeout(()=>{if(!this.isPause)if(this.currentStep>=this.dynamicDataList.length-1){if(!this.options.loop)return;this.restart()}else this.currentStep++,this.gotoStep(this.currentStep),this.start()},this.options.interval)}pause(){this.isPause=!0}prev(){this.currentStep--,this.currentStep=(this.currentStep+this.dynamicDataList.length)%this.dynamicDataList.length,this.gotoStep(this.currentStep)}next(){this.currentStep++,this.currentStep=this.currentStep%this.dynamicDataList.length,this.gotoStep(this.currentStep)}gotoStep(t){if(t<0||t>=this.dynamicDataList.length)throw new Error(`gotoStep(${t}): step is out of index `);this.layer.setData(this.dynamicDataList[t]),this.layer.draw()}draw(t){return this.initOptions(t),this.initLayer(),this.layer.draw(),this}fitBounds(){this.layer.fitBounds()}initOptions(t){this.options=Object.assign({loop:!1,auto:!1,interval:1e3},this.options,t)}initLayer(){const t={renderType:"heat",heatOptions:this.options};return this.layer=new l(this.map,this.dynamicDataList[0],t,this.channelFunc),this.layer}}r.d(e,"Marker",function(){return o}),r.d(e,"MarkersLayer",function(){return l}),r.d(e,"MarkersBufferLayer",function(){return h}),r.d(e,"Polyline",function(){return u}),r.d(e,"PolylinesLayer",function(){return p}),r.d(e,"PolylinesBufferLayer",function(){return c}),r.d(e,"Polygon",function(){return d}),r.d(e,"PolygonsLayer",function(){return y}),r.d(e,"GridsLayer",function(){return f}),r.d(e,"DynamicHeatLayer",function(){return b});e.default={Marker:o,MarkersLayer:l,MarkersBufferLayer:h,Polyline:u,PolylinesLayer:p,PolylinesBufferLayer:c,Polygon:d,PolygonsLayer:y,GridsLayer:f,DynamicHeatLayer:b}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,