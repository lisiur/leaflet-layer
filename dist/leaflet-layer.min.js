!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.leafletMap=e():t.leafletMap=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=49)}([function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r=n(6),i=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};t.exports=h;var o=n(3);o.inherits=n(2);var s=n(20),a=n(10);o.inherits(h,s);for(var u=i(a.prototype),l=0;l<u.length;l++){var c=u[l];h.prototype[c]||(h.prototype[c]=a.prototype[c])}function h(t){if(!(this instanceof h))return new h(t);s.call(this,t),a.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||r.nextTick(p,this)}function p(t){t.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}}),h.prototype._destroy=function(t,e){this.push(null),this.end(),r.nextTick(e,t)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(t){function n(t){return Object.prototype.toString.call(t)}e.isArray=function(t){return Array.isArray?Array.isArray(t):"[object Array]"===n(t)},e.isBoolean=function(t){return"boolean"==typeof t},e.isNull=function(t){return null===t},e.isNullOrUndefined=function(t){return null==t},e.isNumber=function(t){return"number"==typeof t},e.isString=function(t){return"string"==typeof t},e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=function(t){return void 0===t},e.isRegExp=function(t){return"[object RegExp]"===n(t)},e.isObject=function(t){return"object"==typeof t&&null!==t},e.isDate=function(t){return"[object Date]"===n(t)},e.isError=function(t){return"[object Error]"===n(t)||t instanceof Error},e.isFunction=function(t){return"function"==typeof t},e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=t.isBuffer}).call(this,n(4).Buffer)},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(33),i=n(34),o=n(19);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return l(this,t,e,n)}function l(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function(t){return t!=t}(e.length)?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(c(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var c=-1;for(o=n;o<a;o++)if(l(t,o)===l(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*s}else-1!==c&&(o-=o-c),c=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var h=!0,f=0;f<u;f++)if(l(t,o+f)!==l(e,f)){h=!1;break}if(h)return o}return-1}function b(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function v(t,e,n,r){return K(U(e,t.length-n),t,n,r)}function _(t,e,n,r){return K(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function w(t,e,n,r){return _(t,e,n,r)}function E(t,e,n,r){return K(z(e),t,n,r)}function T(t,e,n,r){return K(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function S(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function x(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,l=t[i],c=null,h=l>239?4:l>223?3:l>191?2:1;if(i+h<=n)switch(h){case 1:l<128&&(c=l);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&l)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(c=u)}null===c?(c=65533,h=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=h}return function(t){var e=t.length;if(e<=C)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=C));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return l(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?x(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return k(this,e,n);case"utf8":case"utf-8":return x(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return L(this,e,n);case"base64":return S(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,s=n-e,a=Math.min(o,s),l=this.slice(r,i),c=t.slice(e,n),h=0;h<a;++h)if(l[h]!==c[h]){o=l[h],s=c[h];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return b(this,t,e,n);case"utf8":case"utf-8":return v(this,t,e,n);case"ascii":return _(this,t,e,n);case"latin1":case"binary":return w(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function L(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function k(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=j(t[o]);return i}function P(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function M(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function R(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function D(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function N(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(t,e,n,r,o){return o||N(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,o){return o||N(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):D(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);O(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);O(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):R(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):R(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):D(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):D(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return I(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return I(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:U(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function j(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function K(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(0))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,l=[],c=!1,h=-1;function f(){c&&u&&(c=!1,u.length?l=u.concat(l):h=-1,l.length&&p())}function p(){if(!c){var t=a(f);c=!0;for(var e=l.length;e;){for(u=l,l=[];++h<e;)u&&u[h].run();h=-1,e=l.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new d(t,e)),1!==l.length||c||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";(function(e){!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?t.exports={nextTick:function(t,n,r,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,n)});case 3:return e.nextTick(function(){t.call(null,n,r)});case 4:return e.nextTick(function(){t.call(null,n,r,i)});default:for(o=new Array(a-1),s=0;s<o.length;)o[s++]=arguments[s];return e.nextTick(function(){t.apply(null,o)})}}}:t.exports=e}).call(this,n(5))},function(t,e,n){var r=n(4),i=r.Buffer;function o(t,e){for(var n in t)e[n]=t[n]}function s(t,e,n){return i(t,e,n)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?t.exports=r:(o(r,e),e.Buffer=s),o(i,s),s.from=function(t,e,n){if("number"==typeof t)throw new TypeError("Argument must not be a number");return i(t,e,n)},s.alloc=function(t,e,n){if("number"!=typeof t)throw new TypeError("Argument must be a number");var r=i(t);return void 0!==e?"string"==typeof n?r.fill(e,n):r.fill(e):r.fill(0),r},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return r.SlowBuffer(t)}},function(t,e){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function r(t){return"function"==typeof t}function i(t){return"object"==typeof t&&null!==t}function o(t){return void 0===t}t.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(t){if(!function(t){return"number"==typeof t}(t)||t<0||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},n.prototype.emit=function(t){var e,n,s,a,u,l;if(this._events||(this._events={}),"error"===t&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((e=arguments[1])instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}if(o(n=this._events[t]))return!1;if(r(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(i(n))for(a=Array.prototype.slice.call(arguments,1),s=(l=n.slice()).length,u=0;u<s;u++)l[u].apply(this,a);return!0},n.prototype.addListener=function(t,e){var s;if(!r(e))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,r(e.listener)?e.listener:e),this._events[t]?i(this._events[t])?this._events[t].push(e):this._events[t]=[this._events[t],e]:this._events[t]=e,i(this._events[t])&&!this._events[t].warned&&(s=o(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[t].length>s&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(t,e){if(!r(e))throw TypeError("listener must be a function");var n=!1;function i(){this.removeListener(t,i),n||(n=!0,e.apply(this,arguments))}return i.listener=e,this.on(t,i),this},n.prototype.removeListener=function(t,e){var n,o,s,a;if(!r(e))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(s=(n=this._events[t]).length,o=-1,n===e||r(n.listener)&&n.listener===e)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,e);else if(i(n)){for(a=s;a-- >0;)if(n[a]===e||n[a].listener&&n[a].listener===e){o=a;break}if(o<0)return this;1===n.length?(n.length=0,delete this._events[t]):n.splice(o,1),this._events.removeListener&&this.emit("removeListener",t,e)}return this},n.prototype.removeAllListeners=function(t){var e,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(e in this._events)"removeListener"!==e&&this.removeAllListeners(e);return this.removeAllListeners("removeListener"),this._events={},this}if(r(n=this._events[t]))this.removeListener(t,n);else if(n)for(;n.length;)this.removeListener(t,n[n.length-1]);return delete this._events[t],this},n.prototype.listeners=function(t){return this._events&&this._events[t]?r(this._events[t])?[this._events[t]]:this._events[t].slice():[]},n.prototype.listenerCount=function(t){if(this._events){var e=this._events[t];if(r(e))return 1;if(e)return e.length}return 0},n.listenerCount=function(t,e){return t.listenerCount(e)}},function(t,e,n){(e=t.exports=n(20)).Stream=e,e.Readable=e,e.Writable=n(10),e.Duplex=n(1),e.Transform=n(23),e.PassThrough=n(42)},function(t,e,n){"use strict";(function(e,r,i){var o=n(6);function s(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,n){var r=t.entry;t.entry=null;for(;r;){var i=r.callback;e.pendingcb--,i(n),r=r.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}(e,t)}}t.exports=b;var a,u=!e.browser&&["v0.10","v0.9."].indexOf(e.version.slice(0,5))>-1?r:o.nextTick;b.WritableState=m;var l=n(3);l.inherits=n(2);var c={deprecate:n(41)},h=n(21),f=n(7).Buffer,p=i.Uint8Array||function(){};var d,g=n(22);function y(){}function m(t,e){a=a||n(1),t=t||{};var r=e instanceof a;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var i=t.highWaterMark,l=t.writableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(l||0===l)?l:c,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===t.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?(o.nextTick(i,r),o.nextTick(S,t,e),t._writableState.errorEmitted=!0,t.emit("error",r)):(i(r),t._writableState.errorEmitted=!0,t.emit("error",r),S(t,e))}(t,n,r,e,i);else{var s=E(n);s||n.corked||n.bufferProcessing||!n.bufferedRequest||w(t,n),r?u(_,t,n,s,i):_(t,n,s,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function b(t){if(a=a||n(1),!(d.call(b,this)||this instanceof a))return new b(t);this._writableState=new m(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),h.call(this)}function v(t,e,n,r,i,o,s){e.writelen=r,e.writecb=s,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function _(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),S(t,e)}function w(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0,u=!0;n;)i[a]=n,n.isBuf||(u=!1),n=n.next,a+=1;i.allBuffers=u,v(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new s(e),e.bufferedRequestCount=0}else{for(;n;){var l=n.chunk,c=n.encoding,h=n.callback;if(v(t,e,!1,e.objectMode?1:l.length,l,c,h),n=n.next,e.bufferedRequestCount--,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequest=n,e.bufferProcessing=!1}function E(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function T(t,e){t._final(function(n){e.pendingcb--,n&&t.emit("error",n),e.prefinished=!0,t.emit("prefinish"),S(t,e)})}function S(t,e){var n=E(e);return n&&(!function(t,e){e.prefinished||e.finalCalled||("function"==typeof t._final?(e.pendingcb++,e.finalCalled=!0,o.nextTick(T,t,e)):(e.prefinished=!0,t.emit("prefinish")))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"))),n}l.inherits(b,h),m.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(m.prototype,"buffer",{get:c.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(d=Function.prototype[Symbol.hasInstance],Object.defineProperty(b,Symbol.hasInstance,{value:function(t){return!!d.call(this,t)||this===b&&(t&&t._writableState instanceof m)}})):d=function(t){return t instanceof this},b.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},b.prototype.write=function(t,e,n){var r=this._writableState,i=!1,s=!r.objectMode&&function(t){return f.isBuffer(t)||t instanceof p}(t);return s&&!f.isBuffer(t)&&(t=function(t){return f.from(t)}(t)),"function"==typeof e&&(n=e,e=null),s?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=y),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),o.nextTick(e,n)}(this,n):(s||function(t,e,n,r){var i=!0,s=!1;return null===n?s=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||e.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(t.emit("error",s),o.nextTick(r,s),i=!1),i}(this,r,t,n))&&(r.pendingcb++,i=function(t,e,n,r,i,o){if(!n){var s=function(t,e,n){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=f.from(e,n));return e}(e,r,i);r!==s&&(n=!0,i="buffer",r=s)}var a=e.objectMode?1:r.length;e.length+=a;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:r,encoding:i,isBuf:n,callback:o,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else v(t,e,!1,a,r,i,o);return u}(this,r,s,t,e,n)),i},b.prototype.cork=function(){this._writableState.corked++},b.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||w(this,t))},b.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(b.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),b.prototype._write=function(t,e,n){n(new Error("_write() is not implemented"))},b.prototype._writev=null,b.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,S(t,e),n&&(e.finished?o.nextTick(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},Object.defineProperty(b.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),b.prototype.destroy=g.destroy,b.prototype._undestroy=g.undestroy,b.prototype._destroy=function(t,e){this.end(),e(t)}}).call(this,n(5),n(39).setImmediate,n(0))},function(t,e,n){"use strict";var r=n(7).Buffer,i=r.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(r.isEncoding===i||!i(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=u,this.end=l,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=c,this.end=h,e=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(e)}function s(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,n=function(t,e,n){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==n?n:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function u(t,e){if((t.length-e)%2==0){var n=t.toString("utf16le",e);if(n){var r=n.charCodeAt(n.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function l(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,n)}return e}function c(t,e){var n=(t.length-e)%3;return 0===n?t.toString("base64",e):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-n))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function f(t){return t.toString(this.encoding)}function p(t){return t&&t.length?this.write(t):""}e.StringDecoder=o,o.prototype.write=function(t){if(0===t.length)return"";var e,n;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<t.length?e?e+this.text(t,n):this.text(t,n):e||""},o.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},o.prototype.text=function(t,e){var n=function(t,e,n){var r=e.length-1;if(r<n)return 0;var i=s(e[r]);if(i>=0)return i>0&&(t.lastNeed=i-1),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(t.lastNeed=i-2),i;if(--r<n||-2===i)return 0;if((i=s(e[r]))>=0)return i>0&&(2===i?i=0:t.lastNeed=i-3),i;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=n;var r=t.length-(n-this.lastNeed);return t.copy(this.lastChar,0,r),t.toString("utf8",e,r)},o.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length}},function(t,e,n){var r=n(13).isArray;t.exports={copyOptions:function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n},ensureFlagExists:function(t,e){t in e&&"boolean"==typeof e[t]||(e[t]=!1)},ensureSpacesExists:function(t){"spaces"in t&&("number"==typeof t.spaces||"string"==typeof t.spaces)||(t.spaces=0)},ensureAlwaysArrayExists:function(t){"alwaysArray"in t&&("boolean"==typeof t.alwaysArray||r(t.alwaysArray))||(t.alwaysArray=!1)},ensureKeyExists:function(t,e){t+"Key"in e&&"string"==typeof e[t+"Key"]||(e[t+"Key"]=e.compact?"_"+t:t)},checkFnExists:function(t,e){return t+"Fn"in e}}},function(t,e){t.exports={isArray:function(t){return Array.isArray?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(t)}}},function(t,e,n){(function(t,r){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var o,s=200,a="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",u="Expected a function",l="__lodash_hash_undefined__",c=500,h="__lodash_placeholder__",f=1,p=2,d=4,g=1,y=2,m=1,b=2,v=4,_=8,w=16,E=32,T=64,S=128,x=256,C=512,A=30,L="...",k=800,P=16,M=1,O=2,R=1/0,D=9007199254740991,N=1.7976931348623157e308,I=NaN,F=4294967295,B=F-1,j=F>>>1,U=[["ary",S],["bind",m],["bindKey",b],["curry",_],["curryRight",w],["flip",C],["partial",E],["partialRight",T],["rearg",x]],z="[object Arguments]",K="[object Array]",W="[object AsyncFunction]",q="[object Boolean]",$="[object Date]",Y="[object DOMException]",G="[object Error]",V="[object Function]",H="[object GeneratorFunction]",X="[object Map]",J="[object Number]",Q="[object Null]",Z="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",it="[object Symbol]",ot="[object Undefined]",st="[object WeakMap]",at="[object WeakSet]",ut="[object ArrayBuffer]",lt="[object DataView]",ct="[object Float32Array]",ht="[object Float64Array]",ft="[object Int8Array]",pt="[object Int16Array]",dt="[object Int32Array]",gt="[object Uint8Array]",yt="[object Uint8ClampedArray]",mt="[object Uint16Array]",bt="[object Uint32Array]",vt=/\b__p \+= '';/g,_t=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Et=/&(?:amp|lt|gt|quot|#39);/g,Tt=/[&<>"']/g,St=RegExp(Et.source),xt=RegExp(Tt.source),Ct=/<%-([\s\S]+?)%>/g,At=/<%([\s\S]+?)%>/g,Lt=/<%=([\s\S]+?)%>/g,kt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pt=/^\w*$/,Mt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Ot=/[\\^$.*+?()[\]{}|]/g,Rt=RegExp(Ot.source),Dt=/^\s+|\s+$/g,Nt=/^\s+/,It=/\s+$/,Ft=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Bt=/\{\n\/\* \[wrapped with (.+)\] \*/,jt=/,? & /,Ut=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,zt=/\\(\\)?/g,Kt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Wt=/\w*$/,qt=/^[-+]0x[0-9a-f]+$/i,$t=/^0b[01]+$/i,Yt=/^\[object .+?Constructor\]$/,Gt=/^0o[0-7]+$/i,Vt=/^(?:0|[1-9]\d*)$/,Ht=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Xt=/($^)/,Jt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Zt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Zt+"]",ne="["+Qt+"]",re="\\d+",ie="[\\u2700-\\u27bf]",oe="[a-z\\xdf-\\xf6\\xf8-\\xff]",se="[^\\ud800-\\udfff"+Zt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ae="\\ud83c[\\udffb-\\udfff]",ue="[^\\ud800-\\udfff]",le="(?:\\ud83c[\\udde6-\\uddff]){2}",ce="[\\ud800-\\udbff][\\udc00-\\udfff]",he="[A-Z\\xc0-\\xd6\\xd8-\\xde]",fe="(?:"+oe+"|"+se+")",pe="(?:"+he+"|"+se+")",de="(?:"+ne+"|"+ae+")"+"?",ge="[\\ufe0e\\ufe0f]?"+de+("(?:\\u200d(?:"+[ue,le,ce].join("|")+")[\\ufe0e\\ufe0f]?"+de+")*"),ye="(?:"+[ie,le,ce].join("|")+")"+ge,me="(?:"+[ue+ne+"?",ne,le,ce,te].join("|")+")",be=RegExp("['’]","g"),ve=RegExp(ne,"g"),_e=RegExp(ae+"(?="+ae+")|"+me+ge,"g"),we=RegExp([he+"?"+oe+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,he,"$"].join("|")+")",pe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,he+fe,"$"].join("|")+")",he+"?"+fe+"+(?:['’](?:d|ll|m|re|s|t|ve))?",he+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,ye].join("|"),"g"),Ee=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),Te=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Se=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],xe=-1,Ce={};Ce[ct]=Ce[ht]=Ce[ft]=Ce[pt]=Ce[dt]=Ce[gt]=Ce[yt]=Ce[mt]=Ce[bt]=!0,Ce[z]=Ce[K]=Ce[ut]=Ce[q]=Ce[lt]=Ce[$]=Ce[G]=Ce[V]=Ce[X]=Ce[J]=Ce[Z]=Ce[et]=Ce[nt]=Ce[rt]=Ce[st]=!1;var Ae={};Ae[z]=Ae[K]=Ae[ut]=Ae[lt]=Ae[q]=Ae[$]=Ae[ct]=Ae[ht]=Ae[ft]=Ae[pt]=Ae[dt]=Ae[X]=Ae[J]=Ae[Z]=Ae[et]=Ae[nt]=Ae[rt]=Ae[it]=Ae[gt]=Ae[yt]=Ae[mt]=Ae[bt]=!0,Ae[G]=Ae[V]=Ae[st]=!1;var Le={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},ke=parseFloat,Pe=parseInt,Me="object"==typeof t&&t&&t.Object===Object&&t,Oe="object"==typeof self&&self&&self.Object===Object&&self,Re=Me||Oe||Function("return this")(),De="object"==typeof e&&e&&!e.nodeType&&e,Ne=De&&"object"==typeof r&&r&&!r.nodeType&&r,Ie=Ne&&Ne.exports===De,Fe=Ie&&Me.process,Be=function(){try{var t=Ne&&Ne.require&&Ne.require("util").types;return t||Fe&&Fe.binding&&Fe.binding("util")}catch(t){}}(),je=Be&&Be.isArrayBuffer,Ue=Be&&Be.isDate,ze=Be&&Be.isMap,Ke=Be&&Be.isRegExp,We=Be&&Be.isSet,qe=Be&&Be.isTypedArray;function $e(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ye(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var s=t[i];e(r,s,n(s),t)}return r}function Ge(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ve(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function He(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Xe(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var s=t[n];e(s,n,t)&&(o[i++]=s)}return o}function Je(t,e){return!!(null==t?0:t.length)&&un(t,e,0)>-1}function Qe(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function Ze(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function tn(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function en(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function nn(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=fn("length");function sn(t,e,n){var r;return n(t,function(t,n,i){if(e(t,n,i))return r=n,!1}),r}function an(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function un(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):an(t,cn,n)}function ln(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function cn(t){return t!=t}function hn(t,e){var n=null==t?0:t.length;return n?gn(t,e)/n:I}function fn(t){return function(e){return null==e?o:e[t]}}function pn(t){return function(e){return null==t?o:t[e]}}function dn(t,e,n,r,i){return i(t,function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)}),n}function gn(t,e){for(var n,r=-1,i=t.length;++r<i;){var s=e(t[r]);s!==o&&(n=n===o?s:n+s)}return n}function yn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function mn(t){return function(e){return t(e)}}function bn(t,e){return Ze(e,function(e){return t[e]})}function vn(t,e){return t.has(e)}function _n(t,e){for(var n=-1,r=t.length;++n<r&&un(e,t[n],0)>-1;);return n}function wn(t,e){for(var n=t.length;n--&&un(e,t[n],0)>-1;);return n}var En=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Tn=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Sn(t){return"\\"+Le[t]}function xn(t){return Ee.test(t)}function Cn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function An(t,e){return function(n){return t(e(n))}}function Ln(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n];s!==e&&s!==h||(t[n]=h,o[i++]=n)}return o}function kn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function Pn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function Mn(t){return xn(t)?function(t){var e=_e.lastIndex=0;for(;_e.test(t);)++e;return e}(t):on(t)}function On(t){return xn(t)?function(t){return t.match(_e)||[]}(t):function(t){return t.split("")}(t)}var Rn=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Dn=function t(e){var n=(e=null==e?Re:Dn.defaults(Re.Object(),e,Dn.pick(Re,Se))).Array,r=e.Date,i=e.Error,Qt=e.Function,Zt=e.Math,te=e.Object,ee=e.RegExp,ne=e.String,re=e.TypeError,ie=n.prototype,oe=Qt.prototype,se=te.prototype,ae=e["__core-js_shared__"],ue=oe.toString,le=se.hasOwnProperty,ce=0,he=function(){var t=/[^.]+$/.exec(ae&&ae.keys&&ae.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),fe=se.toString,pe=ue.call(te),de=Re._,ge=ee("^"+ue.call(le).replace(Ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ye=Ie?e.Buffer:o,me=e.Symbol,_e=e.Uint8Array,Ee=ye?ye.allocUnsafe:o,Le=An(te.getPrototypeOf,te),Me=te.create,Oe=se.propertyIsEnumerable,De=ie.splice,Ne=me?me.isConcatSpreadable:o,Fe=me?me.iterator:o,Be=me?me.toStringTag:o,on=function(){try{var t=Bo(te,"defineProperty");return t({},"",{}),t}catch(t){}}(),pn=e.clearTimeout!==Re.clearTimeout&&e.clearTimeout,Nn=r&&r.now!==Re.Date.now&&r.now,In=e.setTimeout!==Re.setTimeout&&e.setTimeout,Fn=Zt.ceil,Bn=Zt.floor,jn=te.getOwnPropertySymbols,Un=ye?ye.isBuffer:o,zn=e.isFinite,Kn=ie.join,Wn=An(te.keys,te),qn=Zt.max,$n=Zt.min,Yn=r.now,Gn=e.parseInt,Vn=Zt.random,Hn=ie.reverse,Xn=Bo(e,"DataView"),Jn=Bo(e,"Map"),Qn=Bo(e,"Promise"),Zn=Bo(e,"Set"),tr=Bo(e,"WeakMap"),er=Bo(te,"create"),nr=tr&&new tr,rr={},ir=cs(Xn),or=cs(Jn),sr=cs(Qn),ar=cs(Zn),ur=cs(tr),lr=me?me.prototype:o,cr=lr?lr.valueOf:o,hr=lr?lr.toString:o;function fr(t){if(Aa(t)&&!ya(t)&&!(t instanceof yr)){if(t instanceof gr)return t;if(le.call(t,"__wrapped__"))return hs(t)}return new gr(t)}var pr=function(){function t(){}return function(e){if(!Ca(e))return{};if(Me)return Me(e);t.prototype=e;var n=new t;return t.prototype=o,n}}();function dr(){}function gr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=o}function yr(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=F,this.__views__=[]}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function br(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function vr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function _r(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new vr;++e<n;)this.add(t[e])}function wr(t){var e=this.__data__=new br(t);this.size=e.size}function Er(t,e){var n=ya(t),r=!n&&ga(t),i=!n&&!r&&_a(t),o=!n&&!r&&!i&&Na(t),s=n||r||i||o,a=s?yn(t.length,ne):[],u=a.length;for(var l in t)!e&&!le.call(t,l)||s&&("length"==l||i&&("offset"==l||"parent"==l)||o&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||$o(l,u))||a.push(l);return a}function Tr(t){var e=t.length;return e?t[_i(0,e-1)]:o}function Sr(t,e){return as(eo(t),Rr(e,0,t.length))}function xr(t){return as(eo(t))}function Cr(t,e,n){(n===o||fa(t[e],n))&&(n!==o||e in t)||Mr(t,e,n)}function Ar(t,e,n){var r=t[e];le.call(t,e)&&fa(r,n)&&(n!==o||e in t)||Mr(t,e,n)}function Lr(t,e){for(var n=t.length;n--;)if(fa(t[n][0],e))return n;return-1}function kr(t,e,n,r){return Br(t,function(t,i,o){e(r,t,n(t),o)}),r}function Pr(t,e){return t&&no(e,ru(e),t)}function Mr(t,e,n){"__proto__"==e&&on?on(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Or(t,e){for(var r=-1,i=e.length,s=n(i),a=null==t;++r<i;)s[r]=a?o:Qa(t,e[r]);return s}function Rr(t,e,n){return t==t&&(n!==o&&(t=t<=n?t:n),e!==o&&(t=t>=e?t:e)),t}function Dr(t,e,n,r,i,s){var a,u=e&f,l=e&p,c=e&d;if(n&&(a=i?n(t,r,i,s):n(t)),a!==o)return a;if(!Ca(t))return t;var h=ya(t);if(h){if(a=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&le.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return eo(t,a)}else{var g=zo(t),y=g==V||g==H;if(_a(t))return Hi(t,u);if(g==Z||g==z||y&&!i){if(a=l||y?{}:Wo(t),!u)return l?function(t,e){return no(t,Uo(t),e)}(t,function(t,e){return t&&no(e,iu(e),t)}(a,t)):function(t,e){return no(t,jo(t),e)}(t,Pr(a,t))}else{if(!Ae[g])return i?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case ut:return Xi(t);case q:case $:return new r(+t);case lt:return function(t,e){var n=e?Xi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case ct:case ht:case ft:case pt:case dt:case gt:case yt:case mt:case bt:return Ji(t,n);case X:return new r;case J:case rt:return new r(t);case et:return function(t){var e=new t.constructor(t.source,Wt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case nt:return new r;case it:return function(t){return cr?te(cr.call(t)):{}}(t)}}(t,g,u)}}s||(s=new wr);var m=s.get(t);if(m)return m;if(s.set(t,a),Oa(t))return t.forEach(function(r){a.add(Dr(r,e,n,r,t,s))}),a;if(La(t))return t.forEach(function(r,i){a.set(i,Dr(r,e,n,i,t,s))}),a;var b=h?o:(c?l?Mo:Po:l?iu:ru)(t);return Ge(b||t,function(r,i){b&&(r=t[i=r]),Ar(a,i,Dr(r,e,n,i,t,s))}),a}function Nr(t,e,n){var r=n.length;if(null==t)return!r;for(t=te(t);r--;){var i=n[r],s=e[i],a=t[i];if(a===o&&!(i in t)||!s(a))return!1}return!0}function Ir(t,e,n){if("function"!=typeof t)throw new re(u);return rs(function(){t.apply(o,n)},e)}function Fr(t,e,n,r){var i=-1,o=Je,a=!0,u=t.length,l=[],c=e.length;if(!u)return l;n&&(e=Ze(e,mn(n))),r?(o=Qe,a=!1):e.length>=s&&(o=vn,a=!1,e=new _r(e));t:for(;++i<u;){var h=t[i],f=null==n?h:n(h);if(h=r||0!==h?h:0,a&&f==f){for(var p=c;p--;)if(e[p]===f)continue t;l.push(h)}else o(e,f,r)||l.push(h)}return l}fr.templateSettings={escape:Ct,evaluate:At,interpolate:Lt,variable:"",imports:{_:fr}},fr.prototype=dr.prototype,fr.prototype.constructor=fr,gr.prototype=pr(dr.prototype),gr.prototype.constructor=gr,yr.prototype=pr(dr.prototype),yr.prototype.constructor=yr,mr.prototype.clear=function(){this.__data__=er?er(null):{},this.size=0},mr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},mr.prototype.get=function(t){var e=this.__data__;if(er){var n=e[t];return n===l?o:n}return le.call(e,t)?e[t]:o},mr.prototype.has=function(t){var e=this.__data__;return er?e[t]!==o:le.call(e,t)},mr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=er&&e===o?l:e,this},br.prototype.clear=function(){this.__data__=[],this.size=0},br.prototype.delete=function(t){var e=this.__data__,n=Lr(e,t);return!(n<0||(n==e.length-1?e.pop():De.call(e,n,1),--this.size,0))},br.prototype.get=function(t){var e=this.__data__,n=Lr(e,t);return n<0?o:e[n][1]},br.prototype.has=function(t){return Lr(this.__data__,t)>-1},br.prototype.set=function(t,e){var n=this.__data__,r=Lr(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},vr.prototype.clear=function(){this.size=0,this.__data__={hash:new mr,map:new(Jn||br),string:new mr}},vr.prototype.delete=function(t){var e=Io(this,t).delete(t);return this.size-=e?1:0,e},vr.prototype.get=function(t){return Io(this,t).get(t)},vr.prototype.has=function(t){return Io(this,t).has(t)},vr.prototype.set=function(t,e){var n=Io(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},_r.prototype.add=_r.prototype.push=function(t){return this.__data__.set(t,l),this},_r.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.clear=function(){this.__data__=new br,this.size=0},wr.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},wr.prototype.get=function(t){return this.__data__.get(t)},wr.prototype.has=function(t){return this.__data__.has(t)},wr.prototype.set=function(t,e){var n=this.__data__;if(n instanceof br){var r=n.__data__;if(!Jn||r.length<s-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new vr(r)}return n.set(t,e),this.size=n.size,this};var Br=oo(Yr),jr=oo(Gr,!0);function Ur(t,e){var n=!0;return Br(t,function(t,r,i){return n=!!e(t,r,i)}),n}function zr(t,e,n){for(var r=-1,i=t.length;++r<i;){var s=t[r],a=e(s);if(null!=a&&(u===o?a==a&&!Da(a):n(a,u)))var u=a,l=s}return l}function Kr(t,e){var n=[];return Br(t,function(t,r,i){e(t,r,i)&&n.push(t)}),n}function Wr(t,e,n,r,i){var o=-1,s=t.length;for(n||(n=qo),i||(i=[]);++o<s;){var a=t[o];e>0&&n(a)?e>1?Wr(a,e-1,n,r,i):tn(i,a):r||(i[i.length]=a)}return i}var qr=so(),$r=so(!0);function Yr(t,e){return t&&qr(t,e,ru)}function Gr(t,e){return t&&$r(t,e,ru)}function Vr(t,e){return Xe(e,function(e){return Ta(t[e])})}function Hr(t,e){for(var n=0,r=(e=$i(e,t)).length;null!=t&&n<r;)t=t[ls(e[n++])];return n&&n==r?t:o}function Xr(t,e,n){var r=e(t);return ya(t)?r:tn(r,n(t))}function Jr(t){return null==t?t===o?ot:Q:Be&&Be in te(t)?function(t){var e=le.call(t,Be),n=t[Be];try{t[Be]=o;var r=!0}catch(t){}var i=fe.call(t);return r&&(e?t[Be]=n:delete t[Be]),i}(t):function(t){return fe.call(t)}(t)}function Qr(t,e){return t>e}function Zr(t,e){return null!=t&&le.call(t,e)}function ti(t,e){return null!=t&&e in te(t)}function ei(t,e,r){for(var i=r?Qe:Je,s=t[0].length,a=t.length,u=a,l=n(a),c=1/0,h=[];u--;){var f=t[u];u&&e&&(f=Ze(f,mn(e))),c=$n(f.length,c),l[u]=!r&&(e||s>=120&&f.length>=120)?new _r(u&&f):o}f=t[0];var p=-1,d=l[0];t:for(;++p<s&&h.length<c;){var g=f[p],y=e?e(g):g;if(g=r||0!==g?g:0,!(d?vn(d,y):i(h,y,r))){for(u=a;--u;){var m=l[u];if(!(m?vn(m,y):i(t[u],y,r)))continue t}d&&d.push(y),h.push(g)}}return h}function ni(t,e,n){var r=null==(t=ts(t,e=$i(e,t)))?t:t[ls(Es(e))];return null==r?o:$e(r,t,n)}function ri(t){return Aa(t)&&Jr(t)==z}function ii(t,e,n,r,i){return t===e||(null==t||null==e||!Aa(t)&&!Aa(e)?t!=t&&e!=e:function(t,e,n,r,i,s){var a=ya(t),u=ya(e),l=a?K:zo(t),c=u?K:zo(e),h=(l=l==z?Z:l)==Z,f=(c=c==z?Z:c)==Z,p=l==c;if(p&&_a(t)){if(!_a(e))return!1;a=!0,h=!1}if(p&&!h)return s||(s=new wr),a||Na(t)?Lo(t,e,n,r,i,s):function(t,e,n,r,i,o,s){switch(n){case lt:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ut:return!(t.byteLength!=e.byteLength||!o(new _e(t),new _e(e)));case q:case $:case J:return fa(+t,+e);case G:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case X:var a=Cn;case nt:var u=r&g;if(a||(a=kn),t.size!=e.size&&!u)return!1;var l=s.get(t);if(l)return l==e;r|=y,s.set(t,e);var c=Lo(a(t),a(e),r,i,o,s);return s.delete(t),c;case it:if(cr)return cr.call(t)==cr.call(e)}return!1}(t,e,l,n,r,i,s);if(!(n&g)){var d=h&&le.call(t,"__wrapped__"),m=f&&le.call(e,"__wrapped__");if(d||m){var b=d?t.value():t,v=m?e.value():e;return s||(s=new wr),i(b,v,n,r,s)}}return!!p&&(s||(s=new wr),function(t,e,n,r,i,s){var a=n&g,u=Po(t),l=u.length,c=Po(e).length;if(l!=c&&!a)return!1;for(var h=l;h--;){var f=u[h];if(!(a?f in e:le.call(e,f)))return!1}var p=s.get(t);if(p&&s.get(e))return p==e;var d=!0;s.set(t,e),s.set(e,t);for(var y=a;++h<l;){f=u[h];var m=t[f],b=e[f];if(r)var v=a?r(b,m,f,e,t,s):r(m,b,f,t,e,s);if(!(v===o?m===b||i(m,b,n,r,s):v)){d=!1;break}y||(y="constructor"==f)}if(d&&!y){var _=t.constructor,w=e.constructor;_!=w&&"constructor"in t&&"constructor"in e&&!("function"==typeof _&&_ instanceof _&&"function"==typeof w&&w instanceof w)&&(d=!1)}return s.delete(t),s.delete(e),d}(t,e,n,r,i,s))}(t,e,n,r,ii,i))}function oi(t,e,n,r){var i=n.length,s=i,a=!r;if(null==t)return!s;for(t=te(t);i--;){var u=n[i];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++i<s;){var l=(u=n[i])[0],c=t[l],h=u[1];if(a&&u[2]){if(c===o&&!(l in t))return!1}else{var f=new wr;if(r)var p=r(c,h,l,t,e,f);if(!(p===o?ii(h,c,g|y,r,f):p))return!1}}return!0}function si(t){return!(!Ca(t)||function(t){return!!he&&he in t}(t))&&(Ta(t)?ge:Yt).test(cs(t))}function ai(t){return"function"==typeof t?t:null==t?ku:"object"==typeof t?ya(t)?pi(t[0],t[1]):fi(t):Bu(t)}function ui(t){if(!Xo(t))return Wn(t);var e=[];for(var n in te(t))le.call(t,n)&&"constructor"!=n&&e.push(n);return e}function li(t){if(!Ca(t))return function(t){var e=[];if(null!=t)for(var n in te(t))e.push(n);return e}(t);var e=Xo(t),n=[];for(var r in t)("constructor"!=r||!e&&le.call(t,r))&&n.push(r);return n}function ci(t,e){return t<e}function hi(t,e){var r=-1,i=ba(t)?n(t.length):[];return Br(t,function(t,n,o){i[++r]=e(t,n,o)}),i}function fi(t){var e=Fo(t);return 1==e.length&&e[0][2]?Qo(e[0][0],e[0][1]):function(n){return n===t||oi(n,t,e)}}function pi(t,e){return Go(t)&&Jo(e)?Qo(ls(t),e):function(n){var r=Qa(n,t);return r===o&&r===e?Za(n,t):ii(e,r,g|y)}}function di(t,e,n,r,i){t!==e&&qr(e,function(s,a){if(Ca(s))i||(i=new wr),function(t,e,n,r,i,s,a){var u=es(t,n),l=es(e,n),c=a.get(l);if(c)Cr(t,n,c);else{var h=s?s(u,l,n+"",t,e,a):o,f=h===o;if(f){var p=ya(l),d=!p&&_a(l),g=!p&&!d&&Na(l);h=l,p||d||g?ya(u)?h=u:va(u)?h=eo(u):d?(f=!1,h=Hi(l,!0)):g?(f=!1,h=Ji(l,!0)):h=[]:Pa(l)||ga(l)?(h=u,ga(u)?h=Wa(u):Ca(u)&&!Ta(u)||(h=Wo(l))):f=!1}f&&(a.set(l,h),i(h,l,r,s,a),a.delete(l)),Cr(t,n,h)}}(t,e,a,n,di,r,i);else{var u=r?r(es(t,a),s,a+"",t,e,i):o;u===o&&(u=s),Cr(t,a,u)}},iu)}function gi(t,e){var n=t.length;if(n)return $o(e+=e<0?n:0,n)?t[e]:o}function yi(t,e,n){var r=-1;return e=Ze(e.length?e:[ku],mn(No())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(hi(t,function(t,n,i){return{criteria:Ze(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,s=i.length,a=n.length;++r<s;){var u=Qi(i[r],o[r]);if(u){if(r>=a)return u;var l=n[r];return u*("desc"==l?-1:1)}}return t.index-e.index}(t,e,n)})}function mi(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var s=e[r],a=Hr(t,s);n(a,s)&&xi(o,$i(s,t),a)}return o}function bi(t,e,n,r){var i=r?ln:un,o=-1,s=e.length,a=t;for(t===e&&(e=eo(e)),n&&(a=Ze(t,mn(n)));++o<s;)for(var u=0,l=e[o],c=n?n(l):l;(u=i(a,c,u,r))>-1;)a!==t&&De.call(a,u,1),De.call(t,u,1);return t}function vi(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;$o(i)?De.call(t,i,1):Fi(t,i)}}return t}function _i(t,e){return t+Bn(Vn()*(e-t+1))}function wi(t,e){var n="";if(!t||e<1||e>D)return n;do{e%2&&(n+=t),(e=Bn(e/2))&&(t+=t)}while(e);return n}function Ei(t,e){return is(Zo(t,e,ku),t+"")}function Ti(t){return Tr(fu(t))}function Si(t,e){var n=fu(t);return as(n,Rr(e,0,n.length))}function xi(t,e,n,r){if(!Ca(t))return t;for(var i=-1,s=(e=$i(e,t)).length,a=s-1,u=t;null!=u&&++i<s;){var l=ls(e[i]),c=n;if(i!=a){var h=u[l];(c=r?r(h,l,u):o)===o&&(c=Ca(h)?h:$o(e[i+1])?[]:{})}Ar(u,l,c),u=u[l]}return t}var Ci=nr?function(t,e){return nr.set(t,e),t}:ku,Ai=on?function(t,e){return on(t,"toString",{configurable:!0,enumerable:!1,value:Cu(e),writable:!0})}:ku;function Li(t){return as(fu(t))}function ki(t,e,r){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(r=r>o?o:r)<0&&(r+=o),o=e>r?0:r-e>>>0,e>>>=0;for(var s=n(o);++i<o;)s[i]=t[i+e];return s}function Pi(t,e){var n;return Br(t,function(t,r,i){return!(n=e(t,r,i))}),!!n}function Mi(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=j){for(;r<i;){var o=r+i>>>1,s=t[o];null!==s&&!Da(s)&&(n?s<=e:s<e)?r=o+1:i=o}return i}return Oi(t,e,ku,n)}function Oi(t,e,n,r){e=n(e);for(var i=0,s=null==t?0:t.length,a=e!=e,u=null===e,l=Da(e),c=e===o;i<s;){var h=Bn((i+s)/2),f=n(t[h]),p=f!==o,d=null===f,g=f==f,y=Da(f);if(a)var m=r||g;else m=c?g&&(r||p):u?g&&p&&(r||!d):l?g&&p&&!d&&(r||!y):!d&&!y&&(r?f<=e:f<e);m?i=h+1:s=h}return $n(s,B)}function Ri(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var s=t[n],a=e?e(s):s;if(!n||!fa(a,u)){var u=a;o[i++]=0===s?0:s}}return o}function Di(t){return"number"==typeof t?t:Da(t)?I:+t}function Ni(t){if("string"==typeof t)return t;if(ya(t))return Ze(t,Ni)+"";if(Da(t))return hr?hr.call(t):"";var e=t+"";return"0"==e&&1/t==-R?"-0":e}function Ii(t,e,n){var r=-1,i=Je,o=t.length,a=!0,u=[],l=u;if(n)a=!1,i=Qe;else if(o>=s){var c=e?null:Eo(t);if(c)return kn(c);a=!1,i=vn,l=new _r}else l=e?[]:u;t:for(;++r<o;){var h=t[r],f=e?e(h):h;if(h=n||0!==h?h:0,a&&f==f){for(var p=l.length;p--;)if(l[p]===f)continue t;e&&l.push(f),u.push(h)}else i(l,f,n)||(l!==u&&l.push(f),u.push(h))}return u}function Fi(t,e){return null==(t=ts(t,e=$i(e,t)))||delete t[ls(Es(e))]}function Bi(t,e,n,r){return xi(t,e,n(Hr(t,e)),r)}function ji(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?ki(t,r?0:o,r?o+1:i):ki(t,r?o+1:0,r?i:o)}function Ui(t,e){var n=t;return n instanceof yr&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function zi(t,e,r){var i=t.length;if(i<2)return i?Ii(t[0]):[];for(var o=-1,s=n(i);++o<i;)for(var a=t[o],u=-1;++u<i;)u!=o&&(s[o]=Fr(s[o]||a,t[u],e,r));return Ii(Wr(s,1),e,r)}function Ki(t,e,n){for(var r=-1,i=t.length,s=e.length,a={};++r<i;){var u=r<s?e[r]:o;n(a,t[r],u)}return a}function Wi(t){return va(t)?t:[]}function qi(t){return"function"==typeof t?t:ku}function $i(t,e){return ya(t)?t:Go(t,e)?[t]:us(qa(t))}var Yi=Ei;function Gi(t,e,n){var r=t.length;return n=n===o?r:n,!e&&n>=r?t:ki(t,e,n)}var Vi=pn||function(t){return Re.clearTimeout(t)};function Hi(t,e){if(e)return t.slice();var n=t.length,r=Ee?Ee(n):new t.constructor(n);return t.copy(r),r}function Xi(t){var e=new t.constructor(t.byteLength);return new _e(e).set(new _e(t)),e}function Ji(t,e){var n=e?Xi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Qi(t,e){if(t!==e){var n=t!==o,r=null===t,i=t==t,s=Da(t),a=e!==o,u=null===e,l=e==e,c=Da(e);if(!u&&!c&&!s&&t>e||s&&a&&l&&!u&&!c||r&&a&&l||!n&&l||!i)return 1;if(!r&&!s&&!c&&t<e||c&&n&&i&&!r&&!s||u&&n&&i||!a&&i||!l)return-1}return 0}function Zi(t,e,r,i){for(var o=-1,s=t.length,a=r.length,u=-1,l=e.length,c=qn(s-a,0),h=n(l+c),f=!i;++u<l;)h[u]=e[u];for(;++o<a;)(f||o<s)&&(h[r[o]]=t[o]);for(;c--;)h[u++]=t[o++];return h}function to(t,e,r,i){for(var o=-1,s=t.length,a=-1,u=r.length,l=-1,c=e.length,h=qn(s-u,0),f=n(h+c),p=!i;++o<h;)f[o]=t[o];for(var d=o;++l<c;)f[d+l]=e[l];for(;++a<u;)(p||o<s)&&(f[d+r[a]]=t[o++]);return f}function eo(t,e){var r=-1,i=t.length;for(e||(e=n(i));++r<i;)e[r]=t[r];return e}function no(t,e,n,r){var i=!n;n||(n={});for(var s=-1,a=e.length;++s<a;){var u=e[s],l=r?r(n[u],t[u],u,n,t):o;l===o&&(l=t[u]),i?Mr(n,u,l):Ar(n,u,l)}return n}function ro(t,e){return function(n,r){var i=ya(n)?Ye:kr,o=e?e():{};return i(n,t,No(r,2),o)}}function io(t){return Ei(function(e,n){var r=-1,i=n.length,s=i>1?n[i-1]:o,a=i>2?n[2]:o;for(s=t.length>3&&"function"==typeof s?(i--,s):o,a&&Yo(n[0],n[1],a)&&(s=i<3?o:s,i=1),e=te(e);++r<i;){var u=n[r];u&&t(e,u,r,s)}return e})}function oo(t,e){return function(n,r){if(null==n)return n;if(!ba(n))return t(n,r);for(var i=n.length,o=e?i:-1,s=te(n);(e?o--:++o<i)&&!1!==r(s[o],o,s););return n}}function so(t){return function(e,n,r){for(var i=-1,o=te(e),s=r(e),a=s.length;a--;){var u=s[t?a:++i];if(!1===n(o[u],u,o))break}return e}}function ao(t){return function(e){var n=xn(e=qa(e))?On(e):o,r=n?n[0]:e.charAt(0),i=n?Gi(n,1).join(""):e.slice(1);return r[t]()+i}}function uo(t){return function(e){return en(Tu(gu(e).replace(be,"")),t,"")}}function lo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=pr(t.prototype),r=t.apply(n,e);return Ca(r)?r:n}}function co(t){return function(e,n,r){var i=te(e);if(!ba(e)){var s=No(n,3);e=ru(e),n=function(t){return s(i[t],t,i)}}var a=t(e,n,r);return a>-1?i[s?e[a]:a]:o}}function ho(t){return ko(function(e){var n=e.length,r=n,i=gr.prototype.thru;for(t&&e.reverse();r--;){var s=e[r];if("function"!=typeof s)throw new re(u);if(i&&!a&&"wrapper"==Ro(s))var a=new gr([],!0)}for(r=a?r:n;++r<n;){var l=Ro(s=e[r]),c="wrapper"==l?Oo(s):o;a=c&&Vo(c[0])&&c[1]==(S|_|E|x)&&!c[4].length&&1==c[9]?a[Ro(c[0])].apply(a,c[3]):1==s.length&&Vo(s)?a[l]():a.thru(s)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&ya(r))return a.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}})}function fo(t,e,r,i,s,a,u,l,c,h){var f=e&S,p=e&m,d=e&b,g=e&(_|w),y=e&C,v=d?o:lo(t);return function m(){for(var b=arguments.length,_=n(b),w=b;w--;)_[w]=arguments[w];if(g)var E=Do(m),T=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(_,E);if(i&&(_=Zi(_,i,s,g)),a&&(_=to(_,a,u,g)),b-=T,g&&b<h){var S=Ln(_,E);return _o(t,e,fo,m.placeholder,r,_,S,l,c,h-b)}var x=p?r:this,C=d?x[t]:t;return b=_.length,l?_=function(t,e){for(var n=t.length,r=$n(e.length,n),i=eo(t);r--;){var s=e[r];t[r]=$o(s,n)?i[s]:o}return t}(_,l):y&&b>1&&_.reverse(),f&&c<b&&(_.length=c),this&&this!==Re&&this instanceof m&&(C=v||lo(C)),C.apply(x,_)}}function po(t,e){return function(n,r){return function(t,e,n,r){return Yr(t,function(t,i,o){e(r,n(t),i,o)}),r}(n,t,e(r),{})}}function go(t,e){return function(n,r){var i;if(n===o&&r===o)return e;if(n!==o&&(i=n),r!==o){if(i===o)return r;"string"==typeof n||"string"==typeof r?(n=Ni(n),r=Ni(r)):(n=Di(n),r=Di(r)),i=t(n,r)}return i}}function yo(t){return ko(function(e){return e=Ze(e,mn(No())),Ei(function(n){var r=this;return t(e,function(t){return $e(t,r,n)})})})}function mo(t,e){var n=(e=e===o?" ":Ni(e)).length;if(n<2)return n?wi(e,t):e;var r=wi(e,Fn(t/Mn(e)));return xn(e)?Gi(On(r),0,t).join(""):r.slice(0,t)}function bo(t){return function(e,r,i){return i&&"number"!=typeof i&&Yo(e,r,i)&&(r=i=o),e=ja(e),r===o?(r=e,e=0):r=ja(r),function(t,e,r,i){for(var o=-1,s=qn(Fn((e-t)/(r||1)),0),a=n(s);s--;)a[i?s:++o]=t,t+=r;return a}(e,r,i=i===o?e<r?1:-1:ja(i),t)}}function vo(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Ka(e),n=Ka(n)),t(e,n)}}function _o(t,e,n,r,i,s,a,u,l,c){var h=e&_;e|=h?E:T,(e&=~(h?T:E))&v||(e&=~(m|b));var f=[t,e,i,h?s:o,h?a:o,h?o:s,h?o:a,u,l,c],p=n.apply(o,f);return Vo(t)&&ns(p,f),p.placeholder=r,os(p,t,e)}function wo(t){var e=Zt[t];return function(t,n){if(t=Ka(t),n=null==n?0:$n(Ua(n),292)){var r=(qa(t)+"e").split("e");return+((r=(qa(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Eo=Zn&&1/kn(new Zn([,-0]))[1]==R?function(t){return new Zn(t)}:Du;function To(t){return function(e){var n=zo(e);return n==X?Cn(e):n==nt?Pn(e):function(t,e){return Ze(e,function(e){return[e,t[e]]})}(e,t(e))}}function So(t,e,r,i,s,a,l,c){var f=e&b;if(!f&&"function"!=typeof t)throw new re(u);var p=i?i.length:0;if(p||(e&=~(E|T),i=s=o),l=l===o?l:qn(Ua(l),0),c=c===o?c:Ua(c),p-=s?s.length:0,e&T){var d=i,g=s;i=s=o}var y=f?o:Oo(t),C=[t,e,r,i,s,d,g,a,l,c];if(y&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<(m|b|S),s=r==S&&n==_||r==S&&n==x&&t[7].length<=e[8]||r==(S|x)&&e[7].length<=e[8]&&n==_;if(!o&&!s)return t;r&m&&(t[2]=e[2],i|=n&m?0:v);var a=e[3];if(a){var u=t[3];t[3]=u?Zi(u,a,e[4]):a,t[4]=u?Ln(t[3],h):e[4]}(a=e[5])&&(u=t[5],t[5]=u?to(u,a,e[6]):a,t[6]=u?Ln(t[5],h):e[6]),(a=e[7])&&(t[7]=a),r&S&&(t[8]=null==t[8]?e[8]:$n(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=i}(C,y),t=C[0],e=C[1],r=C[2],i=C[3],s=C[4],!(c=C[9]=C[9]===o?f?0:t.length:qn(C[9]-p,0))&&e&(_|w)&&(e&=~(_|w)),e&&e!=m)A=e==_||e==w?function(t,e,r){var i=lo(t);return function s(){for(var a=arguments.length,u=n(a),l=a,c=Do(s);l--;)u[l]=arguments[l];var h=a<3&&u[0]!==c&&u[a-1]!==c?[]:Ln(u,c);return(a-=h.length)<r?_o(t,e,fo,s.placeholder,o,u,h,o,o,r-a):$e(this&&this!==Re&&this instanceof s?i:t,this,u)}}(t,e,c):e!=E&&e!=(m|E)||s.length?fo.apply(o,C):function(t,e,r,i){var o=e&m,s=lo(t);return function e(){for(var a=-1,u=arguments.length,l=-1,c=i.length,h=n(c+u),f=this&&this!==Re&&this instanceof e?s:t;++l<c;)h[l]=i[l];for(;u--;)h[l++]=arguments[++a];return $e(f,o?r:this,h)}}(t,e,r,i);else var A=function(t,e,n){var r=e&m,i=lo(t);return function e(){return(this&&this!==Re&&this instanceof e?i:t).apply(r?n:this,arguments)}}(t,e,r);return os((y?Ci:ns)(A,C),t,e)}function xo(t,e,n,r){return t===o||fa(t,se[n])&&!le.call(r,n)?e:t}function Co(t,e,n,r,i,s){return Ca(t)&&Ca(e)&&(s.set(e,t),di(t,e,o,Co,s),s.delete(e)),t}function Ao(t){return Pa(t)?o:t}function Lo(t,e,n,r,i,s){var a=n&g,u=t.length,l=e.length;if(u!=l&&!(a&&l>u))return!1;var c=s.get(t);if(c&&s.get(e))return c==e;var h=-1,f=!0,p=n&y?new _r:o;for(s.set(t,e),s.set(e,t);++h<u;){var d=t[h],m=e[h];if(r)var b=a?r(m,d,h,e,t,s):r(d,m,h,t,e,s);if(b!==o){if(b)continue;f=!1;break}if(p){if(!rn(e,function(t,e){if(!vn(p,e)&&(d===t||i(d,t,n,r,s)))return p.push(e)})){f=!1;break}}else if(d!==m&&!i(d,m,n,r,s)){f=!1;break}}return s.delete(t),s.delete(e),f}function ko(t){return is(Zo(t,o,ms),t+"")}function Po(t){return Xr(t,ru,jo)}function Mo(t){return Xr(t,iu,Uo)}var Oo=nr?function(t){return nr.get(t)}:Du;function Ro(t){for(var e=t.name+"",n=rr[e],r=le.call(rr,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Do(t){return(le.call(fr,"placeholder")?fr:t).placeholder}function No(){var t=fr.iteratee||Pu;return t=t===Pu?ai:t,arguments.length?t(arguments[0],arguments[1]):t}function Io(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function Fo(t){for(var e=ru(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Jo(i)]}return e}function Bo(t,e){var n=function(t,e){return null==t?o:t[e]}(t,e);return si(n)?n:o}var jo=jn?function(t){return null==t?[]:(t=te(t),Xe(jn(t),function(e){return Oe.call(t,e)}))}:zu,Uo=jn?function(t){for(var e=[];t;)tn(e,jo(t)),t=Le(t);return e}:zu,zo=Jr;function Ko(t,e,n){for(var r=-1,i=(e=$i(e,t)).length,o=!1;++r<i;){var s=ls(e[r]);if(!(o=null!=t&&n(t,s)))break;t=t[s]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&xa(i)&&$o(s,i)&&(ya(t)||ga(t))}function Wo(t){return"function"!=typeof t.constructor||Xo(t)?{}:pr(Le(t))}function qo(t){return ya(t)||ga(t)||!!(Ne&&t&&t[Ne])}function $o(t,e){var n=typeof t;return!!(e=null==e?D:e)&&("number"==n||"symbol"!=n&&Vt.test(t))&&t>-1&&t%1==0&&t<e}function Yo(t,e,n){if(!Ca(n))return!1;var r=typeof e;return!!("number"==r?ba(n)&&$o(e,n.length):"string"==r&&e in n)&&fa(n[e],t)}function Go(t,e){if(ya(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Da(t))||Pt.test(t)||!kt.test(t)||null!=e&&t in te(e)}function Vo(t){var e=Ro(t),n=fr[e];if("function"!=typeof n||!(e in yr.prototype))return!1;if(t===n)return!0;var r=Oo(n);return!!r&&t===r[0]}(Xn&&zo(new Xn(new ArrayBuffer(1)))!=lt||Jn&&zo(new Jn)!=X||Qn&&"[object Promise]"!=zo(Qn.resolve())||Zn&&zo(new Zn)!=nt||tr&&zo(new tr)!=st)&&(zo=function(t){var e=Jr(t),n=e==Z?t.constructor:o,r=n?cs(n):"";if(r)switch(r){case ir:return lt;case or:return X;case sr:return"[object Promise]";case ar:return nt;case ur:return st}return e});var Ho=ae?Ta:Ku;function Xo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||se)}function Jo(t){return t==t&&!Ca(t)}function Qo(t,e){return function(n){return null!=n&&n[t]===e&&(e!==o||t in te(n))}}function Zo(t,e,r){return e=qn(e===o?t.length-1:e,0),function(){for(var i=arguments,o=-1,s=qn(i.length-e,0),a=n(s);++o<s;)a[o]=i[e+o];o=-1;for(var u=n(e+1);++o<e;)u[o]=i[o];return u[e]=r(a),$e(t,this,u)}}function ts(t,e){return e.length<2?t:Hr(t,ki(e,0,-1))}function es(t,e){if("__proto__"!=e)return t[e]}var ns=ss(Ci),rs=In||function(t,e){return Re.setTimeout(t,e)},is=ss(Ai);function os(t,e,n){var r=e+"";return is(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Ft,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Ge(U,function(n){var r="_."+n[0];e&n[1]&&!Je(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Bt);return e?e[1].split(jt):[]}(r),n)))}function ss(t){var e=0,n=0;return function(){var r=Yn(),i=P-(r-n);if(n=r,i>0){if(++e>=k)return arguments[0]}else e=0;return t.apply(o,arguments)}}function as(t,e){var n=-1,r=t.length,i=r-1;for(e=e===o?r:e;++n<e;){var s=_i(n,i),a=t[s];t[s]=t[n],t[n]=a}return t.length=e,t}var us=function(t){var e=sa(t,function(t){return n.size===c&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(Mt,function(t,n,r,i){e.push(r?i.replace(zt,"$1"):n||t)}),e});function ls(t){if("string"==typeof t||Da(t))return t;var e=t+"";return"0"==e&&1/t==-R?"-0":e}function cs(t){if(null!=t){try{return ue.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function hs(t){if(t instanceof yr)return t.clone();var e=new gr(t.__wrapped__,t.__chain__);return e.__actions__=eo(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var fs=Ei(function(t,e){return va(t)?Fr(t,Wr(e,1,va,!0)):[]}),ps=Ei(function(t,e){var n=Es(e);return va(n)&&(n=o),va(t)?Fr(t,Wr(e,1,va,!0),No(n,2)):[]}),ds=Ei(function(t,e){var n=Es(e);return va(n)&&(n=o),va(t)?Fr(t,Wr(e,1,va,!0),o,n):[]});function gs(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Ua(n);return i<0&&(i=qn(r+i,0)),an(t,No(e,3),i)}function ys(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return n!==o&&(i=Ua(n),i=n<0?qn(r+i,0):$n(i,r-1)),an(t,No(e,3),i,!0)}function ms(t){return null!=t&&t.length?Wr(t,1):[]}function bs(t){return t&&t.length?t[0]:o}var vs=Ei(function(t){var e=Ze(t,Wi);return e.length&&e[0]===t[0]?ei(e):[]}),_s=Ei(function(t){var e=Es(t),n=Ze(t,Wi);return e===Es(n)?e=o:n.pop(),n.length&&n[0]===t[0]?ei(n,No(e,2)):[]}),ws=Ei(function(t){var e=Es(t),n=Ze(t,Wi);return(e="function"==typeof e?e:o)&&n.pop(),n.length&&n[0]===t[0]?ei(n,o,e):[]});function Es(t){var e=null==t?0:t.length;return e?t[e-1]:o}var Ts=Ei(Ss);function Ss(t,e){return t&&t.length&&e&&e.length?bi(t,e):t}var xs=ko(function(t,e){var n=null==t?0:t.length,r=Or(t,e);return vi(t,Ze(e,function(t){return $o(t,n)?+t:t}).sort(Qi)),r});function Cs(t){return null==t?t:Hn.call(t)}var As=Ei(function(t){return Ii(Wr(t,1,va,!0))}),Ls=Ei(function(t){var e=Es(t);return va(e)&&(e=o),Ii(Wr(t,1,va,!0),No(e,2))}),ks=Ei(function(t){var e=Es(t);return e="function"==typeof e?e:o,Ii(Wr(t,1,va,!0),o,e)});function Ps(t){if(!t||!t.length)return[];var e=0;return t=Xe(t,function(t){if(va(t))return e=qn(t.length,e),!0}),yn(e,function(e){return Ze(t,fn(e))})}function Ms(t,e){if(!t||!t.length)return[];var n=Ps(t);return null==e?n:Ze(n,function(t){return $e(e,o,t)})}var Os=Ei(function(t,e){return va(t)?Fr(t,e):[]}),Rs=Ei(function(t){return zi(Xe(t,va))}),Ds=Ei(function(t){var e=Es(t);return va(e)&&(e=o),zi(Xe(t,va),No(e,2))}),Ns=Ei(function(t){var e=Es(t);return e="function"==typeof e?e:o,zi(Xe(t,va),o,e)}),Is=Ei(Ps);var Fs=Ei(function(t){var e=t.length,n=e>1?t[e-1]:o;return Ms(t,n="function"==typeof n?(t.pop(),n):o)});function Bs(t){var e=fr(t);return e.__chain__=!0,e}function js(t,e){return e(t)}var Us=ko(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Or(e,t)};return!(e>1||this.__actions__.length)&&r instanceof yr&&$o(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:js,args:[i],thisArg:o}),new gr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(o),t})):this.thru(i)});var zs=ro(function(t,e,n){le.call(t,n)?++t[n]:Mr(t,n,1)});var Ks=co(gs),Ws=co(ys);function qs(t,e){return(ya(t)?Ge:Br)(t,No(e,3))}function $s(t,e){return(ya(t)?Ve:jr)(t,No(e,3))}var Ys=ro(function(t,e,n){le.call(t,n)?t[n].push(e):Mr(t,n,[e])});var Gs=Ei(function(t,e,r){var i=-1,o="function"==typeof e,s=ba(t)?n(t.length):[];return Br(t,function(t){s[++i]=o?$e(e,t,r):ni(t,e,r)}),s}),Vs=ro(function(t,e,n){Mr(t,n,e)});function Hs(t,e){return(ya(t)?Ze:hi)(t,No(e,3))}var Xs=ro(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Js=Ei(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Yo(t,e[0],e[1])?e=[]:n>2&&Yo(e[0],e[1],e[2])&&(e=[e[0]]),yi(t,Wr(e,1),[])}),Qs=Nn||function(){return Re.Date.now()};function Zs(t,e,n){return e=n?o:e,e=t&&null==e?t.length:e,So(t,S,o,o,o,o,e)}function ta(t,e){var n;if("function"!=typeof e)throw new re(u);return t=Ua(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=o),n}}var ea=Ei(function(t,e,n){var r=m;if(n.length){var i=Ln(n,Do(ea));r|=E}return So(t,r,e,n,i)}),na=Ei(function(t,e,n){var r=m|b;if(n.length){var i=Ln(n,Do(na));r|=E}return So(e,r,t,n,i)});function ra(t,e,n){var r,i,s,a,l,c,h=0,f=!1,p=!1,d=!0;if("function"!=typeof t)throw new re(u);function g(e){var n=r,s=i;return r=i=o,h=e,a=t.apply(s,n)}function y(t){var n=t-c;return c===o||n>=e||n<0||p&&t-h>=s}function m(){var t=Qs();if(y(t))return b(t);l=rs(m,function(t){var n=e-(t-c);return p?$n(n,s-(t-h)):n}(t))}function b(t){return l=o,d&&r?g(t):(r=i=o,a)}function v(){var t=Qs(),n=y(t);if(r=arguments,i=this,c=t,n){if(l===o)return function(t){return h=t,l=rs(m,e),f?g(t):a}(c);if(p)return l=rs(m,e),g(c)}return l===o&&(l=rs(m,e)),a}return e=Ka(e)||0,Ca(n)&&(f=!!n.leading,s=(p="maxWait"in n)?qn(Ka(n.maxWait)||0,e):s,d="trailing"in n?!!n.trailing:d),v.cancel=function(){l!==o&&Vi(l),h=0,r=c=i=l=o},v.flush=function(){return l===o?a:b(Qs())},v}var ia=Ei(function(t,e){return Ir(t,1,e)}),oa=Ei(function(t,e,n){return Ir(t,Ka(e)||0,n)});function sa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new re(u);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var s=t.apply(this,r);return n.cache=o.set(i,s)||o,s};return n.cache=new(sa.Cache||vr),n}function aa(t){if("function"!=typeof t)throw new re(u);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}sa.Cache=vr;var ua=Yi(function(t,e){var n=(e=1==e.length&&ya(e[0])?Ze(e[0],mn(No())):Ze(Wr(e,1),mn(No()))).length;return Ei(function(r){for(var i=-1,o=$n(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return $e(t,this,r)})}),la=Ei(function(t,e){var n=Ln(e,Do(la));return So(t,E,o,e,n)}),ca=Ei(function(t,e){var n=Ln(e,Do(ca));return So(t,T,o,e,n)}),ha=ko(function(t,e){return So(t,x,o,o,o,e)});function fa(t,e){return t===e||t!=t&&e!=e}var pa=vo(Qr),da=vo(function(t,e){return t>=e}),ga=ri(function(){return arguments}())?ri:function(t){return Aa(t)&&le.call(t,"callee")&&!Oe.call(t,"callee")},ya=n.isArray,ma=je?mn(je):function(t){return Aa(t)&&Jr(t)==ut};function ba(t){return null!=t&&xa(t.length)&&!Ta(t)}function va(t){return Aa(t)&&ba(t)}var _a=Un||Ku,wa=Ue?mn(Ue):function(t){return Aa(t)&&Jr(t)==$};function Ea(t){if(!Aa(t))return!1;var e=Jr(t);return e==G||e==Y||"string"==typeof t.message&&"string"==typeof t.name&&!Pa(t)}function Ta(t){if(!Ca(t))return!1;var e=Jr(t);return e==V||e==H||e==W||e==tt}function Sa(t){return"number"==typeof t&&t==Ua(t)}function xa(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=D}function Ca(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Aa(t){return null!=t&&"object"==typeof t}var La=ze?mn(ze):function(t){return Aa(t)&&zo(t)==X};function ka(t){return"number"==typeof t||Aa(t)&&Jr(t)==J}function Pa(t){if(!Aa(t)||Jr(t)!=Z)return!1;var e=Le(t);if(null===e)return!0;var n=le.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ue.call(n)==pe}var Ma=Ke?mn(Ke):function(t){return Aa(t)&&Jr(t)==et};var Oa=We?mn(We):function(t){return Aa(t)&&zo(t)==nt};function Ra(t){return"string"==typeof t||!ya(t)&&Aa(t)&&Jr(t)==rt}function Da(t){return"symbol"==typeof t||Aa(t)&&Jr(t)==it}var Na=qe?mn(qe):function(t){return Aa(t)&&xa(t.length)&&!!Ce[Jr(t)]};var Ia=vo(ci),Fa=vo(function(t,e){return t<=e});function Ba(t){if(!t)return[];if(ba(t))return Ra(t)?On(t):eo(t);if(Fe&&t[Fe])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Fe]());var e=zo(t);return(e==X?Cn:e==nt?kn:fu)(t)}function ja(t){return t?(t=Ka(t))===R||t===-R?(t<0?-1:1)*N:t==t?t:0:0===t?t:0}function Ua(t){var e=ja(t),n=e%1;return e==e?n?e-n:e:0}function za(t){return t?Rr(Ua(t),0,F):0}function Ka(t){if("number"==typeof t)return t;if(Da(t))return I;if(Ca(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Ca(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Dt,"");var n=$t.test(t);return n||Gt.test(t)?Pe(t.slice(2),n?2:8):qt.test(t)?I:+t}function Wa(t){return no(t,iu(t))}function qa(t){return null==t?"":Ni(t)}var $a=io(function(t,e){if(Xo(e)||ba(e))no(e,ru(e),t);else for(var n in e)le.call(e,n)&&Ar(t,n,e[n])}),Ya=io(function(t,e){no(e,iu(e),t)}),Ga=io(function(t,e,n,r){no(e,iu(e),t,r)}),Va=io(function(t,e,n,r){no(e,ru(e),t,r)}),Ha=ko(Or);var Xa=Ei(function(t,e){t=te(t);var n=-1,r=e.length,i=r>2?e[2]:o;for(i&&Yo(e[0],e[1],i)&&(r=1);++n<r;)for(var s=e[n],a=iu(s),u=-1,l=a.length;++u<l;){var c=a[u],h=t[c];(h===o||fa(h,se[c])&&!le.call(t,c))&&(t[c]=s[c])}return t}),Ja=Ei(function(t){return t.push(o,Co),$e(su,o,t)});function Qa(t,e,n){var r=null==t?o:Hr(t,e);return r===o?n:r}function Za(t,e){return null!=t&&Ko(t,e,ti)}var tu=po(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=fe.call(e)),t[e]=n},Cu(ku)),eu=po(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=fe.call(e)),le.call(t,e)?t[e].push(n):t[e]=[n]},No),nu=Ei(ni);function ru(t){return ba(t)?Er(t):ui(t)}function iu(t){return ba(t)?Er(t,!0):li(t)}var ou=io(function(t,e,n){di(t,e,n)}),su=io(function(t,e,n,r){di(t,e,n,r)}),au=ko(function(t,e){var n={};if(null==t)return n;var r=!1;e=Ze(e,function(e){return e=$i(e,t),r||(r=e.length>1),e}),no(t,Mo(t),n),r&&(n=Dr(n,f|p|d,Ao));for(var i=e.length;i--;)Fi(n,e[i]);return n});var uu=ko(function(t,e){return null==t?{}:function(t,e){return mi(t,e,function(e,n){return Za(t,n)})}(t,e)});function lu(t,e){if(null==t)return{};var n=Ze(Mo(t),function(t){return[t]});return e=No(e),mi(t,n,function(t,n){return e(t,n[0])})}var cu=To(ru),hu=To(iu);function fu(t){return null==t?[]:bn(t,ru(t))}var pu=uo(function(t,e,n){return e=e.toLowerCase(),t+(n?du(e):e)});function du(t){return Eu(qa(t).toLowerCase())}function gu(t){return(t=qa(t))&&t.replace(Ht,En).replace(ve,"")}var yu=uo(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),mu=uo(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),bu=ao("toLowerCase");var vu=uo(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var _u=uo(function(t,e,n){return t+(n?" ":"")+Eu(e)});var wu=uo(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),Eu=ao("toUpperCase");function Tu(t,e,n){return t=qa(t),(e=n?o:e)===o?function(t){return Te.test(t)}(t)?function(t){return t.match(we)||[]}(t):function(t){return t.match(Ut)||[]}(t):t.match(e)||[]}var Su=Ei(function(t,e){try{return $e(t,o,e)}catch(t){return Ea(t)?t:new i(t)}}),xu=ko(function(t,e){return Ge(e,function(e){e=ls(e),Mr(t,e,ea(t[e],t))}),t});function Cu(t){return function(){return t}}var Au=ho(),Lu=ho(!0);function ku(t){return t}function Pu(t){return ai("function"==typeof t?t:Dr(t,f))}var Mu=Ei(function(t,e){return function(n){return ni(n,t,e)}}),Ou=Ei(function(t,e){return function(n){return ni(t,n,e)}});function Ru(t,e,n){var r=ru(e),i=Vr(e,r);null!=n||Ca(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=Vr(e,ru(e)));var o=!(Ca(n)&&"chain"in n&&!n.chain),s=Ta(t);return Ge(i,function(n){var r=e[n];t[n]=r,s&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__);return(n.__actions__=eo(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Du(){}var Nu=yo(Ze),Iu=yo(He),Fu=yo(rn);function Bu(t){return Go(t)?fn(ls(t)):function(t){return function(e){return Hr(e,t)}}(t)}var ju=bo(),Uu=bo(!0);function zu(){return[]}function Ku(){return!1}var Wu=go(function(t,e){return t+e},0),qu=wo("ceil"),$u=go(function(t,e){return t/e},1),Yu=wo("floor");var Gu=go(function(t,e){return t*e},1),Vu=wo("round"),Hu=go(function(t,e){return t-e},0);return fr.after=function(t,e){if("function"!=typeof e)throw new re(u);return t=Ua(t),function(){if(--t<1)return e.apply(this,arguments)}},fr.ary=Zs,fr.assign=$a,fr.assignIn=Ya,fr.assignInWith=Ga,fr.assignWith=Va,fr.at=Ha,fr.before=ta,fr.bind=ea,fr.bindAll=xu,fr.bindKey=na,fr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ya(t)?t:[t]},fr.chain=Bs,fr.chunk=function(t,e,r){e=(r?Yo(t,e,r):e===o)?1:qn(Ua(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var s=0,a=0,u=n(Fn(i/e));s<i;)u[a++]=ki(t,s,s+=e);return u},fr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},fr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],i=t;i--;)e[i-1]=arguments[i];return tn(ya(r)?eo(r):[r],Wr(e,1))},fr.cond=function(t){var e=null==t?0:t.length,n=No();return t=e?Ze(t,function(t){if("function"!=typeof t[1])throw new re(u);return[n(t[0]),t[1]]}):[],Ei(function(n){for(var r=-1;++r<e;){var i=t[r];if($e(i[0],this,n))return $e(i[1],this,n)}})},fr.conforms=function(t){return function(t){var e=ru(t);return function(n){return Nr(n,t,e)}}(Dr(t,f))},fr.constant=Cu,fr.countBy=zs,fr.create=function(t,e){var n=pr(t);return null==e?n:Pr(n,e)},fr.curry=function t(e,n,r){var i=So(e,_,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},fr.curryRight=function t(e,n,r){var i=So(e,w,o,o,o,o,o,n=r?o:n);return i.placeholder=t.placeholder,i},fr.debounce=ra,fr.defaults=Xa,fr.defaultsDeep=Ja,fr.defer=ia,fr.delay=oa,fr.difference=fs,fr.differenceBy=ps,fr.differenceWith=ds,fr.drop=function(t,e,n){var r=null==t?0:t.length;return r?ki(t,(e=n||e===o?1:Ua(e))<0?0:e,r):[]},fr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?ki(t,0,(e=r-(e=n||e===o?1:Ua(e)))<0?0:e):[]},fr.dropRightWhile=function(t,e){return t&&t.length?ji(t,No(e,3),!0,!0):[]},fr.dropWhile=function(t,e){return t&&t.length?ji(t,No(e,3),!0):[]},fr.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Yo(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=Ua(n))<0&&(n=-n>i?0:i+n),(r=r===o||r>i?i:Ua(r))<0&&(r+=i),r=n>r?0:za(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},fr.filter=function(t,e){return(ya(t)?Xe:Kr)(t,No(e,3))},fr.flatMap=function(t,e){return Wr(Hs(t,e),1)},fr.flatMapDeep=function(t,e){return Wr(Hs(t,e),R)},fr.flatMapDepth=function(t,e,n){return n=n===o?1:Ua(n),Wr(Hs(t,e),n)},fr.flatten=ms,fr.flattenDeep=function(t){return null!=t&&t.length?Wr(t,R):[]},fr.flattenDepth=function(t,e){return null!=t&&t.length?Wr(t,e=e===o?1:Ua(e)):[]},fr.flip=function(t){return So(t,C)},fr.flow=Au,fr.flowRight=Lu,fr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},fr.functions=function(t){return null==t?[]:Vr(t,ru(t))},fr.functionsIn=function(t){return null==t?[]:Vr(t,iu(t))},fr.groupBy=Ys,fr.initial=function(t){return null!=t&&t.length?ki(t,0,-1):[]},fr.intersection=vs,fr.intersectionBy=_s,fr.intersectionWith=ws,fr.invert=tu,fr.invertBy=eu,fr.invokeMap=Gs,fr.iteratee=Pu,fr.keyBy=Vs,fr.keys=ru,fr.keysIn=iu,fr.map=Hs,fr.mapKeys=function(t,e){var n={};return e=No(e,3),Yr(t,function(t,r,i){Mr(n,e(t,r,i),t)}),n},fr.mapValues=function(t,e){var n={};return e=No(e,3),Yr(t,function(t,r,i){Mr(n,r,e(t,r,i))}),n},fr.matches=function(t){return fi(Dr(t,f))},fr.matchesProperty=function(t,e){return pi(t,Dr(e,f))},fr.memoize=sa,fr.merge=ou,fr.mergeWith=su,fr.method=Mu,fr.methodOf=Ou,fr.mixin=Ru,fr.negate=aa,fr.nthArg=function(t){return t=Ua(t),Ei(function(e){return gi(e,t)})},fr.omit=au,fr.omitBy=function(t,e){return lu(t,aa(No(e)))},fr.once=function(t){return ta(2,t)},fr.orderBy=function(t,e,n,r){return null==t?[]:(ya(e)||(e=null==e?[]:[e]),ya(n=r?o:n)||(n=null==n?[]:[n]),yi(t,e,n))},fr.over=Nu,fr.overArgs=ua,fr.overEvery=Iu,fr.overSome=Fu,fr.partial=la,fr.partialRight=ca,fr.partition=Xs,fr.pick=uu,fr.pickBy=lu,fr.property=Bu,fr.propertyOf=function(t){return function(e){return null==t?o:Hr(t,e)}},fr.pull=Ts,fr.pullAll=Ss,fr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?bi(t,e,No(n,2)):t},fr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?bi(t,e,o,n):t},fr.pullAt=xs,fr.range=ju,fr.rangeRight=Uu,fr.rearg=ha,fr.reject=function(t,e){return(ya(t)?Xe:Kr)(t,aa(No(e,3)))},fr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=No(e,3);++r<o;){var s=t[r];e(s,r,t)&&(n.push(s),i.push(r))}return vi(t,i),n},fr.rest=function(t,e){if("function"!=typeof t)throw new re(u);return Ei(t,e=e===o?e:Ua(e))},fr.reverse=Cs,fr.sampleSize=function(t,e,n){return e=(n?Yo(t,e,n):e===o)?1:Ua(e),(ya(t)?Sr:Si)(t,e)},fr.set=function(t,e,n){return null==t?t:xi(t,e,n)},fr.setWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:xi(t,e,n,r)},fr.shuffle=function(t){return(ya(t)?xr:Li)(t)},fr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Yo(t,e,n)?(e=0,n=r):(e=null==e?0:Ua(e),n=n===o?r:Ua(n)),ki(t,e,n)):[]},fr.sortBy=Js,fr.sortedUniq=function(t){return t&&t.length?Ri(t):[]},fr.sortedUniqBy=function(t,e){return t&&t.length?Ri(t,No(e,2)):[]},fr.split=function(t,e,n){return n&&"number"!=typeof n&&Yo(t,e,n)&&(e=n=o),(n=n===o?F:n>>>0)?(t=qa(t))&&("string"==typeof e||null!=e&&!Ma(e))&&!(e=Ni(e))&&xn(t)?Gi(On(t),0,n):t.split(e,n):[]},fr.spread=function(t,e){if("function"!=typeof t)throw new re(u);return e=null==e?0:qn(Ua(e),0),Ei(function(n){var r=n[e],i=Gi(n,0,e);return r&&tn(i,r),$e(t,this,i)})},fr.tail=function(t){var e=null==t?0:t.length;return e?ki(t,1,e):[]},fr.take=function(t,e,n){return t&&t.length?ki(t,0,(e=n||e===o?1:Ua(e))<0?0:e):[]},fr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?ki(t,(e=r-(e=n||e===o?1:Ua(e)))<0?0:e,r):[]},fr.takeRightWhile=function(t,e){return t&&t.length?ji(t,No(e,3),!1,!0):[]},fr.takeWhile=function(t,e){return t&&t.length?ji(t,No(e,3)):[]},fr.tap=function(t,e){return e(t),t},fr.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new re(u);return Ca(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),ra(t,e,{leading:r,maxWait:e,trailing:i})},fr.thru=js,fr.toArray=Ba,fr.toPairs=cu,fr.toPairsIn=hu,fr.toPath=function(t){return ya(t)?Ze(t,ls):Da(t)?[t]:eo(us(qa(t)))},fr.toPlainObject=Wa,fr.transform=function(t,e,n){var r=ya(t),i=r||_a(t)||Na(t);if(e=No(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Ca(t)&&Ta(o)?pr(Le(t)):{}}return(i?Ge:Yr)(t,function(t,r,i){return e(n,t,r,i)}),n},fr.unary=function(t){return Zs(t,1)},fr.union=As,fr.unionBy=Ls,fr.unionWith=ks,fr.uniq=function(t){return t&&t.length?Ii(t):[]},fr.uniqBy=function(t,e){return t&&t.length?Ii(t,No(e,2)):[]},fr.uniqWith=function(t,e){return e="function"==typeof e?e:o,t&&t.length?Ii(t,o,e):[]},fr.unset=function(t,e){return null==t||Fi(t,e)},fr.unzip=Ps,fr.unzipWith=Ms,fr.update=function(t,e,n){return null==t?t:Bi(t,e,qi(n))},fr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:o,null==t?t:Bi(t,e,qi(n),r)},fr.values=fu,fr.valuesIn=function(t){return null==t?[]:bn(t,iu(t))},fr.without=Os,fr.words=Tu,fr.wrap=function(t,e){return la(qi(e),t)},fr.xor=Rs,fr.xorBy=Ds,fr.xorWith=Ns,fr.zip=Is,fr.zipObject=function(t,e){return Ki(t||[],e||[],Ar)},fr.zipObjectDeep=function(t,e){return Ki(t||[],e||[],xi)},fr.zipWith=Fs,fr.entries=cu,fr.entriesIn=hu,fr.extend=Ya,fr.extendWith=Ga,Ru(fr,fr),fr.add=Wu,fr.attempt=Su,fr.camelCase=pu,fr.capitalize=du,fr.ceil=qu,fr.clamp=function(t,e,n){return n===o&&(n=e,e=o),n!==o&&(n=(n=Ka(n))==n?n:0),e!==o&&(e=(e=Ka(e))==e?e:0),Rr(Ka(t),e,n)},fr.clone=function(t){return Dr(t,d)},fr.cloneDeep=function(t){return Dr(t,f|d)},fr.cloneDeepWith=function(t,e){return Dr(t,f|d,e="function"==typeof e?e:o)},fr.cloneWith=function(t,e){return Dr(t,d,e="function"==typeof e?e:o)},fr.conformsTo=function(t,e){return null==e||Nr(t,e,ru(e))},fr.deburr=gu,fr.defaultTo=function(t,e){return null==t||t!=t?e:t},fr.divide=$u,fr.endsWith=function(t,e,n){t=qa(t),e=Ni(e);var r=t.length,i=n=n===o?r:Rr(Ua(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},fr.eq=fa,fr.escape=function(t){return(t=qa(t))&&xt.test(t)?t.replace(Tt,Tn):t},fr.escapeRegExp=function(t){return(t=qa(t))&&Rt.test(t)?t.replace(Ot,"\\$&"):t},fr.every=function(t,e,n){var r=ya(t)?He:Ur;return n&&Yo(t,e,n)&&(e=o),r(t,No(e,3))},fr.find=Ks,fr.findIndex=gs,fr.findKey=function(t,e){return sn(t,No(e,3),Yr)},fr.findLast=Ws,fr.findLastIndex=ys,fr.findLastKey=function(t,e){return sn(t,No(e,3),Gr)},fr.floor=Yu,fr.forEach=qs,fr.forEachRight=$s,fr.forIn=function(t,e){return null==t?t:qr(t,No(e,3),iu)},fr.forInRight=function(t,e){return null==t?t:$r(t,No(e,3),iu)},fr.forOwn=function(t,e){return t&&Yr(t,No(e,3))},fr.forOwnRight=function(t,e){return t&&Gr(t,No(e,3))},fr.get=Qa,fr.gt=pa,fr.gte=da,fr.has=function(t,e){return null!=t&&Ko(t,e,Zr)},fr.hasIn=Za,fr.head=bs,fr.identity=ku,fr.includes=function(t,e,n,r){t=ba(t)?t:fu(t),n=n&&!r?Ua(n):0;var i=t.length;return n<0&&(n=qn(i+n,0)),Ra(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&un(t,e,n)>-1},fr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:Ua(n);return i<0&&(i=qn(r+i,0)),un(t,e,i)},fr.inRange=function(t,e,n){return e=ja(e),n===o?(n=e,e=0):n=ja(n),function(t,e,n){return t>=$n(e,n)&&t<qn(e,n)}(t=Ka(t),e,n)},fr.invoke=nu,fr.isArguments=ga,fr.isArray=ya,fr.isArrayBuffer=ma,fr.isArrayLike=ba,fr.isArrayLikeObject=va,fr.isBoolean=function(t){return!0===t||!1===t||Aa(t)&&Jr(t)==q},fr.isBuffer=_a,fr.isDate=wa,fr.isElement=function(t){return Aa(t)&&1===t.nodeType&&!Pa(t)},fr.isEmpty=function(t){if(null==t)return!0;if(ba(t)&&(ya(t)||"string"==typeof t||"function"==typeof t.splice||_a(t)||Na(t)||ga(t)))return!t.length;var e=zo(t);if(e==X||e==nt)return!t.size;if(Xo(t))return!ui(t).length;for(var n in t)if(le.call(t,n))return!1;return!0},fr.isEqual=function(t,e){return ii(t,e)},fr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:o)?n(t,e):o;return r===o?ii(t,e,o,n):!!r},fr.isError=Ea,fr.isFinite=function(t){return"number"==typeof t&&zn(t)},fr.isFunction=Ta,fr.isInteger=Sa,fr.isLength=xa,fr.isMap=La,fr.isMatch=function(t,e){return t===e||oi(t,e,Fo(e))},fr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:o,oi(t,e,Fo(e),n)},fr.isNaN=function(t){return ka(t)&&t!=+t},fr.isNative=function(t){if(Ho(t))throw new i(a);return si(t)},fr.isNil=function(t){return null==t},fr.isNull=function(t){return null===t},fr.isNumber=ka,fr.isObject=Ca,fr.isObjectLike=Aa,fr.isPlainObject=Pa,fr.isRegExp=Ma,fr.isSafeInteger=function(t){return Sa(t)&&t>=-D&&t<=D},fr.isSet=Oa,fr.isString=Ra,fr.isSymbol=Da,fr.isTypedArray=Na,fr.isUndefined=function(t){return t===o},fr.isWeakMap=function(t){return Aa(t)&&zo(t)==st},fr.isWeakSet=function(t){return Aa(t)&&Jr(t)==at},fr.join=function(t,e){return null==t?"":Kn.call(t,e)},fr.kebabCase=yu,fr.last=Es,fr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return n!==o&&(i=(i=Ua(n))<0?qn(r+i,0):$n(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):an(t,cn,i,!0)},fr.lowerCase=mu,fr.lowerFirst=bu,fr.lt=Ia,fr.lte=Fa,fr.max=function(t){return t&&t.length?zr(t,ku,Qr):o},fr.maxBy=function(t,e){return t&&t.length?zr(t,No(e,2),Qr):o},fr.mean=function(t){return hn(t,ku)},fr.meanBy=function(t,e){return hn(t,No(e,2))},fr.min=function(t){return t&&t.length?zr(t,ku,ci):o},fr.minBy=function(t,e){return t&&t.length?zr(t,No(e,2),ci):o},fr.stubArray=zu,fr.stubFalse=Ku,fr.stubObject=function(){return{}},fr.stubString=function(){return""},fr.stubTrue=function(){return!0},fr.multiply=Gu,fr.nth=function(t,e){return t&&t.length?gi(t,Ua(e)):o},fr.noConflict=function(){return Re._===this&&(Re._=de),this},fr.noop=Du,fr.now=Qs,fr.pad=function(t,e,n){t=qa(t);var r=(e=Ua(e))?Mn(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return mo(Bn(i),n)+t+mo(Fn(i),n)},fr.padEnd=function(t,e,n){t=qa(t);var r=(e=Ua(e))?Mn(t):0;return e&&r<e?t+mo(e-r,n):t},fr.padStart=function(t,e,n){t=qa(t);var r=(e=Ua(e))?Mn(t):0;return e&&r<e?mo(e-r,n)+t:t},fr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Gn(qa(t).replace(Nt,""),e||0)},fr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Yo(t,e,n)&&(e=n=o),n===o&&("boolean"==typeof e?(n=e,e=o):"boolean"==typeof t&&(n=t,t=o)),t===o&&e===o?(t=0,e=1):(t=ja(t),e===o?(e=t,t=0):e=ja(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=Vn();return $n(t+i*(e-t+ke("1e-"+((i+"").length-1))),e)}return _i(t,e)},fr.reduce=function(t,e,n){var r=ya(t)?en:dn,i=arguments.length<3;return r(t,No(e,4),n,i,Br)},fr.reduceRight=function(t,e,n){var r=ya(t)?nn:dn,i=arguments.length<3;return r(t,No(e,4),n,i,jr)},fr.repeat=function(t,e,n){return e=(n?Yo(t,e,n):e===o)?1:Ua(e),wi(qa(t),e)},fr.replace=function(){var t=arguments,e=qa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},fr.result=function(t,e,n){var r=-1,i=(e=$i(e,t)).length;for(i||(i=1,t=o);++r<i;){var s=null==t?o:t[ls(e[r])];s===o&&(r=i,s=n),t=Ta(s)?s.call(t):s}return t},fr.round=Vu,fr.runInContext=t,fr.sample=function(t){return(ya(t)?Tr:Ti)(t)},fr.size=function(t){if(null==t)return 0;if(ba(t))return Ra(t)?Mn(t):t.length;var e=zo(t);return e==X||e==nt?t.size:ui(t).length},fr.snakeCase=vu,fr.some=function(t,e,n){var r=ya(t)?rn:Pi;return n&&Yo(t,e,n)&&(e=o),r(t,No(e,3))},fr.sortedIndex=function(t,e){return Mi(t,e)},fr.sortedIndexBy=function(t,e,n){return Oi(t,e,No(n,2))},fr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Mi(t,e);if(r<n&&fa(t[r],e))return r}return-1},fr.sortedLastIndex=function(t,e){return Mi(t,e,!0)},fr.sortedLastIndexBy=function(t,e,n){return Oi(t,e,No(n,2),!0)},fr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=Mi(t,e,!0)-1;if(fa(t[n],e))return n}return-1},fr.startCase=_u,fr.startsWith=function(t,e,n){return t=qa(t),n=null==n?0:Rr(Ua(n),0,t.length),e=Ni(e),t.slice(n,n+e.length)==e},fr.subtract=Hu,fr.sum=function(t){return t&&t.length?gn(t,ku):0},fr.sumBy=function(t,e){return t&&t.length?gn(t,No(e,2)):0},fr.template=function(t,e,n){var r=fr.templateSettings;n&&Yo(t,e,n)&&(e=o),t=qa(t),e=Ga({},e,r,xo);var i,s,a=Ga({},e.imports,r.imports,xo),u=ru(a),l=bn(a,u),c=0,h=e.interpolate||Xt,f="__p += '",p=ee((e.escape||Xt).source+"|"+h.source+"|"+(h===Lt?Kt:Xt).source+"|"+(e.evaluate||Xt).source+"|$","g"),d="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++xe+"]")+"\n";t.replace(p,function(e,n,r,o,a,u){return r||(r=o),f+=t.slice(c,u).replace(Jt,Sn),n&&(i=!0,f+="' +\n__e("+n+") +\n'"),a&&(s=!0,f+="';\n"+a+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=u+e.length,e}),f+="';\n";var g=e.variable;g||(f="with (obj) {\n"+f+"\n}\n"),f=(s?f.replace(vt,""):f).replace(_t,"$1").replace(wt,"$1;"),f="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(s?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var y=Su(function(){return Qt(u,d+"return "+f).apply(o,l)});if(y.source=f,Ea(y))throw y;return y},fr.times=function(t,e){if((t=Ua(t))<1||t>D)return[];var n=F,r=$n(t,F);e=No(e),t-=F;for(var i=yn(r,e);++n<t;)e(n);return i},fr.toFinite=ja,fr.toInteger=Ua,fr.toLength=za,fr.toLower=function(t){return qa(t).toLowerCase()},fr.toNumber=Ka,fr.toSafeInteger=function(t){return t?Rr(Ua(t),-D,D):0===t?t:0},fr.toString=qa,fr.toUpper=function(t){return qa(t).toUpperCase()},fr.trim=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(Dt,"");if(!t||!(e=Ni(e)))return t;var r=On(t),i=On(e);return Gi(r,_n(r,i),wn(r,i)+1).join("")},fr.trimEnd=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(It,"");if(!t||!(e=Ni(e)))return t;var r=On(t);return Gi(r,0,wn(r,On(e))+1).join("")},fr.trimStart=function(t,e,n){if((t=qa(t))&&(n||e===o))return t.replace(Nt,"");if(!t||!(e=Ni(e)))return t;var r=On(t);return Gi(r,_n(r,On(e))).join("")},fr.truncate=function(t,e){var n=A,r=L;if(Ca(e)){var i="separator"in e?e.separator:i;n="length"in e?Ua(e.length):n,r="omission"in e?Ni(e.omission):r}var s=(t=qa(t)).length;if(xn(t)){var a=On(t);s=a.length}if(n>=s)return t;var u=n-Mn(r);if(u<1)return r;var l=a?Gi(a,0,u).join(""):t.slice(0,u);if(i===o)return l+r;if(a&&(u+=l.length-u),Ma(i)){if(t.slice(u).search(i)){var c,h=l;for(i.global||(i=ee(i.source,qa(Wt.exec(i))+"g")),i.lastIndex=0;c=i.exec(h);)var f=c.index;l=l.slice(0,f===o?u:f)}}else if(t.indexOf(Ni(i),u)!=u){var p=l.lastIndexOf(i);p>-1&&(l=l.slice(0,p))}return l+r},fr.unescape=function(t){return(t=qa(t))&&St.test(t)?t.replace(Et,Rn):t},fr.uniqueId=function(t){var e=++ce;return qa(t)+e},fr.upperCase=wu,fr.upperFirst=Eu,fr.each=qs,fr.eachRight=$s,fr.first=bs,Ru(fr,function(){var t={};return Yr(fr,function(e,n){le.call(fr.prototype,n)||(t[n]=e)}),t}(),{chain:!1}),fr.VERSION="4.17.11",Ge(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){fr[t].placeholder=fr}),Ge(["drop","take"],function(t,e){yr.prototype[t]=function(n){n=n===o?1:qn(Ua(n),0);var r=this.__filtered__&&!e?new yr(this):this.clone();return r.__filtered__?r.__takeCount__=$n(n,r.__takeCount__):r.__views__.push({size:$n(n,F),type:t+(r.__dir__<0?"Right":"")}),r},yr.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Ge(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==M||3==n;yr.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:No(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Ge(["head","last"],function(t,e){var n="take"+(e?"Right":"");yr.prototype[t]=function(){return this[n](1).value()[0]}}),Ge(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");yr.prototype[t]=function(){return this.__filtered__?new yr(this):this[n](1)}}),yr.prototype.compact=function(){return this.filter(ku)},yr.prototype.find=function(t){return this.filter(t).head()},yr.prototype.findLast=function(t){return this.reverse().find(t)},yr.prototype.invokeMap=Ei(function(t,e){return"function"==typeof t?new yr(this):this.map(function(n){return ni(n,t,e)})}),yr.prototype.reject=function(t){return this.filter(aa(No(t)))},yr.prototype.slice=function(t,e){t=Ua(t);var n=this;return n.__filtered__&&(t>0||e<0)?new yr(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==o&&(n=(e=Ua(e))<0?n.dropRight(-e):n.take(e-t)),n)},yr.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},yr.prototype.toArray=function(){return this.take(F)},Yr(yr.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=fr[r?"take"+("last"==e?"Right":""):e],s=r||/^find/.test(e);i&&(fr.prototype[e]=function(){var e=this.__wrapped__,a=r?[1]:arguments,u=e instanceof yr,l=a[0],c=u||ya(e),h=function(t){var e=i.apply(fr,tn([t],a));return r&&f?e[0]:e};c&&n&&"function"==typeof l&&1!=l.length&&(u=c=!1);var f=this.__chain__,p=!!this.__actions__.length,d=s&&!f,g=u&&!p;if(!s&&c){e=g?e:new yr(this);var y=t.apply(e,a);return y.__actions__.push({func:js,args:[h],thisArg:o}),new gr(y,f)}return d&&g?t.apply(this,a):(y=this.thru(h),d?r?y.value()[0]:y.value():y)})}),Ge(["pop","push","shift","sort","splice","unshift"],function(t){var e=ie[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);fr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(ya(i)?i:[],t)}return this[n](function(n){return e.apply(ya(n)?n:[],t)})}}),Yr(yr.prototype,function(t,e){var n=fr[e];if(n){var r=n.name+"";(rr[r]||(rr[r]=[])).push({name:e,func:n})}}),rr[fo(o,b).name]=[{name:"wrapper",func:o}],yr.prototype.clone=function(){var t=new yr(this.__wrapped__);return t.__actions__=eo(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=eo(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=eo(this.__views__),t},yr.prototype.reverse=function(){if(this.__filtered__){var t=new yr(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},yr.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=ya(t),r=e<0,i=n?t.length:0,o=function(t,e,n){for(var r=-1,i=n.length;++r<i;){var o=n[r],s=o.size;switch(o.type){case"drop":t+=s;break;case"dropRight":e-=s;break;case"take":e=$n(e,t+s);break;case"takeRight":t=qn(t,e-s)}}return{start:t,end:e}}(0,i,this.__views__),s=o.start,a=o.end,u=a-s,l=r?a:s-1,c=this.__iteratees__,h=c.length,f=0,p=$n(u,this.__takeCount__);if(!n||!r&&i==u&&p==u)return Ui(t,this.__actions__);var d=[];t:for(;u--&&f<p;){for(var g=-1,y=t[l+=e];++g<h;){var m=c[g],b=m.iteratee,v=m.type,_=b(y);if(v==O)y=_;else if(!_){if(v==M)continue t;break t}}d[f++]=y}return d},fr.prototype.at=Us,fr.prototype.chain=function(){return Bs(this)},fr.prototype.commit=function(){return new gr(this.value(),this.__chain__)},fr.prototype.next=function(){this.__values__===o&&(this.__values__=Ba(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?o:this.__values__[this.__index__++]}},fr.prototype.plant=function(t){for(var e,n=this;n instanceof dr;){var r=hs(n);r.__index__=0,r.__values__=o,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},fr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof yr){var e=t;return this.__actions__.length&&(e=new yr(this)),(e=e.reverse()).__actions__.push({func:js,args:[Cs],thisArg:o}),new gr(e,this.__chain__)}return this.thru(Cs)},fr.prototype.toJSON=fr.prototype.valueOf=fr.prototype.value=function(){return Ui(this.__wrapped__,this.__actions__)},fr.prototype.first=fr.prototype.head,Fe&&(fr.prototype[Fe]=function(){return this}),fr}();Re._=Dn,(i=function(){return Dn}.call(e,n,e,r))===o||(r.exports=i)}).call(this)}).call(this,n(0),n(26)(t))},function(t,e,n){"use strict";var r=n(27),i=n(30),o=[].slice,s=["keyword","gray","hex"],a={};Object.keys(i).forEach(function(t){a[o.call(i[t].labels).sort().join("")]=t});var u={};function l(t,e){if(!(this instanceof l))return new l(t,e);if(e&&e in s&&(e=null),e&&!(e in i))throw new Error("Unknown model: "+e);var n,c;if(void 0===t)this.model="rgb",this.color=[0,0,0],this.valpha=1;else if(t instanceof l)this.model=t.model,this.color=t.color.slice(),this.valpha=t.valpha;else if("string"==typeof t){var h=r.get(t);if(null===h)throw new Error("Unable to parse color from string: "+t);this.model=h.model,c=i[this.model].channels,this.color=h.value.slice(0,c),this.valpha="number"==typeof h.value[c]?h.value[c]:1}else if(t.length){this.model=e||"rgb",c=i[this.model].channels;var p=o.call(t,0,c);this.color=f(p,c),this.valpha="number"==typeof t[c]?t[c]:1}else if("number"==typeof t)t&=16777215,this.model="rgb",this.color=[t>>16&255,t>>8&255,255&t],this.valpha=1;else{this.valpha=1;var d=Object.keys(t);"alpha"in t&&(d.splice(d.indexOf("alpha"),1),this.valpha="number"==typeof t.alpha?t.alpha:0);var g=d.sort().join("");if(!(g in a))throw new Error("Unable to parse color from object: "+JSON.stringify(t));this.model=a[g];var y=i[this.model].labels,m=[];for(n=0;n<y.length;n++)m.push(t[y[n]]);this.color=f(m)}if(u[this.model])for(c=i[this.model].channels,n=0;n<c;n++){var b=u[this.model][n];b&&(this.color[n]=b(this.color[n]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function c(t,e,n){return(t=Array.isArray(t)?t:[t]).forEach(function(t){(u[t]||(u[t]=[]))[e]=n}),t=t[0],function(r){var i;return arguments.length?(n&&(r=n(r)),(i=this[t]()).color[e]=r,i):(i=this[t]().color[e],n&&(i=n(i)),i)}}function h(t){return function(e){return Math.max(0,Math.min(t,e))}}function f(t,e){for(var n=0;n<e;n++)"number"!=typeof t[n]&&(t[n]=0);return t}l.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(t){var e=this.model in r.to?this:this.rgb(),n=1===(e=e.round("number"==typeof t?t:1)).valpha?e.color:e.color.concat(this.valpha);return r.to[e.model](n)},percentString:function(t){var e=this.rgb().round("number"==typeof t?t:1),n=1===e.valpha?e.color:e.color.concat(this.valpha);return r.to.rgb.percent(n)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var t={},e=i[this.model].channels,n=i[this.model].labels,r=0;r<e;r++)t[n[r]]=this.color[r];return 1!==this.valpha&&(t.alpha=this.valpha),t},unitArray:function(){var t=this.rgb().color;return t[0]/=255,t[1]/=255,t[2]/=255,1!==this.valpha&&t.push(this.valpha),t},unitObject:function(){var t=this.rgb().object();return t.r/=255,t.g/=255,t.b/=255,1!==this.valpha&&(t.alpha=this.valpha),t},round:function(t){return t=Math.max(t||0,0),new l(this.color.map(function(t){return function(e){return function(t,e){return Number(t.toFixed(e))}(e,t)}}(t)).concat(this.valpha),this.model)},alpha:function(t){return arguments.length?new l(this.color.concat(Math.max(0,Math.min(1,t))),this.model):this.valpha},red:c("rgb",0,h(255)),green:c("rgb",1,h(255)),blue:c("rgb",2,h(255)),hue:c(["hsl","hsv","hsl","hwb","hcg"],0,function(t){return(t%360+360)%360}),saturationl:c("hsl",1,h(100)),lightness:c("hsl",2,h(100)),saturationv:c("hsv",1,h(100)),value:c("hsv",2,h(100)),chroma:c("hcg",1,h(100)),gray:c("hcg",2,h(100)),white:c("hwb",1,h(100)),wblack:c("hwb",2,h(100)),cyan:c("cmyk",0,h(100)),magenta:c("cmyk",1,h(100)),yellow:c("cmyk",2,h(100)),black:c("cmyk",3,h(100)),x:c("xyz",0,h(100)),y:c("xyz",1,h(100)),z:c("xyz",2,h(100)),l:c("lab",0,h(100)),a:c("lab",1),b:c("lab",2),keyword:function(t){return arguments.length?new l(t):i[this.model].keyword(this.color)},hex:function(t){return arguments.length?new l(t):r.to.hex(this.rgb().round().color)},rgbNumber:function(){var t=this.rgb().color;return(255&t[0])<<16|(255&t[1])<<8|255&t[2]},luminosity:function(){for(var t=this.rgb().color,e=[],n=0;n<t.length;n++){var r=t[n]/255;e[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},isDark:function(){var t=this.rgb().color;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var t=this.rgb(),e=0;e<3;e++)t.color[e]=255-t.color[e];return t},lighten:function(t){var e=this.hsl();return e.color[2]+=e.color[2]*t,e},darken:function(t){var e=this.hsl();return e.color[2]-=e.color[2]*t,e},saturate:function(t){var e=this.hsl();return e.color[1]+=e.color[1]*t,e},desaturate:function(t){var e=this.hsl();return e.color[1]-=e.color[1]*t,e},whiten:function(t){var e=this.hwb();return e.color[1]+=e.color[1]*t,e},blacken:function(t){var e=this.hwb();return e.color[2]+=e.color[2]*t,e},grayscale:function(){var t=this.rgb().color,e=.3*t[0]+.59*t[1]+.11*t[2];return l.rgb(e,e,e)},fade:function(t){return this.alpha(this.valpha-this.valpha*t)},opaquer:function(t){return this.alpha(this.valpha+this.valpha*t)},rotate:function(t){var e=this.hsl(),n=e.color[0];return n=(n=(n+t)%360)<0?360+n:n,e.color[0]=n,e},mix:function(t,e){var n=t.rgb(),r=this.rgb(),i=void 0===e?.5:e,o=2*i-1,s=n.alpha()-r.alpha(),a=((o*s==-1?o:(o+s)/(1+o*s))+1)/2,u=1-a;return l.rgb(a*n.red()+u*r.red(),a*n.green()+u*r.green(),a*n.blue()+u*r.blue(),n.alpha()*i+r.alpha()*(1-i))}},Object.keys(i).forEach(function(t){if(-1===s.indexOf(t)){var e=i[t].channels;l.prototype[t]=function(){if(this.model===t)return new l(this);if(arguments.length)return new l(arguments,t);var n="number"==typeof arguments[e]?e:this.valpha;return new l(function(t){return Array.isArray(t)?t:[t]}(i[this.model][t].raw(this.color)).concat(n),t)},l[t]=function(n){return"number"==typeof n&&(n=f(o.call(arguments),e)),new l(n,t)}}}),t.exports=l},function(t,e,n){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(t,e,n){var r=n(16),i={};for(var o in r)r.hasOwnProperty(o)&&(i[r[o]]=o);var s=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in s)if(s.hasOwnProperty(a)){if(!("channels"in s[a]))throw new Error("missing channels property: "+a);if(!("labels"in s[a]))throw new Error("missing channel labels property: "+a);if(s[a].labels.length!==s[a].channels)throw new Error("channel and label counts mismatch: "+a);var u=s[a].channels,l=s[a].labels;delete s[a].channels,delete s[a].labels,Object.defineProperty(s[a],"channels",{value:u}),Object.defineProperty(s[a],"labels",{value:l})}function c(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2)}s.rgb.hsl=function(t){var e,n,r=t[0]/255,i=t[1]/255,o=t[2]/255,s=Math.min(r,i,o),a=Math.max(r,i,o),u=a-s;return a===s?e=0:r===a?e=(i-o)/u:i===a?e=2+(o-r)/u:o===a&&(e=4+(r-i)/u),(e=Math.min(60*e,360))<0&&(e+=360),n=(s+a)/2,[e,100*(a===s?0:n<=.5?u/(a+s):u/(2-a-s)),100*n]},s.rgb.hsv=function(t){var e,n,r,i,o,s=t[0]/255,a=t[1]/255,u=t[2]/255,l=Math.max(s,a,u),c=l-Math.min(s,a,u),h=function(t){return(l-t)/6/c+.5};return 0===c?i=o=0:(o=c/l,e=h(s),n=h(a),r=h(u),s===l?i=r-n:a===l?i=1/3+e-r:u===l&&(i=2/3+n-e),i<0?i+=1:i>1&&(i-=1)),[360*i,100*o,100*l]},s.rgb.hwb=function(t){var e=t[0],n=t[1],r=t[2];return[s.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,r))),100*(r=1-1/255*Math.max(e,Math.max(n,r)))]},s.rgb.cmyk=function(t){var e,n=t[0]/255,r=t[1]/255,i=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-r,1-i)))/(1-e)||0),100*((1-r-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*e]},s.rgb.keyword=function(t){var e=i[t];if(e)return e;var n,o=1/0;for(var s in r)if(r.hasOwnProperty(s)){var a=c(t,r[s]);a<o&&(o=a,n=s)}return n},s.keyword.rgb=function(t){return r[t]},s.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,r=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*e+.7152*n+.0722*r),100*(.0193*e+.1192*n+.9505*r)]},s.rgb.lab=function(t){var e=s.rgb.xyz(t),n=e[0],r=e[1],i=e[2];return r/=100,i/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},s.hsl.rgb=function(t){var e,n,r,i,o,s=t[0]/360,a=t[1]/100,u=t[2]/100;if(0===a)return[o=255*u,o,o];e=2*u-(n=u<.5?u*(1+a):u+a-u*a),i=[0,0,0];for(var l=0;l<3;l++)(r=s+1/3*-(l-1))<0&&r++,r>1&&r--,o=6*r<1?e+6*(n-e)*r:2*r<1?n:3*r<2?e+(n-e)*(2/3-r)*6:e,i[l]=255*o;return i},s.hsl.hsv=function(t){var e=t[0],n=t[1]/100,r=t[2]/100,i=n,o=Math.max(r,.01);return n*=(r*=2)<=1?r:2-r,i*=o<=1?o:2-o,[e,100*(0===r?2*i/(o+i):2*n/(r+n)),100*((r+n)/2)]},s.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,r=t[2]/100,i=Math.floor(e)%6,o=e-Math.floor(e),s=255*r*(1-n),a=255*r*(1-n*o),u=255*r*(1-n*(1-o));switch(r*=255,i){case 0:return[r,u,s];case 1:return[a,r,s];case 2:return[s,r,u];case 3:return[s,a,r];case 4:return[u,s,r];case 5:return[r,s,a]}},s.hsv.hsl=function(t){var e,n,r,i=t[0],o=t[1]/100,s=t[2]/100,a=Math.max(s,.01);return r=(2-o)*s,n=o*a,[i,100*(n=(n/=(e=(2-o)*a)<=1?e:2-e)||0),100*(r/=2)]},s.hwb.rgb=function(t){var e,n,r,i,o,s,a,u=t[0]/360,l=t[1]/100,c=t[2]/100,h=l+c;switch(h>1&&(l/=h,c/=h),n=1-c,r=6*u-(e=Math.floor(6*u)),0!=(1&e)&&(r=1-r),i=l+r*(n-l),e){default:case 6:case 0:o=n,s=i,a=l;break;case 1:o=i,s=n,a=l;break;case 2:o=l,s=n,a=i;break;case 3:o=l,s=i,a=n;break;case 4:o=i,s=l,a=n;break;case 5:o=n,s=l,a=i}return[255*o,255*s,255*a]},s.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,r=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]},s.xyz.rgb=function(t){var e,n,r,i=t[0]/100,o=t[1]/100,s=t[2]/100;return n=-.9689*i+1.8758*o+.0415*s,r=.0557*i+-.204*o+1.057*s,e=(e=3.2406*i+-1.5372*o+-.4986*s)>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},s.xyz.lab=function(t){var e=t[0],n=t[1],r=t[2];return n/=100,r/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},s.lab.xyz=function(t){var e,n,r,i=t[0],o=t[1],s=t[2];e=o/500+(n=(i+16)/116),r=n-s/200;var a=Math.pow(n,3),u=Math.pow(e,3),l=Math.pow(r,3);return n=a>.008856?a:(n-16/116)/7.787,e=u>.008856?u:(e-16/116)/7.787,r=l>.008856?l:(r-16/116)/7.787,[e*=95.047,n*=100,r*=108.883]},s.lab.lch=function(t){var e,n=t[0],r=t[1],i=t[2];return(e=360*Math.atan2(i,r)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(r*r+i*i),e]},s.lch.lab=function(t){var e,n=t[0],r=t[1];return e=t[2]/360*2*Math.PI,[n,r*Math.cos(e),r*Math.sin(e)]},s.rgb.ansi16=function(t){var e=t[0],n=t[1],r=t[2],i=1 in arguments?arguments[1]:s.rgb.hsv(t)[2];if(0===(i=Math.round(i/50)))return 30;var o=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===i&&(o+=60),o},s.hsv.ansi16=function(t){return s.rgb.ansi16(s.hsv.rgb(t),t[2])},s.rgb.ansi256=function(t){var e=t[0],n=t[1],r=t[2];return e===n&&n===r?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},s.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return t>50&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(t>50));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},s.ansi256.rgb=function(t){if(t>=232){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},s.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},s.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map(function(t){return t+t}).join(""));var r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},s.rgb.hcg=function(t){var e,n,r=t[0]/255,i=t[1]/255,o=t[2]/255,s=Math.max(Math.max(r,i),o),a=Math.min(Math.min(r,i),o),u=s-a;return e=u<1?a/(1-u):0,n=u<=0?0:s===r?(i-o)/u%6:s===i?2+(o-r)/u:4+(r-i)/u+4,n/=6,[360*(n%=1),100*u,100*e]},s.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,r=1,i=0;return(r=n<.5?2*e*n:2*e*(1-n))<1&&(i=(n-.5*r)/(1-r)),[t[0],100*r,100*i]},s.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,r=e*n,i=0;return r<1&&(i=(n-r)/(1-r)),[t[0],100*r,100*i]},s.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,r=t[2]/100;if(0===n)return[255*r,255*r,255*r];var i,o=[0,0,0],s=e%1*6,a=s%1,u=1-a;switch(Math.floor(s)){case 0:o[0]=1,o[1]=a,o[2]=0;break;case 1:o[0]=u,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=a;break;case 3:o[0]=0,o[1]=u,o[2]=1;break;case 4:o[0]=a,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=u}return i=(1-n)*r,[255*(n*o[0]+i),255*(n*o[1]+i),255*(n*o[2]+i)]},s.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),r=0;return n>0&&(r=e/n),[t[0],100*r,100*n]},s.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,r=0;return n>0&&n<.5?r=e/(2*n):n>=.5&&n<1&&(r=e/(2*(1-n))),[t[0],100*r,100*n]},s.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},s.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,r=n-e,i=0;return r<1&&(i=(n-r)/(1-r)),[t[0],100*r,100*i]},s.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},s.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},s.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},s.gray.hsl=s.gray.hsv=function(t){return[0,0,t[0]]},s.gray.hwb=function(t){return[0,100,t[0]]},s.gray.cmyk=function(t){return[0,0,0,t[0]]},s.gray.lab=function(t){return[t[0],0,0]},s.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},s.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}},function(t,e,n){var r,i,o=n(32),s=n(12),a=n(13).isArray;function u(t){var e=Number(t);if(!isNaN(e))return e;var n=t.toLowerCase();return"true"===n||"false"!==n&&t}function l(t,e){var n;if(r.compact){if(!i[r[t+"Key"]]&&(a(r.alwaysArray)?-1!==r.alwaysArray.indexOf(r[t+"Key"]):r.alwaysArray)&&(i[r[t+"Key"]]=[]),i[r[t+"Key"]]&&!a(i[r[t+"Key"]])&&(i[r[t+"Key"]]=[i[r[t+"Key"]]]),t+"Fn"in r&&"string"==typeof e&&(e=r[t+"Fn"](e,i)),"instruction"===t&&("instructionFn"in r||"instructionNameFn"in r))for(n in e)if(e.hasOwnProperty(n))if("instructionFn"in r)e[n]=r.instructionFn(e[n],n,i);else{var o=e[n];delete e[n],e[r.instructionNameFn(n,o,i)]=o}a(i[r[t+"Key"]])?i[r[t+"Key"]].push(e):i[r[t+"Key"]]=e}else{i[r.elementsKey]||(i[r.elementsKey]=[]);var s={};if(s[r.typeKey]=t,"instruction"===t){for(n in e)if(e.hasOwnProperty(n))break;s[r.nameKey]="instructionNameFn"in r?r.instructionNameFn(n,e,i):n,r.instructionHasAttributes?(s[r.attributesKey]=e[n][r.attributesKey],"instructionFn"in r&&(s[r.attributesKey]=r.instructionFn(s[r.attributesKey],n,i))):("instructionFn"in r&&(e[n]=r.instructionFn(e[n],n,i)),s[r.instructionKey]=e[n])}else t+"Fn"in r&&(e=r[t+"Fn"](e,i)),s[r[t+"Key"]]=e;r.addParent&&(s[r.parentKey]=i),i[r.elementsKey].push(s)}}function c(t){var e;if("attributesFn"in r&&t&&(t=r.attributesFn(t,i)),(r.trim||"attributeValueFn"in r||"attributeNameFn"in r||r.nativeTypeAttributes)&&t)for(e in t)if(t.hasOwnProperty(e)&&(r.trim&&(t[e]=t[e].trim()),r.nativeTypeAttributes&&(t[e]=u(t[e])),"attributeValueFn"in r&&(t[e]=r.attributeValueFn(t[e],e,i)),"attributeNameFn"in r)){var n=t[e];delete t[e],t[r.attributeNameFn(e,t[e],i)]=n}return t}function h(t){var e={};if(t.body&&("xml"===t.name.toLowerCase()||r.instructionHasAttributes)){for(var n,o=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(n=o.exec(t.body));)e[n[1]]=n[2]||n[3]||n[4];e=c(e)}if("xml"===t.name.toLowerCase()){if(r.ignoreDeclaration)return;i[r.declarationKey]={},Object.keys(e).length&&(i[r.declarationKey][r.attributesKey]=e),r.addParent&&(i[r.declarationKey][r.parentKey]=i)}else{if(r.ignoreInstruction)return;r.trim&&(t.body=t.body.trim());var s={};r.instructionHasAttributes&&Object.keys(e).length?(s[t.name]={},s[t.name][r.attributesKey]=e):s[t.name]=t.body,l("instruction",s)}}function f(t,e){var n;if("object"==typeof t&&(e=t.attributes,t=t.name),e=c(e),"elementNameFn"in r&&(t=r.elementNameFn(t,i)),r.compact){var o;if(n={},!r.ignoreAttributes&&e&&Object.keys(e).length)for(o in n[r.attributesKey]={},e)e.hasOwnProperty(o)&&(n[r.attributesKey][o]=e[o]);t in i||(a(r.alwaysArray)?-1===r.alwaysArray.indexOf(t):!r.alwaysArray)||(i[t]=[]),i[t]&&!a(i[t])&&(i[t]=[i[t]]),a(i[t])?i[t].push(n):i[t]=n}else i[r.elementsKey]||(i[r.elementsKey]=[]),(n={})[r.typeKey]="element",n[r.nameKey]=t,!r.ignoreAttributes&&e&&Object.keys(e).length&&(n[r.attributesKey]=e),r.alwaysChildren&&(n[r.elementsKey]=[]),i[r.elementsKey].push(n);n[r.parentKey]=i,i=n}function p(t){r.ignoreText||(t.trim()||r.captureSpacesBetweenElements)&&(r.trim&&(t=t.trim()),r.nativeType&&(t=u(t)),r.sanitize&&(t=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),l("text",t))}function d(t){r.ignoreComment||(r.trim&&(t=t.trim()),l("comment",t))}function g(t){var e=i[r.parentKey];r.addParent||delete i[r.parentKey],i=e}function y(t){r.ignoreCdata||(r.trim&&(t=t.trim()),l("cdata",t))}function m(t){r.ignoreDoctype||(t=t.replace(/^ /,""),r.trim&&(t=t.trim()),l("doctype",t))}function b(t){t.note=t}t.exports=function(t,e){var n=o.parser(!0,{}),a={};if(i=a,r=function(t){return r=s.copyOptions(t),s.ensureFlagExists("ignoreDeclaration",r),s.ensureFlagExists("ignoreInstruction",r),s.ensureFlagExists("ignoreAttributes",r),s.ensureFlagExists("ignoreText",r),s.ensureFlagExists("ignoreComment",r),s.ensureFlagExists("ignoreCdata",r),s.ensureFlagExists("ignoreDoctype",r),s.ensureFlagExists("compact",r),s.ensureFlagExists("alwaysChildren",r),s.ensureFlagExists("addParent",r),s.ensureFlagExists("trim",r),s.ensureFlagExists("nativeType",r),s.ensureFlagExists("nativeTypeAttributes",r),s.ensureFlagExists("sanitize",r),s.ensureFlagExists("instructionHasAttributes",r),s.ensureFlagExists("captureSpacesBetweenElements",r),s.ensureAlwaysArrayExists(r),s.ensureKeyExists("declaration",r),s.ensureKeyExists("instruction",r),s.ensureKeyExists("attributes",r),s.ensureKeyExists("text",r),s.ensureKeyExists("comment",r),s.ensureKeyExists("cdata",r),s.ensureKeyExists("doctype",r),s.ensureKeyExists("type",r),s.ensureKeyExists("name",r),s.ensureKeyExists("elements",r),s.ensureKeyExists("parent",r),s.checkFnExists("doctype",r),s.checkFnExists("instruction",r),s.checkFnExists("cdata",r),s.checkFnExists("comment",r),s.checkFnExists("text",r),s.checkFnExists("instructionName",r),s.checkFnExists("elementName",r),s.checkFnExists("attributeName",r),s.checkFnExists("attributeValue",r),s.checkFnExists("attributes",r),r}(e),n.opt={strictEntities:!0},n.onopentag=f,n.ontext=p,n.oncomment=d,n.onclosetag=g,n.onerror=b,n.oncdata=y,n.ondoctype=m,n.onprocessinginstruction=h,n.write(t).close(),a[r.elementsKey]){var u=a[r.elementsKey];delete a[r.elementsKey],a[r.elementsKey]=u,delete a.text}return a}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(e,r){var i=n(6);t.exports=v;var o,s=n(19);v.ReadableState=b;n(8).EventEmitter;var a=function(t,e){return t.listeners(e).length},u=n(21),l=n(7).Buffer,c=e.Uint8Array||function(){};var h=n(3);h.inherits=n(2);var f=n(36),p=void 0;p=f&&f.debuglog?f.debuglog("stream"):function(){};var d,g=n(37),y=n(22);h.inherits(v,u);var m=["error","close","destroy","pause","resume"];function b(t,e){o=o||n(1),t=t||{};var r=e instanceof o;this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var i=t.highWaterMark,s=t.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:r&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new g,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(d||(d=n(11).StringDecoder),this.decoder=new d(t.encoding),this.encoding=t.encoding)}function v(t){if(o=o||n(1),!(this instanceof v))return new v(t);this._readableState=new b(t,this),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),u.call(this)}function _(t,e,n,r,i){var o,s=t._readableState;null===e?(s.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,S(t)}(t,s)):(i||(o=function(t,e){var n;(function(t){return l.isBuffer(t)||t instanceof c})(e)||"string"==typeof e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(s,e)),o?t.emit("error",o):s.objectMode||e&&e.length>0?("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===l.prototype||(e=function(t){return l.from(t)}(e)),r?s.endEmitted?t.emit("error",new Error("stream.unshift() after end event")):w(t,s,e,!0):s.ended?t.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!n?(e=s.decoder.write(e),s.objectMode||0!==e.length?w(t,s,e,!1):C(t,s)):w(t,s,e,!1))):r||(s.reading=!1));return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(s)}function w(t,e,n,r){e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,r?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&S(t)),C(t,e)}Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),v.prototype.destroy=y.destroy,v.prototype._undestroy=y.undestroy,v.prototype._destroy=function(t,e){this.push(null),e(t)},v.prototype.push=function(t,e){var n,r=this._readableState;return r.objectMode?n=!0:"string"==typeof t&&((e=e||r.defaultEncoding)!==r.encoding&&(t=l.from(t,e),e=""),n=!0),_(this,t,e,!1,n)},v.prototype.unshift=function(t){return _(this,t,null,!0,!1)},v.prototype.isPaused=function(){return!1===this._readableState.flowing},v.prototype.setEncoding=function(t){return d||(d=n(11).StringDecoder),this._readableState.decoder=new d(t),this._readableState.encoding=t,this};var E=8388608;function T(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=E?t=E:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function S(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(p("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?i.nextTick(x,t):x(t))}function x(t){p("emit readable"),t.emit("readable"),P(t)}function C(t,e){e.readingMore||(e.readingMore=!0,i.nextTick(A,t,e))}function A(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(p("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function L(t){p("readable nexttick read 0"),t.read(0)}function k(t,e){e.reading||(p("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),P(t),e.flowing&&!e.reading&&t.read(0)}function P(t){var e=t._readableState;for(p("flow",e.flowing);e.flowing&&null!==t.read(););}function M(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,s=t>o.length?o.length:t;if(s===o.length?i+=o:i+=o.slice(0,t),0===(t-=s)){s===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(s));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=l.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,s=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,s),0===(t-=s)){s===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(s));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function O(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,i.nextTick(R,e,t))}function R(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function D(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}v.prototype.read=function(t){p("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return p("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?O(this):S(this),null;if(0===(t=T(t,e))&&e.ended)return 0===e.length&&O(this),null;var r,i=e.needReadable;return p("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&p("length less than watermark",i=!0),e.ended||e.reading?p("reading or ended",i=!1):i&&(p("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=T(n,e))),null===(r=t>0?M(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&O(this)),null!==r&&this.emit("data",r),r},v.prototype._read=function(t){this.emit("error",new Error("_read() is not implemented"))},v.prototype.pipe=function(t,e){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=t;break;case 1:o.pipes=[o.pipes,t];break;default:o.pipes.push(t)}o.pipesCount+=1,p("pipe count=%d opts=%j",o.pipesCount,e);var u=(!e||!1!==e.end)&&t!==r.stdout&&t!==r.stderr?c:v;function l(e,r){p("onunpipe"),e===n&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,p("cleanup"),t.removeListener("close",m),t.removeListener("finish",b),t.removeListener("drain",h),t.removeListener("error",y),t.removeListener("unpipe",l),n.removeListener("end",c),n.removeListener("end",v),n.removeListener("data",g),f=!0,!o.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function c(){p("onend"),t.end()}o.endEmitted?i.nextTick(u):n.once("end",u),t.on("unpipe",l);var h=function(t){return function(){var e=t._readableState;p("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&a(t,"data")&&(e.flowing=!0,P(t))}}(n);t.on("drain",h);var f=!1;var d=!1;function g(e){p("ondata"),d=!1,!1!==t.write(e)||d||((1===o.pipesCount&&o.pipes===t||o.pipesCount>1&&-1!==D(o.pipes,t))&&!f&&(p("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,d=!0),n.pause())}function y(e){p("onerror",e),v(),t.removeListener("error",y),0===a(t,"error")&&t.emit("error",e)}function m(){t.removeListener("finish",b),v()}function b(){p("onfinish"),t.removeListener("close",m),v()}function v(){p("unpipe"),n.unpipe(t)}return n.on("data",g),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?s(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",y),t.once("close",m),t.once("finish",b),t.emit("pipe",n),o.flowing||(p("pipe resume"),n.resume()),t},v.prototype.unpipe=function(t){var e=this._readableState,n={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,n),this);if(!t){var r=e.pipes,i=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<i;o++)r[o].emit("unpipe",this,n);return this}var s=D(e.pipes,t);return-1===s?this:(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,n),this)},v.prototype.on=function(t,e){var n=u.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&S(this):i.nextTick(L,this))}return n},v.prototype.addListener=v.prototype.on,v.prototype.resume=function(){var t=this._readableState;return t.flowing||(p("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,i.nextTick(k,t,e))}(this,t)),this},v.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},v.prototype.wrap=function(t){var e=this,n=this._readableState,r=!1;for(var i in t.on("end",function(){if(p("wrapped end"),n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&e.push(t)}e.push(null)}),t.on("data",function(i){(p("wrapped data"),n.decoder&&(i=n.decoder.write(i)),!n.objectMode||null!==i&&void 0!==i)&&((n.objectMode||i&&i.length)&&(e.push(i)||(r=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));for(var o=0;o<m.length;o++)t.on(m[o],this.emit.bind(this,m[o]));return this._read=function(e){p("wrapped _read",e),r&&(r=!1,t.resume())},this},Object.defineProperty(v.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),v._fromList=M}).call(this,n(0),n(5))},function(t,e,n){t.exports=n(8).EventEmitter},function(t,e,n){"use strict";var r=n(6);function i(t,e){t.emit("error",e)}t.exports={destroy:function(t,e){var n=this,o=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return o||s?(e?e(t):!t||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,t),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,function(t){!e&&t?(r.nextTick(i,n,t),n._writableState&&(n._writableState.errorEmitted=!0)):e&&e(t)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(t,e,n){"use strict";t.exports=o;var r=n(1),i=n(3);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t),this._transformState={afterTransform:function(t,e){var n=this._transformState;n.transforming=!1;var r=n.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=e&&this.push(e),r(t);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",s)}function s(){var t=this;"function"==typeof this._flush?this._flush(function(e,n){a(t,e,n)}):a(this,null,null)}function a(t,e,n){if(e)return t.emit("error",e);if(null!=n&&t.push(n),t._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(t._transformState.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}i.inherits=n(2),i.inherits(o,r),o.prototype.push=function(t,e){return this._transformState.needTransform=!1,r.prototype.push.call(this,t,e)},o.prototype._transform=function(t,e,n){throw new Error("_transform() is not implemented")},o.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},o.prototype._destroy=function(t,e){var n=this;r.prototype._destroy.call(this,t,function(t){e(t),n.emit("close")})}},function(t,e,n){var r,i,o=n(12),s=n(13).isArray;function a(t,e,n){return(!n&&t.spaces?"\n":"")+Array(e+1).join(t.spaces)}function u(t,e,n){if(e.ignoreAttributes)return"";"attributesFn"in e&&(t=e.attributesFn(t,i,r));var o,s,u,l,c=[];for(o in t)t.hasOwnProperty(o)&&null!==t[o]&&void 0!==t[o]&&(l=e.noQuotesForNativeAttributes&&"string"!=typeof t[o]?"":'"',s=(s=""+t[o]).replace(/"/g,"&quot;"),u="attributeNameFn"in e?e.attributeNameFn(o,s,i,r):o,c.push(e.spaces&&e.indentAttributes?a(e,n+1,!1):" "),c.push(u+"="+l+("attributeValueFn"in e?e.attributeValueFn(s,o,i,r):s)+l));return t&&Object.keys(t).length&&e.spaces&&e.indentAttributes&&c.push(a(e,n,!1)),c.join("")}function l(t,e,n){return r=t,i="xml",e.ignoreDeclaration?"":"<?xml"+u(t[e.attributesKey],e,n)+"?>"}function c(t,e,n){if(e.ignoreInstruction)return"";var o;for(o in t)if(t.hasOwnProperty(o))break;var s="instructionNameFn"in e?e.instructionNameFn(o,t[o],i,r):o;if("object"==typeof t[o])return r=t,i=s,"<?"+s+u(t[o][e.attributesKey],e,n)+"?>";var a=t[o]?t[o]:"";return"instructionFn"in e&&(a=e.instructionFn(a,o,i,r)),"<?"+s+(a?" "+a:"")+"?>"}function h(t,e){return e.ignoreComment?"":"\x3c!--"+("commentFn"in e?e.commentFn(t,i,r):t)+"--\x3e"}function f(t,e){return e.ignoreCdata?"":"<![CDATA["+("cdataFn"in e?e.cdataFn(t,i,r):t)+"]]>"}function p(t,e){return e.ignoreDoctype?"":"<!DOCTYPE "+("doctypeFn"in e?e.doctypeFn(t,i,r):t)+">"}function d(t,e){return e.ignoreText?"":(t=(t=(t=""+t).replace(/&amp;/g,"&")).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"textFn"in e?e.textFn(t,i,r):t)}function g(t,e,n,o){return t.reduce(function(t,s){var l=a(e,n,o&&!t);switch(s.type){case"element":return t+l+function(t,e,n){r=t,i=t.name;var o=[],s="elementNameFn"in e?e.elementNameFn(t.name,t):t.name;o.push("<"+s),t[e.attributesKey]&&o.push(u(t[e.attributesKey],e,n));var a=t[e.elementsKey]&&t[e.elementsKey].length||t[e.attributesKey]&&"preserve"===t[e.attributesKey]["xml:space"];return a||(a="fullTagEmptyElementFn"in e?e.fullTagEmptyElementFn(t.name,t):e.fullTagEmptyElement),a?(o.push(">"),t[e.elementsKey]&&t[e.elementsKey].length&&(o.push(g(t[e.elementsKey],e,n+1)),r=t,i=t.name),o.push(e.spaces&&function(t,e){var n;if(t.elements&&t.elements.length)for(n=0;n<t.elements.length;++n)switch(t.elements[n][e.typeKey]){case"text":if(e.indentText)return!0;break;case"cdata":if(e.indentCdata)return!0;break;case"instruction":if(e.indentInstruction)return!0;break;case"doctype":case"comment":case"element":default:return!0}return!1}(t,e)?"\n"+Array(n+1).join(e.spaces):""),o.push("</"+s+">")):o.push("/>"),o.join("")}(s,e,n);case"comment":return t+l+h(s[e.commentKey],e);case"doctype":return t+l+p(s[e.doctypeKey],e);case"cdata":return t+(e.indentCdata?l:"")+f(s[e.cdataKey],e);case"text":return t+(e.indentText?l:"")+d(s[e.textKey],e);case"instruction":var y={};return y[s[e.nameKey]]=s[e.attributesKey]?s:s[e.instructionKey],t+(e.indentInstruction?l:"")+c(y,e,n)}},"")}function y(t,e,n){var r;for(r in t)if(t.hasOwnProperty(r))switch(r){case e.parentKey:case e.attributesKey:break;case e.textKey:if(e.indentText||n)return!0;break;case e.cdataKey:if(e.indentCdata||n)return!0;break;case e.instructionKey:if(e.indentInstruction||n)return!0;break;case e.doctypeKey:case e.commentKey:default:return!0}return!1}function m(t,e,n,o,s){r=t,i=e;var l="elementNameFn"in n?n.elementNameFn(e,t):e;if(void 0===t||null===t)return"fullTagEmptyElementFn"in n&&n.fullTagEmptyElementFn(e,t)||n.fullTagEmptyElement?"<"+l+"></"+l+">":"<"+l+"/>";var c=[];if(e){if(c.push("<"+l),"object"!=typeof t)return c.push(">"+d(t,n)+"</"+l+">"),c.join("");t[n.attributesKey]&&c.push(u(t[n.attributesKey],n,o));var h=y(t,n,!0)||t[n.attributesKey]&&"preserve"===t[n.attributesKey]["xml:space"];if(h||(h="fullTagEmptyElementFn"in n?n.fullTagEmptyElementFn(e,t):n.fullTagEmptyElement),!h)return c.push("/>"),c.join("");c.push(">")}return c.push(b(t,n,o+1,!1)),r=t,i=e,e&&c.push((s?a(n,o,!1):"")+"</"+l+">"),c.join("")}function b(t,e,n,r){var i,o,u,g=[];for(o in t)if(t.hasOwnProperty(o))for(u=s(t[o])?t[o]:[t[o]],i=0;i<u.length;++i){switch(o){case e.declarationKey:g.push(l(u[i],e,n));break;case e.instructionKey:g.push((e.indentInstruction?a(e,n,r):"")+c(u[i],e,n));break;case e.attributesKey:case e.parentKey:break;case e.textKey:g.push((e.indentText?a(e,n,r):"")+d(u[i],e));break;case e.cdataKey:g.push((e.indentCdata?a(e,n,r):"")+f(u[i],e));break;case e.doctypeKey:g.push(a(e,n,r)+p(u[i],e));break;case e.commentKey:g.push(a(e,n,r)+h(u[i],e));break;default:g.push(a(e,n,r)+m(u[i],o,e,n,y(u[i],e)))}r=r&&!g.length}return g.join("")}t.exports=function(t,e){e=function(t){var e=o.copyOptions(t);return o.ensureFlagExists("ignoreDeclaration",e),o.ensureFlagExists("ignoreInstruction",e),o.ensureFlagExists("ignoreAttributes",e),o.ensureFlagExists("ignoreText",e),o.ensureFlagExists("ignoreComment",e),o.ensureFlagExists("ignoreCdata",e),o.ensureFlagExists("ignoreDoctype",e),o.ensureFlagExists("compact",e),o.ensureFlagExists("indentText",e),o.ensureFlagExists("indentCdata",e),o.ensureFlagExists("indentAttributes",e),o.ensureFlagExists("indentInstruction",e),o.ensureFlagExists("fullTagEmptyElement",e),o.ensureFlagExists("noQuotesForNativeAttributes",e),o.ensureSpacesExists(e),"number"==typeof e.spaces&&(e.spaces=Array(e.spaces+1).join(" ")),o.ensureKeyExists("declaration",e),o.ensureKeyExists("instruction",e),o.ensureKeyExists("attributes",e),o.ensureKeyExists("text",e),o.ensureKeyExists("comment",e),o.ensureKeyExists("cdata",e),o.ensureKeyExists("doctype",e),o.ensureKeyExists("type",e),o.ensureKeyExists("name",e),o.ensureKeyExists("elements",e),o.checkFnExists("doctype",e),o.checkFnExists("instruction",e),o.checkFnExists("cdata",e),o.checkFnExists("comment",e),o.checkFnExists("text",e),o.checkFnExists("instructionName",e),o.checkFnExists("elementName",e),o.checkFnExists("attributeName",e),o.checkFnExists("attributeValue",e),o.checkFnExists("attributes",e),o.checkFnExists("fullTagEmptyElement",e),e}(e);var n=[];return r=t,i="_root_",e.compact?n.push(b(t,e,0,!0)):(t[e.declarationKey]&&n.push(l(t[e.declarationKey],e,0)),t[e.elementsKey]&&t[e.elementsKey].length&&n.push(g(t[e.elementsKey],e,0,!n.length))),n.join("")}},function(t,e,n){var r=n(18),i=n(47),o=n(24),s=n(48);t.exports={xml2js:r,xml2json:i,js2xml:o,json2xml:s}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r=n(16),i=n(28),o={};for(var s in r)r.hasOwnProperty(s)&&(o[r[s]]=s);var a=t.exports={to:{},get:{}};function u(t,e,n){return Math.min(Math.max(e,t),n)}function l(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}a.get=function(t){var e,n;switch(t.substring(0,3).toLowerCase()){case"hsl":e=a.get.hsl(t),n="hsl";break;case"hwb":e=a.get.hwb(t),n="hwb";break;default:e=a.get.rgb(t),n="rgb"}return e?{model:n,value:e}:null},a.get.rgb=function(t){if(!t)return null;var e,n,i,o=[0,0,0,1];if(e=t.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(i=e[2],e=e[1],n=0;n<3;n++){var s=2*n;o[n]=parseInt(e.slice(s,s+2),16)}i&&(o[3]=Math.round(parseInt(i,16)/255*100)/100)}else if(e=t.match(/^#([a-f0-9]{3,4})$/i)){for(i=(e=e[1])[3],n=0;n<3;n++)o[n]=parseInt(e[n]+e[n],16);i&&(o[3]=Math.round(parseInt(i+i,16)/255*100)/100)}else if(e=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)){for(n=0;n<3;n++)o[n]=parseInt(e[n+1],0);e[4]&&(o[3]=parseFloat(e[4]))}else{if(!(e=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)))return(e=t.match(/(\D+)/))?"transparent"===e[1]?[0,0,0,0]:(o=r[e[1]])?(o[3]=1,o):null:null;for(n=0;n<3;n++)o[n]=Math.round(2.55*parseFloat(e[n+1]));e[4]&&(o[3]=parseFloat(e[4]))}for(n=0;n<3;n++)o[n]=u(o[n],0,255);return o[3]=u(o[3],0,1),o},a.get.hsl=function(t){if(!t)return null;var e=t.match(/^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var n=parseFloat(e[4]);return[(parseFloat(e[1])+360)%360,u(parseFloat(e[2]),0,100),u(parseFloat(e[3]),0,100),u(isNaN(n)?1:n,0,1)]}return null},a.get.hwb=function(t){if(!t)return null;var e=t.match(/^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var n=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,u(parseFloat(e[2]),0,100),u(parseFloat(e[3]),0,100),u(isNaN(n)?1:n,0,1)]}return null},a.to.hex=function(){var t=i(arguments);return"#"+l(t[0])+l(t[1])+l(t[2])+(t[3]<1?l(Math.round(255*t[3])):"")},a.to.rgb=function(){var t=i(arguments);return t.length<4||1===t[3]?"rgb("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+")":"rgba("+Math.round(t[0])+", "+Math.round(t[1])+", "+Math.round(t[2])+", "+t[3]+")"},a.to.rgb.percent=function(){var t=i(arguments),e=Math.round(t[0]/255*100),n=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return t.length<4||1===t[3]?"rgb("+e+"%, "+n+"%, "+r+"%)":"rgba("+e+"%, "+n+"%, "+r+"%, "+t[3]+")"},a.to.hsl=function(){var t=i(arguments);return t.length<4||1===t[3]?"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)":"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+t[3]+")"},a.to.hwb=function(){var t=i(arguments),e="";return t.length>=4&&1!==t[3]&&(e=", "+t[3]),"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+e+")"},a.to.keyword=function(t){return o[t.slice(0,3)]}},function(t,e,n){"use strict";var r=n(29),i=Array.prototype.concat,o=Array.prototype.slice,s=t.exports=function(t){for(var e=[],n=0,s=t.length;n<s;n++){var a=t[n];r(a)?e=i.call(e,o.call(a)):e.push(a)}return e};s.wrap=function(t){return function(){return t(s(arguments))}}},function(t,e){t.exports=function(t){return!(!t||"string"==typeof t)&&(t instanceof Array||Array.isArray(t)||t.length>=0&&(t.splice instanceof Function||Object.getOwnPropertyDescriptor(t,t.length-1)&&"String"!==t.constructor.name))}},function(t,e,n){var r=n(17),i=n(31),o={};Object.keys(r).forEach(function(t){o[t]={},Object.defineProperty(o[t],"channels",{value:r[t].channels}),Object.defineProperty(o[t],"labels",{value:r[t].labels});var e=i(t);Object.keys(e).forEach(function(n){var r=e[n];o[t][n]=function(t){var e=function(e){if(void 0===e||null===e)return e;arguments.length>1&&(e=Array.prototype.slice.call(arguments));var n=t(e);if("object"==typeof n)for(var r=n.length,i=0;i<r;i++)n[i]=Math.round(n[i]);return n};return"conversion"in t&&(e.conversion=t.conversion),e}(r),o[t][n].raw=function(t){var e=function(e){return void 0===e||null===e?e:(arguments.length>1&&(e=Array.prototype.slice.call(arguments)),t(e))};return"conversion"in t&&(e.conversion=t.conversion),e}(r)})}),t.exports=o},function(t,e,n){var r=n(17);function i(t){var e=function(){for(var t={},e=Object.keys(r),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),o=Object.keys(r[i]),s=o.length,a=0;a<s;a++){var u=o[a],l=e[u];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(u))}return e}function o(t,e){return function(n){return e(t(n))}}function s(t,e){for(var n=[e[t].parent,t],i=r[e[t].parent][t],s=e[t].parent;e[s].parent;)n.unshift(e[s].parent),i=o(r[e[s].parent][s],i),s=e[s].parent;return i.conversion=n,i}t.exports=function(t){for(var e=i(t),n={},r=Object.keys(e),o=r.length,a=0;a<o;a++){var u=r[a];null!==e[u].parent&&(n[u]=s(u,e))}return n}},function(t,e,n){(function(t){!function(e){e.parser=function(t,e){return new o(t,e)},e.SAXParser=o,e.SAXStream=a,e.createStream=function(t,e){return new a(t,e)},e.MAX_BUFFER_LENGTH=65536;var r,i=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function o(t,n){if(!(this instanceof o))return new o(t,n);!function(t){for(var e=0,n=i.length;e<n;e++)t[i[e]]=""}(this),this.q=this.c="",this.bufferCheckPosition=e.MAX_BUFFER_LENGTH,this.opt=n||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!t,this.noscript=!(!t&&!this.opt.noscript),this.state=E.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(f)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),S(this,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var n in t)t.hasOwnProperty(n)&&e.push(n);return e}),o.prototype={end:function(){k(this)},write:function(t){if(this.error)throw this.error;if(this.closed)return L(this,"Cannot write after close. Assign an onready handler.");if(null===t)return k(this);"object"==typeof t&&(t=t.toString());var n=0,r="";for(;r=B(t,n++),this.c=r,r;)switch(this.trackPosition&&(this.position++,"\n"===r?(this.line++,this.column=0):this.column++),this.state){case E.BEGIN:if(this.state=E.BEGIN_WHITESPACE,"\ufeff"===r)continue;F(this,r);continue;case E.BEGIN_WHITESPACE:F(this,r);continue;case E.TEXT:if(this.sawRoot&&!this.closedRoot){for(var o=n-1;r&&"<"!==r&&"&"!==r;)(r=B(t,n++))&&this.trackPosition&&(this.position++,"\n"===r?(this.line++,this.column=0):this.column++);this.textNode+=t.substring(o,n-1)}"<"!==r||this.sawRoot&&this.closedRoot&&!this.strict?(m(r)||this.sawRoot&&!this.closedRoot||P(this,"Text data outside of root node."),"&"===r?this.state=E.TEXT_ENTITY:this.textNode+=r):(this.state=E.OPEN_WAKA,this.startTagPosition=this.position);continue;case E.SCRIPT:"<"===r?this.state=E.SCRIPT_ENDING:this.script+=r;continue;case E.SCRIPT_ENDING:"/"===r?this.state=E.CLOSE_TAG:(this.script+="<"+r,this.state=E.SCRIPT);continue;case E.OPEN_WAKA:if("!"===r)this.state=E.SGML_DECL,this.sgmlDecl="";else if(m(r));else if(_(p,r))this.state=E.OPEN_TAG,this.tagName=r;else if("/"===r)this.state=E.CLOSE_TAG,this.tagName="";else if("?"===r)this.state=E.PROC_INST,this.procInstName=this.procInstBody="";else{if(P(this,"Unencoded <"),this.startTagPosition+1<this.position){var s=this.position-this.startTagPosition;r=new Array(s).join(" ")+r}this.textNode+="<"+r,this.state=E.TEXT}continue;case E.SGML_DECL:(this.sgmlDecl+r).toUpperCase()===u?(x(this,"onopencdata"),this.state=E.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+r==="--"?(this.state=E.COMMENT,this.comment="",this.sgmlDecl=""):(this.sgmlDecl+r).toUpperCase()===l?(this.state=E.DOCTYPE,(this.doctype||this.sawRoot)&&P(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===r?(x(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=E.TEXT):b(r)?(this.state=E.SGML_DECL_QUOTED,this.sgmlDecl+=r):this.sgmlDecl+=r;continue;case E.SGML_DECL_QUOTED:r===this.q&&(this.state=E.SGML_DECL,this.q=""),this.sgmlDecl+=r;continue;case E.DOCTYPE:">"===r?(this.state=E.TEXT,x(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=r,"["===r?this.state=E.DOCTYPE_DTD:b(r)&&(this.state=E.DOCTYPE_QUOTED,this.q=r));continue;case E.DOCTYPE_QUOTED:this.doctype+=r,r===this.q&&(this.q="",this.state=E.DOCTYPE);continue;case E.DOCTYPE_DTD:this.doctype+=r,"]"===r?this.state=E.DOCTYPE:b(r)&&(this.state=E.DOCTYPE_DTD_QUOTED,this.q=r);continue;case E.DOCTYPE_DTD_QUOTED:this.doctype+=r,r===this.q&&(this.state=E.DOCTYPE_DTD,this.q="");continue;case E.COMMENT:"-"===r?this.state=E.COMMENT_ENDING:this.comment+=r;continue;case E.COMMENT_ENDING:"-"===r?(this.state=E.COMMENT_ENDED,this.comment=A(this.opt,this.comment),this.comment&&x(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+r,this.state=E.COMMENT);continue;case E.COMMENT_ENDED:">"!==r?(P(this,"Malformed comment"),this.comment+="--"+r,this.state=E.COMMENT):this.state=E.TEXT;continue;case E.CDATA:"]"===r?this.state=E.CDATA_ENDING:this.cdata+=r;continue;case E.CDATA_ENDING:"]"===r?this.state=E.CDATA_ENDING_2:(this.cdata+="]"+r,this.state=E.CDATA);continue;case E.CDATA_ENDING_2:">"===r?(this.cdata&&x(this,"oncdata",this.cdata),x(this,"onclosecdata"),this.cdata="",this.state=E.TEXT):"]"===r?this.cdata+="]":(this.cdata+="]]"+r,this.state=E.CDATA);continue;case E.PROC_INST:"?"===r?this.state=E.PROC_INST_ENDING:m(r)?this.state=E.PROC_INST_BODY:this.procInstName+=r;continue;case E.PROC_INST_BODY:if(!this.procInstBody&&m(r))continue;"?"===r?this.state=E.PROC_INST_ENDING:this.procInstBody+=r;continue;case E.PROC_INST_ENDING:">"===r?(x(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=E.TEXT):(this.procInstBody+="?"+r,this.state=E.PROC_INST_BODY);continue;case E.OPEN_TAG:_(d,r)?this.tagName+=r:(M(this),">"===r?D(this):"/"===r?this.state=E.OPEN_TAG_SLASH:(m(r)||P(this,"Invalid character in tag name"),this.state=E.ATTRIB));continue;case E.OPEN_TAG_SLASH:">"===r?(D(this,!0),N(this)):(P(this,"Forward-slash in opening tag not followed by >"),this.state=E.ATTRIB);continue;case E.ATTRIB:if(m(r))continue;">"===r?D(this):"/"===r?this.state=E.OPEN_TAG_SLASH:_(p,r)?(this.attribName=r,this.attribValue="",this.state=E.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case E.ATTRIB_NAME:"="===r?this.state=E.ATTRIB_VALUE:">"===r?(P(this,"Attribute without value"),this.attribValue=this.attribName,R(this),D(this)):m(r)?this.state=E.ATTRIB_NAME_SAW_WHITE:_(d,r)?this.attribName+=r:P(this,"Invalid attribute name");continue;case E.ATTRIB_NAME_SAW_WHITE:if("="===r)this.state=E.ATTRIB_VALUE;else{if(m(r))continue;P(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",x(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===r?D(this):_(p,r)?(this.attribName=r,this.state=E.ATTRIB_NAME):(P(this,"Invalid attribute name"),this.state=E.ATTRIB)}continue;case E.ATTRIB_VALUE:if(m(r))continue;b(r)?(this.q=r,this.state=E.ATTRIB_VALUE_QUOTED):(P(this,"Unquoted attribute value"),this.state=E.ATTRIB_VALUE_UNQUOTED,this.attribValue=r);continue;case E.ATTRIB_VALUE_QUOTED:if(r!==this.q){"&"===r?this.state=E.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=r;continue}R(this),this.q="",this.state=E.ATTRIB_VALUE_CLOSED;continue;case E.ATTRIB_VALUE_CLOSED:m(r)?this.state=E.ATTRIB:">"===r?D(this):"/"===r?this.state=E.OPEN_TAG_SLASH:_(p,r)?(P(this,"No whitespace between attributes"),this.attribName=r,this.attribValue="",this.state=E.ATTRIB_NAME):P(this,"Invalid attribute name");continue;case E.ATTRIB_VALUE_UNQUOTED:if(!v(r)){"&"===r?this.state=E.ATTRIB_VALUE_ENTITY_U:this.attribValue+=r;continue}R(this),">"===r?D(this):this.state=E.ATTRIB;continue;case E.CLOSE_TAG:if(this.tagName)">"===r?N(this):_(d,r)?this.tagName+=r:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=E.SCRIPT):(m(r)||P(this,"Invalid tagname in closing tag"),this.state=E.CLOSE_TAG_SAW_WHITE);else{if(m(r))continue;w(p,r)?this.script?(this.script+="</"+r,this.state=E.SCRIPT):P(this,"Invalid tagname in closing tag."):this.tagName=r}continue;case E.CLOSE_TAG_SAW_WHITE:if(m(r))continue;">"===r?N(this):P(this,"Invalid characters in closing tag");continue;case E.TEXT_ENTITY:case E.ATTRIB_VALUE_ENTITY_Q:case E.ATTRIB_VALUE_ENTITY_U:var a,c;switch(this.state){case E.TEXT_ENTITY:a=E.TEXT,c="textNode";break;case E.ATTRIB_VALUE_ENTITY_Q:a=E.ATTRIB_VALUE_QUOTED,c="attribValue";break;case E.ATTRIB_VALUE_ENTITY_U:a=E.ATTRIB_VALUE_UNQUOTED,c="attribValue"}";"===r?(this[c]+=I(this),this.entity="",this.state=a):_(this.entity.length?y:g,r)?this.entity+=r:(P(this,"Invalid character in entity name"),this[c]+="&"+this.entity+r,this.entity="",this.state=a);continue;default:throw new Error(this,"Unknown state: "+this.state)}this.position>=this.bufferCheckPosition&&function(t){for(var n=Math.max(e.MAX_BUFFER_LENGTH,10),r=0,o=0,s=i.length;o<s;o++){var a=t[i[o]].length;if(a>n)switch(i[o]){case"textNode":C(t);break;case"cdata":x(t,"oncdata",t.cdata),t.cdata="";break;case"script":x(t,"onscript",t.script),t.script="";break;default:L(t,"Max buffer length exceeded: "+i[o])}r=Math.max(r,a)}var u=e.MAX_BUFFER_LENGTH-r;t.bufferCheckPosition=u+t.position}(this);return this}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){!function(t){C(t),""!==t.cdata&&(x(t,"oncdata",t.cdata),t.cdata=""),""!==t.script&&(x(t,"onscript",t.script),t.script="")}(this)}};try{r=n(35).Stream}catch(t){r=function(){}}var s=e.EVENTS.filter(function(t){return"error"!==t&&"end"!==t});function a(t,e){if(!(this instanceof a))return new a(t,e);r.apply(this),this._parser=new o(t,e),this.writable=!0,this.readable=!0;var n=this;this._parser.onend=function(){n.emit("end")},this._parser.onerror=function(t){n.emit("error",t),n._parser.error=null},this._decoder=null,s.forEach(function(t){Object.defineProperty(n,"on"+t,{get:function(){return n._parser["on"+t]},set:function(e){if(!e)return n.removeAllListeners(t),n._parser["on"+t]=e,e;n.on(t,e)},enumerable:!0,configurable:!1})})}a.prototype=Object.create(r.prototype,{constructor:{value:a}}),a.prototype.write=function(e){if("function"==typeof t&&"function"==typeof t.isBuffer&&t.isBuffer(e)){if(!this._decoder){var r=n(11).StringDecoder;this._decoder=new r("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},a.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},a.prototype.on=function(t,e){var n=this;return n._parser["on"+t]||-1===s.indexOf(t)||(n._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),n.emit.apply(n,e)}),r.prototype.on.call(n,t,e)};var u="[CDATA[",l="DOCTYPE",c="http://www.w3.org/XML/1998/namespace",h="http://www.w3.org/2000/xmlns/",f={xml:c,xmlns:h},p=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,g=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,y=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function m(t){return" "===t||"\n"===t||"\r"===t||"\t"===t}function b(t){return'"'===t||"'"===t}function v(t){return">"===t||m(t)}function _(t,e){return t.test(e)}function w(t,e){return!_(t,e)}var E=0;for(var T in e.STATE={BEGIN:E++,BEGIN_WHITESPACE:E++,TEXT:E++,TEXT_ENTITY:E++,OPEN_WAKA:E++,SGML_DECL:E++,SGML_DECL_QUOTED:E++,DOCTYPE:E++,DOCTYPE_QUOTED:E++,DOCTYPE_DTD:E++,DOCTYPE_DTD_QUOTED:E++,COMMENT_STARTING:E++,COMMENT:E++,COMMENT_ENDING:E++,COMMENT_ENDED:E++,CDATA:E++,CDATA_ENDING:E++,CDATA_ENDING_2:E++,PROC_INST:E++,PROC_INST_BODY:E++,PROC_INST_ENDING:E++,OPEN_TAG:E++,OPEN_TAG_SLASH:E++,ATTRIB:E++,ATTRIB_NAME:E++,ATTRIB_NAME_SAW_WHITE:E++,ATTRIB_VALUE:E++,ATTRIB_VALUE_QUOTED:E++,ATTRIB_VALUE_CLOSED:E++,ATTRIB_VALUE_UNQUOTED:E++,ATTRIB_VALUE_ENTITY_Q:E++,ATTRIB_VALUE_ENTITY_U:E++,CLOSE_TAG:E++,CLOSE_TAG_SAW_WHITE:E++,SCRIPT:E++,SCRIPT_ENDING:E++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach(function(t){var n=e.ENTITIES[t],r="number"==typeof n?String.fromCharCode(n):n;e.ENTITIES[t]=r}),e.STATE)e.STATE[e.STATE[T]]=T;function S(t,e,n){t[e]&&t[e](n)}function x(t,e,n){t.textNode&&C(t),S(t,e,n)}function C(t){t.textNode=A(t.opt,t.textNode),t.textNode&&S(t,"ontext",t.textNode),t.textNode=""}function A(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function L(t,e){return C(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,S(t,"onerror",e),t}function k(t){return t.sawRoot&&!t.closedRoot&&P(t,"Unclosed root tag"),t.state!==E.BEGIN&&t.state!==E.BEGIN_WHITESPACE&&t.state!==E.TEXT&&L(t,"Unexpected end"),C(t),t.c="",t.closed=!0,S(t,"onend"),o.call(t,t.strict,t.opt),t}function P(t,e){if("object"!=typeof t||!(t instanceof o))throw new Error("bad call to strictFail");t.strict&&L(t,e)}function M(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,n=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(n.ns=e.ns),t.attribList.length=0,x(t,"onopentagstart",n)}function O(t,e){var n=t.indexOf(":")<0?["",t]:t.split(":"),r=n[0],i=n[1];return e&&"xmlns"===t&&(r="xmlns",i=""),{prefix:r,local:i}}function R(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else{if(t.opt.xmlns){var e=O(t.attribName,!0),n=e.prefix,r=e.local;if("xmlns"===n)if("xml"===r&&t.attribValue!==c)P(t,"xml: prefix must be bound to "+c+"\nActual: "+t.attribValue);else if("xmlns"===r&&t.attribValue!==h)P(t,"xmlns: prefix must be bound to "+h+"\nActual: "+t.attribValue);else{var i=t.tag,o=t.tags[t.tags.length-1]||t;i.ns===o.ns&&(i.ns=Object.create(o.ns)),i.ns[r]=t.attribValue}t.attribList.push([t.attribName,t.attribValue])}else t.tag.attributes[t.attribName]=t.attribValue,x(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue=""}}function D(t,e){if(t.opt.xmlns){var n=t.tag,r=O(t.tagName);n.prefix=r.prefix,n.local=r.local,n.uri=n.ns[r.prefix]||"",n.prefix&&!n.uri&&(P(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),n.uri=r.prefix);var i=t.tags[t.tags.length-1]||t;n.ns&&i.ns!==n.ns&&Object.keys(n.ns).forEach(function(e){x(t,"onopennamespace",{prefix:e,uri:n.ns[e]})});for(var o=0,s=t.attribList.length;o<s;o++){var a=t.attribList[o],u=a[0],l=a[1],c=O(u,!0),h=c.prefix,f=c.local,p=""===h?"":n.ns[h]||"",d={name:u,value:l,prefix:h,local:f,uri:p};h&&"xmlns"!==h&&!p&&(P(t,"Unbound namespace prefix: "+JSON.stringify(h)),d.uri=h),t.tag.attributes[u]=d,x(t,"onattribute",d)}t.attribList.length=0}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),x(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=E.TEXT:t.state=E.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0}function N(t){if(!t.tagName)return P(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=E.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=E.SCRIPT);x(t,"onscript",t.script),t.script=""}var e=t.tags.length,n=t.tagName;t.strict||(n=n[t.looseCase]());for(var r=n;e--;){if(t.tags[e].name===r)break;P(t,"Unexpected close tag")}if(e<0)return P(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=E.TEXT);t.tagName=n;for(var i=t.tags.length;i-- >e;){var o=t.tag=t.tags.pop();t.tagName=t.tag.name,x(t,"onclosetag",t.tagName);var s={};for(var a in o.ns)s[a]=o.ns[a];var u=t.tags[t.tags.length-1]||t;t.opt.xmlns&&o.ns!==u.ns&&Object.keys(o.ns).forEach(function(e){var n=o.ns[e];x(t,"onclosenamespace",{prefix:e,uri:n})})}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=E.TEXT}function I(t){var e,n=t.entity,r=n.toLowerCase(),i="";return t.ENTITIES[n]?t.ENTITIES[n]:t.ENTITIES[r]?t.ENTITIES[r]:("#"===(n=r).charAt(0)&&("x"===n.charAt(1)?(n=n.slice(2),i=(e=parseInt(n,16)).toString(16)):(n=n.slice(1),i=(e=parseInt(n,10)).toString(10))),n=n.replace(/^0+/,""),isNaN(e)||i.toLowerCase()!==n?(P(t,"Invalid character entity"),"&"+t.entity+";"):String.fromCodePoint(e))}function F(t,e){"<"===e?(t.state=E.OPEN_WAKA,t.startTagPosition=t.position):m(e)||(P(t,"Non-whitespace before first tag."),t.textNode=e,t.state=E.TEXT)}function B(t,e){var n="";return e<t.length&&(n=t.charAt(e)),n}E=e.STATE,String.fromCodePoint||function(){var t=String.fromCharCode,e=Math.floor,n=function(){var n,r,i=[],o=-1,s=arguments.length;if(!s)return"";for(var a="";++o<s;){var u=Number(arguments[o]);if(!isFinite(u)||u<0||u>1114111||e(u)!==u)throw RangeError("Invalid code point: "+u);u<=65535?i.push(u):(n=55296+((u-=65536)>>10),r=u%1024+56320,i.push(n,r)),(o+1===s||i.length>16384)&&(a+=t.apply(null,i),i.length=0)}return a};Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:n,configurable:!0,writable:!0}):String.fromCodePoint=n}()}(e)}).call(this,n(4).Buffer)},function(t,e,n){"use strict";e.byteLength=function(t){var e=l(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=l(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,c=s>0?r-4:r,h=0;h<c;h+=4)e=i[t.charCodeAt(h)]<<18|i[t.charCodeAt(h+1)]<<12|i[t.charCodeAt(h+2)]<<6|i[t.charCodeAt(h+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(h)]<<2|i[t.charCodeAt(h+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(h)]<<10|i[t.charCodeAt(h+1)]<<4|i[t.charCodeAt(h+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function l(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function h(t,e,n){for(var r,i=[],o=e;o<n;o+=3)r=(t[o]<<16&16711680)+(t[o+1]<<8&65280)+(255&t[o+2]),i.push(c(r));return i.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,l=u>>1,c=-7,h=n?i-1:0,f=n?-1:1,p=t[e+h];for(h+=f,o=p&(1<<-c)-1,p>>=-c,c+=a;c>0;o=256*o+t[e+h],h+=f,c-=8);for(s=o&(1<<-c)-1,o>>=-c,c+=r;c>0;s=256*s+t[e+h],h+=f,c-=8);if(0===o)o=1-l;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=l}return(p?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,l=8*o-i-1,c=(1<<l)-1,h=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=c):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=c?(a=0,s=c):s+h>=1?(a=(e*u-1)*Math.pow(2,i),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;t[n+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[n+p]=255&s,p+=d,s/=256,l-=8);t[n+p-d]|=128*g}},function(t,e,n){t.exports=i;var r=n(8).EventEmitter;function i(){r.call(this)}n(2)(i,r),i.Readable=n(9),i.Writable=n(43),i.Duplex=n(44),i.Transform=n(45),i.PassThrough=n(46),i.Stream=i,i.prototype.pipe=function(t,e){var n=this;function i(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function o(){n.readable&&n.resume&&n.resume()}n.on("data",i),t.on("drain",o),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",u));var s=!1;function a(){s||(s=!0,t.end())}function u(){s||(s=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(c(),0===r.listenerCount(this,"error"))throw t}function c(){n.removeListener("data",i),t.removeListener("drain",o),n.removeListener("end",a),n.removeListener("close",u),n.removeListener("error",l),t.removeListener("error",l),n.removeListener("end",c),n.removeListener("close",c),t.removeListener("close",c)}return n.on("error",l),t.on("error",l),n.on("end",c),n.on("close",c),t.on("close",c),t.emit("pipe",n),t}},function(t,e){},function(t,e,n){"use strict";var r=n(7).Buffer,i=n(38);function o(t,e,n){t.copy(e,n)}t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}return t.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},t.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},t.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},t.prototype.clear=function(){this.head=this.tail=null,this.length=0},t.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},t.prototype.concat=function(t){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var e=r.allocUnsafe(t>>>0),n=this.head,i=0;n;)o(n.data,e,i),i+=n.data.length,n=n.next;return e},t}(),i&&i.inspect&&i.inspect.custom&&(t.exports.prototype[i.inspect.custom]=function(){var t=i.inspect({length:this.length});return this.constructor.name+" "+t})},function(t,e){},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(40),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i=1,o={},s=!1,a=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){c(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&c(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){c(t.data)},r=function(e){t.port2.postMessage(e)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var t=a.documentElement;r=function(e){var n=a.createElement("script");n.onreadystatechange=function(){c(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(c,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var s={callback:t,args:e};return o[i]=s,r(i),i++},u.clearImmediate=l}function l(t){delete o[t]}function c(t){if(s)setTimeout(c,0,t);else{var e=o[t];if(e){s=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{l(t),s=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(0),n(5))},function(t,e,n){(function(e){function n(t){try{if(!e.localStorage)return!1}catch(t){return!1}var n=e.localStorage[t];return null!=n&&"true"===String(n).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0}return t.apply(this,arguments)}}}).call(this,n(0))},function(t,e,n){"use strict";t.exports=o;var r=n(23),i=n(3);function o(t){if(!(this instanceof o))return new o(t);r.call(this,t)}i.inherits=n(2),i.inherits(o,r),o.prototype._transform=function(t,e,n){n(null,t)}},function(t,e,n){t.exports=n(10)},function(t,e,n){t.exports=n(1)},function(t,e,n){t.exports=n(9).Transform},function(t,e,n){t.exports=n(9).PassThrough},function(t,e,n){var r=n(12),i=n(18);t.exports=function(t,e){var n,o,s;return n=function(t){var e=r.copyOptions(t);return r.ensureSpacesExists(e),e}(e),o=i(t,n),s="compact"in n&&n.compact?"_parent":"parent",("addParent"in n&&n.addParent?JSON.stringify(o,function(t,e){return t===s?"_":e},n.spaces):JSON.stringify(o,null,n.spaces)).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}},function(t,e,n){(function(e){var r=n(24);t.exports=function(t,n){t instanceof e&&(t=t.toString());var i=null;if("string"==typeof t)try{i=JSON.parse(t)}catch(t){throw new Error("The JSON structure is invalid")}else i=t;return r(i,n)}}).call(this,n(4).Buffer)},function(t,e,n){"use strict";n.r(e);class r extends L.Marker{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}var i=n(14),o=n(15);function s(t){return o(t).lighten(.5).hex()}function a(t){return o(t).darken(.3).hex()}function u(...t){if(0===t.length)return{};if(1===t.length)return t[0];const e=Object(i.cloneDeep)(t[0]),n=Object(i.cloneDeep)(t[1]);for(const t in n)t in e&&"[object Object]"===Object.prototype.toString.call(e[t])?e[t]=u(e[t],n[t]):e[t]=n[t];return u(e,...t.slice(2))}function l(t){return void 0===t}function c(t){return function(t){return null===t}(t)||l(t)||function(t){return""===t}(t)}const h="#3388FF";class f{constructor(t,e,n,r){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={renderType:"point",renderPointColorType:"single",iconType:"unicode",iconSize:[20,20],iconClass:"iconfont",iconColor:h,color:h,iconAnchor:[10,20],popup:!0,tooltip:!0,popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",segmentedColors:[h],classifiedColors:[h],isCluster:!1,renderClusterColorType:"smart",bubbleStrokeWidth:1,bubbleColors:[h],bubbleStrokeOpacity:.2,bubbleFillOpacity:.5,bubbleSizes:[10],heatOptions:{max:1,minOpacity:.5}},this.type="marker",this.map=t,this.dataList=e,this.options=n,this.channelFunc=r,this.visible=!0,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.clusterLayer=null,this.bubbleLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.bubbledSizeMin=1/0,this.bubbledSizeStep=1,this.classifiedColorMap={},this.bubbledColorMap={},this.initOptions(n),this.initEvents()}draw(t){if(this.visible)return this.initOptions(t),this.initMarkers(),this.initEvents(),this.redraw()}redraw(){if(this.layer&&this.layer.remove(),this.options.isCluster&&"point"===this.options.renderType)this.layer=this.configClusterLayer();else switch(this.options.renderType){case"point":this.layer=this.configMarkerLayer();break;case"cluster":this.layer=this.configClusterLayer();break;case"heat":this.layer=this.configHeatLayer();break;case"bubble":this.layer=this.configBubbleLayer();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.map.addLayer(this.layer),this}setData(t){this.dataList=t}setOptions(t,e=!1){this.options=u(this.options,t),e&&this.redraw()}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.map(t=>[t.getLatLng().lat,t.getLatLng().lng])}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayMarker&&this.map.removeLayer(this.focusedDisplayMarker),this.map.off("zoomstart",this._zoomStartCb,this),this.map.off("zoomend",this._zoomEndCb,this)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayMarker&&this.focusedDisplayMarker.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.color=t,this.options.iconColor=t,this.redraw()}changeIcon(t){this.options.iconUnicode=t,this.redraw()}pitch(t){this.markers.forEach(e=>{e.getData().id!==t||this.markerClickHandler(e,!0)})}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let e=0;e<t;e++){const t=this.segmentedMin+e*this.segmentedStep,n=t+this.segmentedStep;this.segmentedRefs.push({range:[t,n],color:this.options.segmentedColors[e]})}return this.segmentedRefs}getClassifiedColorRefs(){return this.classifiedColorRefs}getBubbledColorRefs(){return this.bubbledColorRefs}getBubbledSizeRefs(){this.bubbledSizeRefs=[];const t=this.options.bubbleSizes.length;for(let e=0;e<t;e++){const t=this.bubbledSizeMin+e*this.bubbledSizeStep,n=t+this.bubbledSizeStep;this.bubbledSizeRefs.push({range:[t,n],size:this.options.bubbleSizes[e]})}return this.bubbledSizeRefs}_zoomStartCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.removeLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.removeLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.removeLayer(this.markerLayer)}}_zoomEndCb(){if(this.visible)if("marker"===this.type)switch(this.options.renderType){case"point":if(this.options.isCluster)return;this.markerLayer&&this.map.addLayer(this.markerLayer);break;case"bubble":this.bubbleLayer&&this.map.addLayer(this.bubbleLayer);break;default:return}else{if("markerBuffer"!==this.type)return;this.map.addLayer(this.markerLayer)}}configMarkerLayer(){this.markerLayer&&(this.markerLayer.remove(),this.map.removeLayer(this.markerLayer));const t=L.canvasIconLayer({}).addTo(this.map);return t.addOnClickListener((t,[{data:e}])=>{this.markerClickHandler(e)}),t.addOnContextmenuListener((t,[{data:e}])=>{this.channelFunc("contextmenu",{event:t,target:e})}),this.options.tooltip&&t.addOnHoverListener((t,[{data:e}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=e,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr])}),this.markerLayer=t,this.markerLayer.addMarkers(this.markers),this.map.panTo(this.map.getCenter()),this.markerLayer}getToolTipContent(t){return""+t[this.options.tooltipAttr]}initOptions(t){this.options=u(this.defaultOptions,this.options,t),this.options.color=this.options.color||this.options.iconColor}initMarkers(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.cacheBubbleParams(),this.markers=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],n=new r([e.getLatLng().lat,e.getLatLng().lng],{icon:this.getMarkerIcon(t)});n.setData(t),this.markers.push(n)})}initEvents(){this.map.on("zoomstart",this._zoomStartCb,this),this.map.on("zoomend",this._zoomEndCb,this)}getClassifyMarkerColor(t){return this.classifiedColorMap[t[this.options.classifiedAttr]]}getSegmentedMarkerColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}markerClickHandler(t,e){this.focusedMarker=t,this.options.popup&&(this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new r(t.getLatLng(),{icon:this.getLargerMarkerIcon(t.getData())}),this.focusedDisplayMarker.addTo(this.map),this.focusedDisplayMarker.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayMarker.on("popupclose",()=>{this.focusedDisplayMarker.remove()})),t.closeTooltip(),this.map.panTo(this.focusedMarker.getLatLng()),e&&this.map.fitBounds(t.getLatLng().toBounds(10)),this.channelFunc("on-click-marker",t)}configClusterLayer(){return this.clusterLayer&&this.clusterLayer.remove(),this.clusterLayer=L.markerClusterGroup({iconCreateFunction:this.iconCreateFunction.bind(this)}),this.clusterLayer.addLayers(this.markers.map(t=>{const e=new r(t.getLatLng(),{icon:this.getMarkerIcon(t.getData())});return e.setData(t.getData()),e.bindTooltip(""+e.getData()[this.options.tooltipAttr]),e.bindPopup(this.getPopupContent(e.getData())),e.on("click",()=>{this.markerClickHandler(e)}),e})),this.clusterLayer}configHeatLayer(){this.heatLayer&&this.heatLayer.remove();const t=[];return this.markers.forEach(e=>{const n=e.getLatLng(),r=this.options.heatOptions&&this.options.heatOptions.dimensionAttr;let i=r&&e.getData()[r]||this.options.heatOptions.max;"number"!=typeof i&&(i=this.options.heatOptions.max),t.push(i),e.setLatLng(L.latLng(n.lat,n.lng,i))}),this.heatLayer=L.heatLayer(this.markers.map((e,n)=>[e.getLatLng().lat,e.getLatLng().lng,t[n]]),u({minOpacity:.5},this.options.heatOptions)),this.heatLayer}configBubbleLayer(){return this.bubbleLayer&&this.bubbleLayer.remove(),this.bubbleLayer=L.layerGroup(),this.markers.forEach(t=>{const e=this.getBubbledMarkerSize(t.getData()),n=this.getBubbledMarkerColor(t.getData()),r=this.options.bubbleStrokeColor||s(n),i=this.options.bubbleStrokeWidth,o=this.options.bubbleStrokeOpacity,a=this.options.bubbleFillOpacity,u=L.circleMarker(t.getLatLng(),{radius:e,color:r,fillColor:n,weight:i,opacity:o,fillOpacity:a});this.options.popup&&u.bindPopup(this.getPopupContent(t.getData())),this.options.tooltip&&u.bindTooltip(this.getToolTipContent(t.getData())),this.bubbleLayer.addLayer(u)}),this.bubbleLayer}getLargerMarkerIcon(t){return this._getMarkerIcon(t,!0)}getMarkerIcon(t){return this._getMarkerIcon(t,!1)}_getMarkerIcon(t,e){const n=this.options.iconSize,r=this.options.iconAnchor,i=[1.5*n[0],1.5*n[1]],o=[1.5*r[0],1.5*r[1]],s=this.options.color||this.options.iconColor;switch(this.options.iconType){case"image":case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(t,{iconSize:e?i:n,iconColor:s}),className:e?"large-div-icon-marker":"",iconSize:e?i:n,iconAnchor:e?o:r,tooltipAnchor:e?[0,-o[1]/2]:[0,-r[1]/2],popupAnchor:e?[0,-o[1]/2]:[0,-r[1]/2]});default:throw new Error(`renderType 不能为 ${this.options.iconType}`)}}getCustomIconHTML(t,e){if(this.options.iconRenderer)return e=Object.assign({},this.options,e),this.options.iconRenderer(t,e);let n=this.options.color||this.options.iconColor;switch(this.options.renderPointColorType){case"single":n=this.options.color||this.options.iconColor;break;case"classified":n=this.getClassifyMarkerColor(t);break;case"segmented":n=this.getSegmentedMarkerColor(t);break;default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}switch(this.options.iconType){case"font_class":return`\n          <i class="${this.options.iconClass}"\n            style="\n              color: ${n};\n              font-size: ${e.iconSize[0]}px;\n            "\n            />\n        `;case"symbol":return`\n          <svg class="icon-symbol" aria-hidden="true">\n            <use xlink:href="${this.options.iconSymbol}" />\n          </svg>\n        `;case"unicode":return`\n          <i\n            class="${this.options.iconClass}"\n            style="\n              color: ${n};\n              font-size: ${e.iconSize[0]}px;\n            "\n            >\n            ${this.options.iconUnicode}\n          </i>\n        `}}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(n=>{n[e]in t?t[n[e]]=[n[e],t[n[e]][1]+1]:t[n[e]]=[n[e],1]});const n=Object.values(t);n.sort((t,e)=>e[1]-t[1]),this.classifiedColorRefs=[];let r=0;n.forEach(([t,e],n)=>{let i=h;n<this.options.classifiedColors.length&&(i=this.options.classifiedColors[n]),this.classifiedColorMap[t]=i,n<this.options.classifiedColors.length?this.classifiedColorRefs.push({attr:t,color:i,nums:e}):r+=e}),r>0&&this.classifiedColorRefs.push({attr:"其它",color:h,nums:r})}cacheBubbleParams(){if(!this.options.bubbleSizeAttr)return;const t=this.options.bubbleSizes.length;let e=-1/0,n=1/0;for(const t of this.dataList){const r=t[this.options.bubbleSizeAttr];void 0!==r&&(e=Math.max(e,r),n=Math.min(n,r))}const r=(e-n+1)/t;if(this.bubbledSizeMin=n,this.bubbledSizeStep=r,!this.options.bubbleColorAttr)return;const i={},o=this.options.bubbleColorAttr;this.dataList.forEach(t=>{t[o]in i?i[t[o]]=[t[o],i[t[o]][1]+1]:i[t[o]]=[t[o],1]});const s=Object.values(i);s.sort((t,e)=>e[1]-t[1]),this.bubbledColorRefs=[];let a=0;s.forEach(([t,e],n)=>{let r=h;n<this.options.bubbleColors.length?(r=this.options.bubbleColors[n],this.bubbledColorRefs.push({attr:t,color:r,nums:e})):a+=e,this.bubbledColorMap[t]=r}),this.options.bubbleColors.length<s.length&&this.bubbledColorRefs.push({attr:"其他",color:h,nums:a})}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,n=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(e=Math.max(e,r),n=Math.min(n,r))}const r=Math.ceil((e-n+1)/t);this.segmentedMin=n,this.segmentedStep=r}getBubbledMarkerSize(t){const e=t[this.options.bubbleSizeAttr];return this.options.bubbleSizes[parseInt(""+(e-this.bubbledSizeMin)/this.bubbledSizeStep,10)]}getBubbledMarkerColor(t){return this.bubbledColorMap[t[this.options.bubbleColorAttr]]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}iconCreateFunction(t){const e=["#757472","#5093E2","#CB7987","#FC763B"],n=this.dataList.length/e.length,r=.25/e.length;let i=this.options.color||this.options.iconColor,o=1;return"smart"===this.options.renderClusterColorType&&(i=e[Math.floor((t.getChildCount()-1)/n)],o=(Math.floor((t.getChildCount()-1)/n)+1)*r+.75),L.divIcon({html:`\n       <div\n        style="\n          border-radius: 50%;\n          position: relative;\n          width: 50px;\n          height: 50px;\n          transform: scale3d(${o}, ${o}, 1)\n        "\n        >\n        <div\n          style="\n            border-radius: 50%;\n            background: ${s(i)};\n            width: 50px;\n            height: 50px;\n            opacity: 0.7;\n            position: absolute;\n            top: 0;\n            left: 0;\n            ">\n        </div>\n        <div\n          style="\n            border-radius: 50%;\n            background: ${i};\n            opacity: 0.8;\n            width: 32px;\n            height: 32px;\n            margin: 9px;\n          ">\n        </div>\n        <div\n          style="\n            text-align: center;\n            line-height: 32px;\n            position: absolute;\n            top: 9px;\n            left: 9px;\n            width: 32px;\n            height: 32px;\n            color: white;\n            font-size: 14px;\n          "\n          >\n          ${t.getChildCount()}\n        </div>\n       </div>\n      `,iconSize:[40,40]})}}class p extends f{constructor(t,e,n,r){super(t,e,n,r),this.type="markerBuffer";this.options=u(this.options,{bufferOptions:{radius:1e3,stroke:!0,weight:1}},JSON.parse(JSON.stringify(n)))}draw(t){return this.options=u(this.options,t),this.options.bufferOptions.color=this.options.color||this.options.iconColor,this.initMarkers(),this.redraw()}redraw(){if(this.visible)return this.markerLayer&&this.map.removeLayer(this.markerLayer),this.bufferLayer&&this.map.removeLayer(this.bufferLayer),this.markerLayer=this.configMarkerLayer(),this.bufferLayer=this.configBufferLayer(),this.layer=L.layerGroup(),this.layer.addLayer(this.markerLayer),this.layer.addLayer(this.bufferLayer),this.map.addLayer(this.layer),this}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.reduce((t,e)=>t.extend(e.getLatLng().toBounds(this.options.bufferOptions.radius)),this.markers[0].getLatLng().toBounds(this.options.bufferOptions.radius))}configBufferLayer(){const t=L.layerGroup();return this.markers.forEach(e=>{const n=L.circle(e.getLatLng(),u(this.options.bufferOptions,{color:"segmented"===this.options.renderPointColorType?this.getSegmentedMarkerColor(e.getData()):this.options.bufferOptions.color}));if(this.options.bufferTooltipAttr)n.bindTooltip(""+e.getData()[this.options.bufferTooltipAttr]);else switch(typeof this.options.popupAttr){case"string":n.bindTooltip(""+e.getData()[this.options.popupAttr]);break;case"object":n.bindTooltip(""+e.getData()[this.options.popupAttr.value])}t.addLayer(n)}),t}}class d extends L.Polyline{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}const g="#3388FF";class y{constructor(t,e,n,r){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={color:g,renderPolylineColorType:"single",segmentedColors:[g],popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",classifiedColors:[g]},this.type="polyline",this.map=t,this.dataList=e,this.options=u(this.defaultOptions,n),this.channelFunc=r,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolyline=null,this.focusedDisplayPolyline=null}draw(t){if(this.visible)return this.initOptions(t),this.initPolylines(),this.redraw()}redraw(){return this.layer&&this.layer.remove(),this.layer=this.configPolylineLayer(),this.map.addLayer(this.layer),this}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),L.latLngBounds(this.polylines[0].getBounds().getNorthEast(),this.polylines[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polylines.forEach(e=>{e.getData().id!==t||this.polylineClickHandler(e,!0)})}getClassifiedColorRefs(){return this.classifyColorRefs}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let e=0;e<t;e++){const t=this.segmentedMin+e*this.segmentedStep,n=t+this.segmentedStep;this.segmentedRefs.push({range:[t,n],color:this.options.segmentedColors[e]})}return this.segmentedRefs}initOptions(t){this.options=u(this.defaultOptions,this.options,t)}initPolylines(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polylines=this.dataList.map(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],n=new d(e.getLatLngs());return n.setData(t),n})}getSegmentedPolylineColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polylineClickHandler(t,e){this.focusedPolyline=t,this.focusedDisplayPolyline&&this.focusedDisplayPolyline.remove(),this.focusedDisplayPolyline=new d(t.getLatLngs(),{color:this.getColor(t.getData()),fillColor:this.getColor(t.getData(),"normal")}),this.focusedDisplayPolyline.addTo(this.map),this.focusedDisplayPolyline.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolyline.on("popupclose",()=>{this.focusedDisplayPolyline.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolyline.getCenter()),e&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polyline",t)}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}configPolylineLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{const e=u({},this.options,{color:this.getColor(t.getData())}),n=new d(t.getLatLngs(),e);n.on("click",()=>{this.polylineClickHandler(t)}),n.on("contextmenu",t=>{this.channelFunc("contextmenu",{event:t,target:n})}),n.setData(t.getData()),this.options.tooltipAttr&&n.bindTooltip(this.getToolTipContent(n.getData())),this.polylineLayer.addLayer(n)}),this.polylineLayer}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(n=>{n[e]in t?t[n[e]]=[n[e],t[n[e]][1]+1]:t[n[e]]=[n[e],1]});const n=Object.values(t);n.sort((t,e)=>e[1]-t[1]),this.classifyColorRefs=[];let r=0;n.forEach(([t,e],n)=>{let i=g;n<this.options.classifiedColors.length?(i=this.options.classifiedColors[n],this.classifyColorRefs.push({attr:t,color:i,nums:e})):r+=e,this.classifyColorMap[t]=i}),this.options.classifiedColors.length<n.length&&this.classifyColorRefs.push({attr:"其他",color:g,nums:r})}getClassifyPolylineColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,n=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(e=Math.max(e,r),n=Math.min(n,r))}const r=Math.ceil((e-n+1)/t);this.segmentedMin=n,this.segmentedStep=r}getColor(t,e){let n=this.options.color;switch("segmented"===this.options.renderPolylineColorType&&(n=this.getSegmentedPolylineColor(t)),"classified"===this.options.renderPolylineColorType&&(n=this.getClassifyPolylineColor(t)),e){case"darken":return a(n);case"lighten":return s(n);default:return n}}}class m extends y{constructor(t,e,n,r){super(t,e,n,r);this.type="polylineBuffer",this.map=t,this.dataList=e,this.options=n,this.channelFunc=r,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolylineColorType:"single",segmentedColors:["#3388FF"],corridor:100,color:"#3388FF",opacity:.5},n)}draw(t){return this.options=Object.assign(this.options,t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineBufferLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),this.polylines[0].getBounds())}changeColor(t){this.options.color=t,this.redraw()}configPolylineBufferLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{const e=Object.assign({},this.options,{color:"single"===this.options.renderPolylineColorType?this.options.color:this.getSegmentedPolylineColor(t.getData())}),n=L.corridor(t.getLatLngs().map(t=>L.latLng([t.lat,t.lng])),e);this.options.tooltipAttr&&n.bindTooltip(this.getToolTipContent(t.getData())),this.options.popupAttr&&n.bindPopup(this.getPopupContent(t.getData())),this.polylineLayer.addLayer(n)}),this.polylineLayer}}class b extends L.Polygon{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}const v="#72AFDF";class _{constructor(t,e,n,r){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.defaultOptions={popupAttr:{label:"名称",value:"name"},tooltipAttr:"name",color:v,fill:!0,fillColor:v,weight:1,opacity:1,fillOpacity:.4,renderPolygonColorType:"single",segmentedColors:[v],classifiedColors:[v]},this.type="polygon",this.map=t,this.dataList=e,this.options=u(this.defaultOptions,n),this.channelFunc=r,this.visible=!0,this.polygons=[],this.segmentedMin=1/0,this.segmentedStep=1,this.classifyColorMap={},this.focusedPolygon=null,this.focusedDisplayPolygon=null}draw(t){if(this.visible)return this.initOptions(t),this.initPolygons(),this.initEvent(),this.redraw()}redraw(){return this.layer&&this.layer.remove(),this.layer=this.configPolygonLayer(),this.map.addLayer(this.layer),this}getOptions(){return this.options}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.polygons.length<=0?this.map.getBounds():this.polygons.reduce((t,e)=>t.extend(e.getBounds()),L.latLngBounds(this.polygons[0].getBounds().getNorthEast(),this.polygons[0].getBounds().getSouthWest()))}destroy(){this.layer&&this.map.removeLayer(this.layer),this.focusedDisplayPolygon&&this.map.removeLayer(this.focusedDisplayPolygon)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.map.removeLayer(this.layer)))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polygons.forEach(e=>{e.getData().id!==t||this.polygonClickHandler(e,!0)})}getSegmentedColorRefs(){if(!Number.isFinite(this.segmentedMin)||!Number.isFinite(this.segmentedStep))return[];this.segmentedRefs=[];const t=this.options.segmentedColors.length;for(let e=0;e<t;e++){const t=this.segmentedMin+e*this.segmentedStep,n=t+this.segmentedStep;this.segmentedRefs.push({range:[t,n],color:this.options.segmentedColors[e]})}return this.segmentedRefs}getClassifiedColorRefs(){return this.classifyColorRefs}initEvent(){}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}cacheClassifyParams(){if(!this.options.classifiedAttr)return;const t={},e=this.options.classifiedAttr;this.dataList.forEach(n=>{n[e]in t?t[n[e]]=[n[e],t[n[e]][1]+1]:t[n[e]]=[n[e],1]});const n=Object.values(t);n.sort((t,e)=>e[1]-t[1]),this.classifyColorRefs=[];let r=0;n.forEach(([t,e],n)=>{let i=v;n<this.options.classifiedColors.length?(i=this.options.classifiedColors[n],this.classifyColorRefs.push({attr:t,color:i,nums:e})):r+=e,this.classifyColorMap[t]=i}),this.classifyColorRefs.push({attr:"其他",color:v,nums:r})}getClassifyPolygonColor(t){return this.classifyColorMap[t[this.options.classifiedAttr]]}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,n=1/0;for(const t of this.dataList){const r=t[this.options.segmentedAttr];void 0!==r&&(e=Math.max(e,r),n=Math.min(n,r))}const r=Math.ceil((e-n+1)/t);this.segmentedMin=n,this.segmentedStep=r}getSegmentedPolygonColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polygonClickHandler(t,e){this.focusedPolygon=t,this.focusedDisplayPolygon&&this.focusedDisplayPolygon.remove(),this.focusedDisplayPolygon=new b(t.getLatLngs(),{color:this.getColor(t.getData(),"darken"),fillColor:this.getColor(t.getData())}),this.focusedDisplayPolygon.addTo(this.map),this.focusedDisplayPolygon.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayPolygon.on("popupclose",()=>{this.focusedDisplayPolygon.remove()}),t.closeTooltip(),this.map.panTo(this.focusedDisplayPolygon.getCenter()),e&&this.map.fitBounds(t.getBounds()),this.channelFunc("on-click-polygon",t)}initOptions(t){this.options=u(this.defaultOptions,this.options,t)}initPolygons(){this.cacheSegmentParams(),this.cacheClassifyParams(),this.polygons=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],n=new b(e.getLatLngs());n.setData(t),this.polygons.push(n)})}configPolygonLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{const e=u({},this.options,{color:this.getColor(t.getData(),"darken"),fillColor:this.getColor(t.getData())}),n=new b(t.getLatLngs(),e);return n.setData(t.getData()),this.options.tooltipAttr&&n.bindTooltip(this.getToolTipContent(n.getData())),n.on("click",()=>{this.polygonClickHandler(t)}),n.on("contextmenu",t=>{this.channelFunc("contextmenu",{event:t,target:n})}),n}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}getColor(t,e){let n=this.options.color;switch("segmented"===this.options.renderPolygonColorType&&(n=this.getSegmentedPolygonColor(t)),"classified"===this.options.renderPolygonColorType&&(n=this.getClassifyPolygonColor(t)),e){case"darken":return a(n);case"lighten":return s(n);default:return n}}}class w extends _{constructor(t,e,n,r){super(t,e,n,r),this.propMaxLength=-1}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configGridLayer(),this.map.addLayer(this.layer),this.configTooltip(),setTimeout(()=>{this.zoomHandler()},200),this}toggleTooltip(t){this.polygons.forEach(e=>{e.getTooltip()&&e.getTooltip().setOpacity(t?1:0)})}initEvent(){this.map.on("zoom",this.zoomHandler.bind(this))}configTooltip(){this.propMaxLength=this.getPropMaxLength(),this.options.tooltipAttr&&this.polygons.forEach(t=>{t.bindTooltip(this.getToolTipContent(t.getData()),{permanent:!0,direction:"center"})})}configGridLayer(){return this.polygonLayer=L.layerGroup(),this.polygons=this.polygons.map(t=>{let e=this.options.color;"segmented"===this.options.renderPolygonColorType&&(e=this.getSegmentedPolygonColor(t.getData()));const n=Object.assign({},this.options,{color:e}),r=new b(t.getLatLngs(),n);return r.setData(t.getData()),r.on("click",()=>{}),this.options.popupAttr&&r.bindPopup(this.getPopupContent(r.getData())),r}),this.polygons.forEach(t=>{this.polygonLayer.addLayer(t)}),this.polygonLayer}zoomHandler(){const t=this.polygons[0];t&&this.toggleTooltip(this.getRectangleWidth(t)>this.getTooltipMaxWidth(this.propMaxLength))}getRectangleWidth(t){return this.map.latLngToLayerPoint(t.getBounds().getNorthEast()).x-this.map.latLngToLayerPoint(t.getBounds().getSouthWest()).x}getTooltipMaxWidth(t){return 12*t+14}getPropMaxLength(){const t="string"==typeof this.options.popupAttr?this.options.popupAttr:this.options.popupAttr.value;return this.polygons.map(e=>`${e.getData()[t]}`.length).reduce((t,e)=>Math.max(t,e),0)}}class E{constructor(t,e,n,r){if(!Array.isArray(e)||0===e.length)throw new Error("dataList 必须是非空数组");this.map=t,this.dynamicDataList=e,this.options=n,this.channelFunc=r,this.currentStep=0,this.isPause=!0}restart(){this.isPause=!1,this.currentStep=0,this.gotoStep(this.currentStep),this.start()}start(){this.isPause=!1,this.options.auto&&setTimeout(()=>{if(!this.isPause)if(this.currentStep>=this.dynamicDataList.length-1){if(!this.options.loop)return;this.restart()}else this.currentStep++,this.gotoStep(this.currentStep),this.start()},this.options.interval)}pause(){this.isPause=!0}prev(){this.currentStep--,this.currentStep=(this.currentStep+this.dynamicDataList.length)%this.dynamicDataList.length,this.gotoStep(this.currentStep)}next(){this.currentStep++,this.currentStep=this.currentStep%this.dynamicDataList.length,this.gotoStep(this.currentStep)}gotoStep(t){if(t<0||t>=this.dynamicDataList.length)throw new Error(`gotoStep(${t}): step is out of index `);this.layer.setData(this.dynamicDataList[t]),this.layer.draw()}draw(t){return this.initOptions(t),this.initLayer(),this.layer.draw(),this}fitBounds(){this.layer.fitBounds()}initOptions(t){this.options=Object.assign({loop:!1,auto:!1,interval:1e3},this.options,t)}initLayer(){const t={renderType:"heat",heatOptions:this.options};return this.layer=new f(this.map,this.dynamicDataList[0],t,this.channelFunc),this.layer}}var T=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})};class S{constructor(t,e,n={},r){this.type="wmsTile",this.visible=!0,this.map=t,this.dataList=e,this.options=n,this.channelFunc=r,this.layer=null,this.initOptions(n),this.initEvents()}draw(t){return T(this,void 0,void 0,function*(){if(this.visible){if(this.layer&&this.layer.remove(),this.popup&&this.popup.remove(),t&&this.initOptions(t),this.options.getWmsConfigs){const{wmsURL:t,layers:e,styles:n}=yield this.options.getWmsConfigs(this.options);this.initOptions({wmsURL:t,layers:e,styles:n})}this.layer=this.getLayer(),this.layer&&this.layer.addTo(this.map)}})}destroy(){this.layer&&this.layer.remove(),this.map.off("click",this.clickHandler,this)}getOptions(){return this.options}pitch(t){this.dataList.forEach(e=>{if(e.id===t){const t=L.geoJSON(e.geometry).getLayers()[0];this.showPopup(e,t.getCenter()),this.map.fitBounds(t.getBounds())}})}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):(this.popup&&this.popup.closePopup(),this.map.removeLayer(this.layer)))}fitBounds(){this.map.fitBounds(this.getBounds(),{padding:[20,20]})}getBounds(){return this.dataList.length<=0?this.map.getBounds():this.dataList.reduce((t,e)=>t.extend(L.geoJSON(e.geometry).getLayers()[0].getBounds()),L.latLngBounds(L.geoJSON(this.dataList[0].geometry).getLayers()[0].getBounds().getNorthEast(),L.geoJSON(this.dataList[0].geometry).getLayers()[0].getBounds().getSouthWest()))}initEvents(){this.map.on("click",this.clickHandler,this)}initOptions(t){const e=t.getDataByLatLng||this.options.getDataByLatLng,n=t.getWmsConfigs||this.options.getWmsConfigs,r={format:"image/png",transparent:!0,crs:L.CRS.EPSG4326};this.options=u(this.options,r,t),this.options.getDataByLatLng=e,this.options.getWmsConfigs=n}getLayer(){const{wmsURL:t,layers:e,styles:n}=this.options;return t?L.tileLayer.wms(t,{layers:e,styles:n,transparent:!0,format:"image/png",crs:L.CRS.EPSG4326}):null}clickHandler(t){return T(this,void 0,void 0,function*(){if(this.channelFunc("click",t),!this.options.getDataByLatLng)return;const e=[t.latlng.lat,t.latlng.lng],n=yield this.options.getDataByLatLng(e);n&&this.showPopup(n,t.latlng)})}showPopup(t,e){const n=this.getPopupContent(t);n&&(this.popup=L.popup().setLatLng(e).setContent(n).openOn(this.map))}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?t[this.options.popupAttr]?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:null:"object"==typeof this.options.popupAttr?t[this.options.popupAttr.value]?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:null:void 0:null}}var x=n(25);const C={_attributes:{version:"1.0",encoding:"utf-8"}},A={version:"1.0.0","xsi:schemaLocation":"http://www.opengis.net/sld StyledLayerDescriptor.xsd",xmlns:"http://www.opengis.net/sld","xmlns:ogc":"http://www.opengis.net/ogc","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance"};class k{constructor(t,e){this.layerName=t,this.stylesCfg=e}toXMLStr(){return x.js2xml(this.getSLDStyles(this.layerName,this.stylesCfg),{compact:!0,spaces:"\t",elementNameFn:t=>["Filter","And","Or","Not","PropertyIsLessThan","PropertyIsEqualTo","PropertyIsNotEqualTo","PropertyIsGreaterThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThanOrEqualTo"].includes(t)?`ogc:${t}`:t})}getStylesConfig(){return this.stylesCfg}getLayerName(){return this.layerName}getSLDStyles(t,e){return{_declaration:C,StyledLayerDescriptor:{_attributes:A,NamedLayer:{Name:{_text:t},UserStyle:this.getUserStyles(e)}}}}getFillCssParameters(t){return this.getCssParameterItems(["fill","fill-opacity"],t)}getFontCssParameters(t){return this.getCssParameterItems(["font-family","font-size","font-style","font-weight"],t)}getStrokeCssParameters(t){return this.getCssParameterItems(["stroke","stroke-opacity"],t)}sldError(t){return new Error(`[sld] ${t}`)}getRangeColorRefs(t,e){const n=t[0],r=t[1],i=e.length,o=(r-n)/i;return e.map((t,e)=>({range:[n+o*e,n+o*(e+1)],color:t}))}getRangeSizeRefs(t,e){const n=t[0],r=t[1],i=e.length,o=(r-n)/i;return e.map((t,e)=>({range:[n+o*e,n+o*(e+1)],size:t}))}getPropColorRefs(t,e){return t.slice(0,Math.min(t.length,e.length)).map((t,n)=>({prop:t,color:e[n]}))}getPropSizeRefs(t,e){return t.slice(0,Math.min(t.length,e.length)).map((t,n)=>({prop:t,size:e[n]}))}getRangeFilter(t,e){return{And:{PropertyIsGreaterThanOrEqualTo:{PropertyName:{_text:t},Literal:{_text:e[0]}},PropertyIsLessThan:{PropertyName:{_text:t},Literal:{_text:e[1]}}}}}getTypeFilter(t,e){return{PropertyIsEqualTo:{PropertyName:{_text:t},Literal:{_text:e}}}}getTypeNotInFilter(t,e){return{And:{PropertyIsNotEqualTo:e.map(e=>({PropertyName:{_text:t},Literal:{_text:e}}))}}}getCssParameterItems(t,e){return t.map(this.slash2Camel).map((n,r)=>[t[r],e[n]]).filter(([t,e])=>!l(e)).map(([t,e])=>this.getCssParameterItem(t,e))}getCssParameterItem(t,e){return{_attributes:{name:t},_text:e}}slash2Camel(t){const e=[];for(let n=0;n<t.length;n++)"-"===t[n]?(n+=1)<t.length&&e.push(t[n].toUpperCase()):e.push(t[n]);return e.join()}}class P extends k{constructor(t,e){super(t,e),this.layerName=t,this.stylesCfg=e}getUserStyles(t){return[{FeatureTypeStyle:[{Rule:this.getRule(t)}]}]}getRule(t){switch(t.renderType){case"single":return this.getSingleRenderRule(t);case"segmented":return this.getSegmentedRenderRule(t);case"classified":return this.getClassifiedRenderRule(t);case"heat":case"bubble":return this.getBubbleRenderRule(t)}}getSingleRenderRule(t){if(c(t.fill))throw this.sldError(`invalid PointStylesConfig.fill: ${t.fill}`);if(c(t.fontSize))throw this.sldError(`invalid PointStylesConfig.fontSize: ${t.fontSize}`);return[{PointSymbolizer:[this.getPointSymbolizerItem(t.iconUrl,t.fill,t.iconSize)]}]}getSegmentedRenderRule(t){if(c(t.rangeSize))throw this.sldError(`invalid PointStylesConfig.rangeSize: ${t.rangeSize}`);if(c(t.segmentedProp))throw this.sldError(`invalid PointStylesConfig.segmentedProp: ${t.segmentedProp}`);const e=t.rangeSize[t.segmentedProp];if(c(e))throw this.sldError(`invalid PointStylesConfig.rangeSize[${t.segmentedProp}]: ${e}`);return this.getRangeColorRefs(e,t.segmentedColors).map(e=>({Filter:this.getRangeFilter(t.segmentedProp,e.range),PointSymbolizer:[this.getPointSymbolizerItem(t.iconUrl,e.color,t.iconSize)]}))}getClassifiedRenderRule(t){if(c(t.rangeProp))throw this.sldError(`invalid PointStylesConfig.rangeProp: ${t.rangeProp}`);if(c(t.classifiedProp))throw this.sldError(`invalid PointStylesConfig.classifiedProp: ${t.classifiedProp}`);const e=t.rangeProp[t.classifiedProp];if(c(e))throw this.sldError(`invalid PointStylesConfig.rangeProp[${t.classifiedProp}]: ${e}`);return this.getPropColorRefs(e,t.classifiedColors).map(e=>({Filter:this.getTypeFilter(t.classifiedProp,e.prop),PointSymbolizer:[this.getPointSymbolizerItem(t.iconUrl,e.color,t.iconSize)]}))}getBubbleRenderRule(t){if(c(t.bubbleColorType))throw this.sldError(`invalid PointStylesConfig.bubbleColorType: ${t.bubbleColorType}`);if(c(t.bubbleSizeType))throw this.sldError(`invalid PointStylesConfig.bubbleSizeType: ${t.bubbleSizeType}`);if(c(t.bubbleSizeProp))throw this.sldError(`invalid PointStylesConfig.bubbleSizeProp: ${t.bubbleSizeProp}`);if(c(t.bubbleColorProp))throw this.sldError(`invalid PointStylesConfig.bubbleColorProp: ${t.bubbleColorProp}`);const e=t.rangeProp[t.bubbleColorProp],n=t.rangeProp[t.bubbleSizeProp],r=t.rangeSize[t.bubbleColorProp],i=t.rangeSize[t.bubbleSizeProp],o=e&&this.getPropColorRefs(e,t.bubbleColors)||[],s=n&&this.getPropSizeRefs(n,t.bubbleSizes)||[],a=r&&this.getRangeColorRefs(r,t.bubbleColors)||[],u=i&&this.getRangeSizeRefs(i,t.bubbleSizes)||[];return"prop"===t.bubbleColorType&&"prop"===t.bubbleSizeType?this.colorPropXSizeProp(t.bubbleColorProp,o,t.bubbleSizeProp,s):"prop"===t.bubbleColorType&&"range"===t.bubbleSizeType?this.colorPropXSizeRange(t.bubbleColorProp,o,t.bubbleSizeProp,u):"range"===t.bubbleColorType&&"prop"===t.bubbleSizeType?this.colorRangeXSizeProp(t.bubbleColorProp,a,t.bubbleSizeProp,s):"range"===t.bubbleColorType&&"range"===t.bubbleSizeType?this.colorRangeXSizeRange(t.bubbleColorProp,a,t.bubbleSizeProp,u):void 0}colorPropXSizeProp(t,e,n,r){const i=[];for(const o of e)for(const e of r)i.push({Filter:{And:[this.getTypeFilter(t,o.prop),this.getTypeFilter(n,e.prop)]},PointSymbolizer:[this.getPointSymbolizerItem(this.stylesCfg.iconUrl,o.color,e.size)]});return i}colorPropXSizeRange(t,e,n,r){const i=[];for(const o of e)for(const e of r)i.push({Filter:{And:{And:[this.getTypeFilter(t,o.prop),this.getRangeFilter(n,e.range)]}},PointSymbolizer:[this.getPointSymbolizerItem(this.stylesCfg.iconUrl,o.color,e.size)]});return i}colorRangeXSizeProp(t,e,n,r){const i=[];for(const o of e)for(const e of r)i.push({Filter:{And:[this.getRangeFilter(t,o.range),this.getTypeFilter(n,e.prop)]},PointSymbolizer:[this.getPointSymbolizerItem(this.stylesCfg.iconUrl,o.color,e.size)]});return i}colorRangeXSizeRange(t,e,n,r){const i=[];for(const o of e)for(const e of r)i.push({Filter:{And:[this.getRangeFilter(t,o.range),this.getRangeFilter(n,e.range)]},PointSymbolizer:[this.getPointSymbolizerItem(this.stylesCfg.iconUrl,o.color,e.size)]});return i}getPointSymbolizerItem(t,e,n){return{Graphic:{ExternalGraphic:{OnlineResource:{_attributes:{"xlink:type":"simple","xlink:href":`${t}?fill=${e}`}},Format:{_text:"image/svg"}},Size:{_text:n}}}}}class M extends k{getUserStyles(t){throw new Error(JSON.stringify(t))}getRule(t){throw new Error(JSON.stringify(t))}}n.d(e,"Marker",function(){return r}),n.d(e,"MarkersLayer",function(){return f}),n.d(e,"MarkersBufferLayer",function(){return p}),n.d(e,"Polyline",function(){return d}),n.d(e,"PolylinesLayer",function(){return y}),n.d(e,"PolylinesBufferLayer",function(){return m}),n.d(e,"Polygon",function(){return b}),n.d(e,"PolygonsLayer",function(){return _}),n.d(e,"GridsLayer",function(){return w}),n.d(e,"DynamicHeatLayer",function(){return E}),n.d(e,"WmsTile",function(){return S}),n.d(e,"PointStyles",function(){return P}),n.d(e,"PolygonStyles",function(){return M})}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,