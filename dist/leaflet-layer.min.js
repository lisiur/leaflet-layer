!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.leafletMap=e():t.leafletMap=e()}(window,function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class i extends L.Marker{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class o{constructor(t,e,s,i){this.type="marker",this.map=t,this.dataList=e,this.options=Object.assign({},{renderType:"point",renderPointColorType:"single",iconType:"unicode",iconSize:[20,20],iconClass:"iconfont",iconColor:"#3388FF",iconAnchor:[10,20],segmentedColors:["#3388FF"],isCluster:!1,heatOptions:{max:1,minOpacity:1}},s),this.channelFunc=i,this.visible=!0,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.clusterLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.zoomStartCb=this._zoomStartCb.bind(this),this.zoomEndCb=this._zoomEndCb.bind(this)}draw(t){return this.visible=!0,this.options=Object.assign(this.options,t),this.initMarkers(),this.redraw()}redraw(){if(this.visible){if(this.layer&&this.layer.remove(),this.options.isCluster&&"point"===this.options.renderType)this.layer=this.configClusterLayer();else switch(this.options.renderType){case"point":this.layer=this.configMarkerLayer();break;case"cluster":this.layer=this.configClusterLayer();break;case"heat":this.layer=this.configHeatLayer();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.map.addLayer(this.layer),this}}setData(t){this.dataList=t}setOptions(t,e=!1){this.options=Object.assign(this.options,t),e&&this.redraw()}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.map(t=>[t.getLatLng().lat,t.getLatLng().lng])}destroy(){this.layer&&this.map.removeLayer(this.layer),this.map.off("zoomstart",this.zoomStartCb),this.map.off("zoomend",this.zoomEndCb)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):this.map.removeLayer(this.layer))}changeColor(t){this.options.iconColor=t,this.redraw()}changeIcon(t){this.options.iconUnicode=t,this.redraw()}pitch(t){this.markers.forEach(e=>{e.getData().id!==t||e.fire("click")})}_zoomStartCb(){this.visible&&("marker"===this.type&&("point"!==this.options.renderType||this.options.isCluster)||this.map.removeLayer(this.markerLayer))}_zoomEndCb(){this.visible&&("marker"===this.type&&("point"!==this.options.renderType||this.options.isCluster)||this.map.addLayer(this.markerLayer))}configMarkerLayer(){this.markerLayer&&this.markerLayer.remove();const t=L.canvasIconLayer({}).addTo(this.map);return t.addOnClickListener((t,[{data:e}])=>{this.markerClickHandler(e)}),t.addOnHoverListener((t,[{data:e}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=e,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr])}),t.addMarkers(this.markers),this.map.on("zoomstart",this.zoomStartCb),this.map.on("zoomend",this.zoomEndCb),this.map.panTo(this.map.getCenter()),this.markerLayer=t,this.markerLayer}getToolTipContent(t){return""+t[this.options.tooltipAttr]}initMarkers(){this.cacheSegmentParams(),this.markers=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],s=new i([e.getLatLng().lat,e.getLatLng().lng],{icon:this.getMarkerIcon(t)});s.setData(t),s.on("click",()=>{this.markerClickHandler(s)}),this.markers.push(s)})}markerClickHandler(t){this.focusedMarker=t,this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new i(t.getLatLng(),{icon:this.getLargerMarkerIcon(t.getData())}),this.focusedDisplayMarker.addTo(this.map),this.focusedDisplayMarker.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayMarker.on("popupclose",()=>{this.focusedDisplayMarker.remove()}),this.map.panTo(this.focusedMarker.getLatLng()),this.channelFunc("on-click-marker",t)}configClusterLayer(){return this.clusterLayer&&this.clusterLayer.remove(),this.clusterLayer=L.markerClusterGroup(),this.clusterLayer.addLayers(this.markers.map(t=>{const e=new i(t.getLatLng(),{icon:this.getMarkerIcon(t.getData())});return e.setData(t.getData()),e.bindTooltip(""+e.getData()[this.options.tooltipAttr]),e.bindPopup(this.getPopupContent(e.getData())),e.on("click",()=>{this.markerClickHandler(e)}),e})),this.clusterLayer}configHeatLayer(){return this.heatLayer&&this.heatLayer.remove(),this.markers.forEach(t=>{const e=t.getLatLng(),s=this.options.heatOptions&&this.options.heatOptions.dimensionAttr;let i=s&&t.getData()[s]||this.options.heatOptions.max;"number"!=typeof i&&(i=this.options.heatOptions.max),t.setLatLng(L.latLng(e.lat,e.lng,i))}),this.heatLayer=L.heatLayer(this.markers.map(t=>t.getLatLng()),Object.assign({},this.options.heatOptions,{minOpacity:1})),this.heatLayer}getLargerMarkerIcon(t){return this._getMarkerIcon(t,!0)}getMarkerIcon(t){return this._getMarkerIcon(t,!1)}_getMarkerIcon(t,e){const s=this.options.iconSize,i=this.options.iconAnchor,o=[1.5*s[0],1.5*s[1]],n=[1.5*i[0],1.5*i[1]],r=this.options.iconColor;switch(this.options.iconType){case"image":case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(t,{iconSize:e?o:s,iconColor:r}),className:e?"large-div-icon-marker":"",iconSize:e?o:s,iconAnchor:e?n:i,tooltipAnchor:e?[0,-n[1]/2]:[0,-i[1]/2],popupAnchor:e?[0,-n[1]/2]:[0,-i[1]/2]});default:throw new Error(`renderType 不能为 ${this.options.iconType}`)}}getCustomIconHTML(t,e){if(this.options.iconRenderer)return e=Object.assign({},this.options,e),this.options.iconRenderer(t,e);switch(this.options.renderPointColorType){case"single":switch(this.options.iconType){case"font_class":return`\n              <i class="${this.options.iconClass}"\n                style="\n                  color: ${e.iconColor};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${e.iconColor};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                >\n                ${this.options.iconUnicode}\n              </i>\n            `}break;case"segmented":switch(this.options.iconType){case"font_class":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(t)};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(t)};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                >\n                ${this.options.iconUnicode}\n              </i>\n            `}break;default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const i=t[this.options.segmentedAttr];e=Math.max(e,i),s=Math.min(s,i)}const i=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=i}getSegmentedMarkerColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}}class n extends o{constructor(t,e,s,i){super(t,e,s,i),this.type="markerBuffer";this.options=Object.assign(this.options,{bufferOptions:{radius:1e3,stroke:!0,weight:1}},s)}draw(t){return this.options=Object.assign(this.options,t),this.options.bufferOptions.color=this.options.iconColor,this.initMarkers(),this.redraw()}redraw(){if(this.visible)return this.markerLayer&&this.map.removeLayer(this.markerLayer),this.bufferLayer&&this.map.removeLayer(this.bufferLayer),this.markerLayer=this.configMarkerLayer(),this.bufferLayer=this.configBufferLayer(),this.layer=L.layerGroup(),this.layer.addLayer(this.markerLayer),this.layer.addLayer(this.bufferLayer),this.map.addLayer(this.layer),this}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.reduce((t,e)=>t.extend(e.getLatLng().toBounds(this.options.bufferOptions.radius)),this.markers[0].getLatLng().toBounds(this.options.bufferOptions.radius))}configBufferLayer(){const t=L.layerGroup();return this.markers.forEach(e=>{const s=L.circle(e.getLatLng(),this.options.bufferOptions);if(this.options.bufferTooltipAttr)s.bindTooltip(""+e.getData()[this.options.bufferTooltipAttr]);else switch(typeof this.options.popupAttr){case"string":s.bindTooltip(""+e.getData()[this.options.popupAttr]);break;case"object":s.bindTooltip(""+e.getData()[this.options.popupAttr.value])}t.addLayer(s)}),t}}class r extends L.Polyline{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class a{constructor(t,e,s,i){this.type="polyline",this.map=t,this.dataList=e,this.options=s,this.channelFunc=i,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{color:"#3388FF",renderPolylineColorType:"single",segmentedColors:["#3388FF"]},s)}draw(t){return this.options=Object.assign(this.options,t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),this.polylines[0].getBounds())}destroy(){this.layer&&this.map.removeLayer(this.layer)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):this.map.removeLayer(this.layer))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polylines.forEach(e=>{e.getData().id!==t||e.fire("click")})}initPolylines(){this.cacheSegmentParams(),this.polylines=this.dataList.map(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],s=new r(e.getLatLngs());return s.setData(t),s})}getSegmentedPolylineColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polylineClickHandler(t){this.channelFunc("on-click-polyline",t)}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}configPolylineLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{let e=this.options.color;"segmented"===this.options.renderPolylineColorType&&(e=this.getSegmentedPolylineColor(t.getData()));const s=Object.assign({},this.options,{color:e}),i=new r(t.getLatLngs(),s);i.on("click",()=>{this.polylineClickHandler(t)}),i.setData(t.getData()),this.options.tooltipAttr&&i.bindTooltip(this.getToolTipContent(i.getData())),this.options.popupAttr&&i.bindPopup(this.getPopupContent(i.getData())),this.polylineLayer.addLayer(i)}),this.polylineLayer}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const i=t[this.options.segmentedAttr];e=Math.max(e,i),s=Math.min(s,i)}const i=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=i}}class h extends a{constructor(t,e,s,i){super(t,e,s,i);this.type="polylineBuffer",this.map=t,this.dataList=e,this.options=s,this.channelFunc=i,this.visible=!0,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolylineColorType:"single",segmentedColors:["#3388FF"],corridor:100,color:"#3388FF",opacity:.5},s)}draw(t){return this.options=Object.assign(this.options,t),this.initPolylines(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolylineBufferLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),this.polylines[0].getBounds())}changeColor(t){this.options.color=t,this.redraw()}configPolylineBufferLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{t.on("click",()=>{this.polylineClickHandler(t)});const e=Object.assign({},this.options,{color:"single"===this.options.renderPolylineColorType?this.options.color:this.getSegmentedPolylineColor(t.getData())}),s=L.corridor(t.getLatLngs().map(t=>L.latLng([t.lat,t.lng])),e);this.options.tooltipAttr&&s.bindTooltip(this.getToolTipContent(t.getData())),this.polylineLayer.addLayer(s)}),this.polylineLayer}}class p extends L.Polygon{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class l{constructor(t,e,s,i){this.type="polygon",this.map=t,this.dataList=e,this.options=s,this.channelFunc=i,this.visible=!0,this.polygons=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{color:"#3388FF",fillColor:"#3388FF",opacity:.3,renderPolygonColorType:"single",segmentedColors:["#3388FF"]},s)}draw(t){return this.options=Object.assign(this.options,t),this.initPolygons(),this.redraw()}redraw(){if(this.visible)return this.layer&&this.layer.remove(),this.layer=this.configPolygonLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polygons.length<=0?this.map.getBounds():this.polygons.reduce((t,e)=>t.extend(e.getBounds()),this.polygons[0].getBounds())}destroy(){this.layer&&this.map.removeLayer(this.layer)}toggleVisible(t){this.visible=t,this.layer&&(t?this.map.addLayer(this.layer):this.map.removeLayer(this.layer))}changeColor(t){this.options.fillColor=t,this.redraw()}pitch(t){this.polygons.forEach(e=>{e.getData().id!==t||e.fire("click")})}getToolTipContent(t){return""+t[this.options.tooltipAttr]}getPopupContent(t){return this.options.popupAttr?"string"==typeof this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:"object"==typeof this.options.popupAttr?`${this.options.popupAttr.label}: ${t[this.options.popupAttr.value]}`:void 0:""}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const i=t[this.options.segmentedAttr];e=Math.max(e,i),s=Math.min(s,i)}const i=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=i}getSegmentedPolygonColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[parseInt(""+(e-this.segmentedMin)/this.segmentedStep,10)]}polygonClickHandler(t){this.channelFunc("on-click-polygon",t)}initPolygons(){this.cacheSegmentParams(),this.polygons=[],this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],s=new p(e.getLatLngs());s.setData(t),this.polygons.push(s)})}configPolygonLayer(){return this.polygonLayer=L.layerGroup(),this.polygons.forEach(t=>{let e=this.options.color,s=this.options.fillColor;"segmented"===this.options.renderPolygonColorType&&(s=e=this.getSegmentedPolygonColor(t.getData()));const i=Object.assign({},this.options,{color:e,fillColor:s}),o=new p(t.getLatLngs(),i);o.setData(t.getData()),o.on("click",()=>{this.polygonClickHandler(t)}),this.options.tooltipAttr&&o.bindTooltip(this.getToolTipContent(o.getData())),this.options.popupAttr&&o.bindPopup(this.getPopupContent(o.getData())),this.polygonLayer.addLayer(o)}),this.polygonLayer}}class c{constructor(t,e,s,i){this.map=t,this.dynamicDataList=e,this.options=s,this.channelFunc=i,this.currentStep=0,this.isPause=!0}restart(){this.isPause=!1,this.currentStep=0,this.gotoStep(this.currentStep),this.start()}start(){this.isPause=!1,this.options.auto&&setTimeout(()=>{if(!this.isPause)if(this.currentStep>=this.dynamicDataList.length-1){if(!this.options.loop)return;this.restart()}else this.currentStep++,this.gotoStep(this.currentStep),this.start()},this.options.interval)}pause(){this.isPause=!0}prev(){this.currentStep--,this.currentStep=(this.currentStep+this.dynamicDataList.length)%this.dynamicDataList.length,this.gotoStep(this.currentStep)}next(){this.currentStep++,this.currentStep=this.currentStep%this.dynamicDataList.length,this.gotoStep(this.currentStep)}gotoStep(t){if(t<0||t>=this.dynamicDataList.length)throw new Error(`gotoStep(${t}): step is out of index `);this.layer.setData(this.dynamicDataList[t]),this.layer.draw()}draw(t){return this.initOptions(t),this.initLayer(),this.layer.draw(),this}initOptions(t){this.options=Object.assign({loop:!1,auto:!1,interval:1e3},this.options,t)}initLayer(){const t={renderType:"heat",heatOptions:this.options};return this.layer=new o(this.map,this.dynamicDataList[0],t,this.channelFunc),this.layer}}s.d(e,"Marker",function(){return i}),s.d(e,"MarkersLayer",function(){return o}),s.d(e,"MarkersBufferLayer",function(){return n}),s.d(e,"Polyline",function(){return r}),s.d(e,"PolylinesLayer",function(){return a}),s.d(e,"PolylinesBufferLayer",function(){return h}),s.d(e,"Polygon",function(){return p}),s.d(e,"PolygonsLayer",function(){return l}),s.d(e,"DynamicHeatLayer",function(){return c});e.default={Marker:i,MarkersLayer:o,MarkersBufferLayer:n,Polyline:r,PolylinesLayer:a,PolylinesBufferLayer:h,Polygon:p,PolygonsLayer:l,DynamicHeatLayer:c}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,