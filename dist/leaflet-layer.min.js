!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.leafletMap=e():t.leafletMap=e()}(window,function(){return function(t){var e={};function s(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=t,s.c=e,s.d=function(t,e,n){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(n,r,function(e){return t[e]}.bind(null,r));return n},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class n extends L.Marker{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class r{constructor(t,e,s,n){this.map=t,this.dataList=e,this.options=Object.assign({},{renderType:"point",renderPointColorType:"single",iconType:"unicode",iconSize:[20,20],iconClass:"iconfont",iconColor:"#3388FF",iconAnchor:[10,10],segmentedColors:["#3388FF"]},s),this.channelFunc=n,this.layer=null,this.focusedMarker=null,this.hoveredMarker=null,this.focusedDisplayMarker=null,this.markers=[],this.markerLayer=null,this.heatLayer=null,this.clusterLayer=null,this.segmentedMin=1/0,this.segmentedStep=1,this.cacheSegmentParams(),this.initMarkers()}draw(t){return this.options=Object.assign(this.options,t),this.redraw()}redraw(){switch(this.layer&&this.map.removeLayer(this.layer),this.options.renderType){case"point":this.layer=this.configMarkerLayer();break;case"cluster":this.layer=this.configClusterLayer();break;case"heat":this.layer=this.configHeatLayer();break;default:throw new Error(`renderType 不支持"${this.options.renderType}"`)}return this.map.addLayer(this.layer),this}setOptions(t,e=!1){this.options=Object.assign(this.options,t),e&&this.redraw()}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.markers.length<=0?this.map.getBounds():this.markers.map(t=>[t.getLatLng().lng,t.getLatLng().lat])}destroy(){this.layer&&this.layer.remove()}toggleVisible(t){this.layer||this.draw(),t?this.map.removeLayer(this.layer):this.map.addLayer(this.layer)}configMarkerLayer(){const t=L.canvasIconLayer({}).addTo(this.map);return t.addOnClickListener((t,[{data:e}])=>{this.markerClickHandler(e)}),t.addOnHoverListener((t,[{data:e}])=>{this.hoveredMarker&&this.hoveredMarker.closeTooltip(),this.hoveredMarker=e,this.hoveredMarker.getTooltip()?this.hoveredMarker.openTooltip():this.options.tooltipAttr&&this.hoveredMarker.bindTooltip(""+this.hoveredMarker.getData()[this.options.tooltipAttr])}),t.addMarkers(this.markers),this.map.on("zoomstart",()=>{this.map.removeLayer(this.markerLayer)}),this.map.on("zoomend",()=>{this.map.addLayer(this.markerLayer)}),setTimeout(()=>{this.map.panTo(this.map.getCenter())}),this.markerLayer=t,this.markerLayer}initMarkers(){this.dataList.forEach(t=>{const e=L.geoJSON(t.geometry).getLayers()[0],s=new n([e.getLatLng().lng,e.getLatLng().lat],{icon:this.getMarkerIcon(t)});s.setData(t),this.markers.push(s)})}markerClickHandler(t){this.focusedMarker=t,this.focusedDisplayMarker&&this.focusedDisplayMarker.removeFrom(this.map),this.focusedDisplayMarker=new n(t.getLatLng(),{icon:this.getLargerMarkerIcon(t.getData())}),this.focusedDisplayMarker.addTo(this.map),this.focusedDisplayMarker.bindPopup(this.getPopupContent(t.getData())).openPopup(),this.focusedDisplayMarker.on("popupclose",()=>{this.focusedDisplayMarker.remove()}),this.map.panTo(this.focusedMarker.getLatLng()),this.channelFunc("on-click-marker",t)}configClusterLayer(){return this.clusterLayer=L.markerClusterGroup(),this.clusterLayer.addLayers(this.markers.map(t=>{const e=new n(t.getLatLng(),{icon:this.getMarkerIcon(t.getData())});return e.setData(t.getData()),e.bindTooltip(""+e.getData()[this.options.tooltipAttr]),e.on("click",()=>{this.markerClickHandler(e)}),e})),this.clusterLayer}configHeatLayer(){return this.markers.forEach(t=>{const e=t.getLatLng();let s=t.getData()[this.options.heatOptions.dimensionAttr];"number"!=typeof s&&(s=this.options.heatOptions.max),t.setLatLng(L.latLng(e.lat,e.lng,s))}),this.heatLayer=L.heatLayer(this.markers.map(t=>t.getLatLng()),this.options.heatOptions),this.heatLayer}getLargerMarkerIcon(t){return this._getMarkerIcon(t,!0)}getMarkerIcon(t){return this._getMarkerIcon(t,!1)}_getMarkerIcon(t,e){let s=this.options.iconSize,n=this.options.iconAnchor;s=e?[1.5*s[0],1.5*s[1]]:s,n=e?[1.5*n[0],1.5*n[1]]:n;const r=this.options.iconColor;switch(this.options.iconType){case"image":return L.icon({iconUrl:this.options.iconImageUrl,iconSize:s,iconAnchor:n});case"font_class":case"symbol":case"unicode":return L.divIcon({html:this.getCustomIconHTML(t,{iconSize:s,iconColor:r}),className:e?"large-div-icon-marker":"",iconSize:s,iconAnchor:n});default:throw new Error(`图标类型不支持"${this.options.iconType}"`)}}getCustomIconHTML(t,e){if(this.options.iconRenderer)return e=Object.assign({},this.options,e),this.options.iconRenderer(t,e);switch(this.options.renderPointColorType){case"single":switch(this.options.iconType){case"font_class":return`\n              <i class="${this.options.iconClass}"\n                style="\n                  color: ${e.iconColor};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${e.iconColor};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                >\n                ${this.options.iconUnicode}\n              </i>\n            `}break;case"segmented":switch(this.options.iconType){case"font_class":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(t)};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                />\n            `;case"symbol":return`\n              <svg class="icon-symbol" aria-hidden="true">\n                <use xlink:href="${this.options.iconSymbol}" />\n              </svg>\n            `;case"unicode":return`\n              <i\n                class="${this.options.iconClass}"\n                style="\n                  color: ${this.getSegmentedMarkerColor(t)};\n                  font-size: ${e.iconSize[0]}px;\n                "\n                >\n                ${this.options.iconUnicode}\n              </i>\n            `}break;default:throw new Error(`renderPointColorType 不支持"${this.options.renderPointColorType}"`)}}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const n=t[this.options.segmentedAttr];e=Math.max(e,n),s=Math.min(s,n)}const n=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=n}getSegmentedMarkerColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[(e-this.segmentedMin)/this.segmentedStep]}getPopupContent(t){return this.options.popupAttr?`${this.options.popupAttr}: ${t[this.options.popupAttr]}`:""}}class i extends r{constructor(t,e,s,n){super(t,e,s,n);this.options=Object.assign(this.options,{bufferOptions:{radius:1e3,stroke:!1}},s)}draw(t){return this.options=Object.assign(this.options,t),this.redraw()}redraw(){return this.markerLayer&&this.map.removeLayer(this.markerLayer),this.bufferLayer&&this.map.removeLayer(this.bufferLayer),this.markerLayer=this.configMarkerLayer(),this.bufferLayer=this.configBufferLayer(),this.map.addLayer(this.markerLayer),this.map.addLayer(this.bufferLayer),this}configBufferLayer(){const t=L.layerGroup();return this.markers.forEach(e=>{const s=L.circle(e.getLatLng(),this.options.bufferOptions);t.addLayer(s)}),t}}class o extends L.Polyline{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class a{constructor(t,e,s,n){this.map=t,this.dataList=e,this.options=s,this.channelFunc=n,this.polylines=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolylineColorType:"single",segmentedColors:["#3388FF"]},s),this.cacheSegmentParams(),this.initPolylines()}draw(t){return this.options=Object.assign(this.options,t),this.redraw()}redraw(){return this.layer&&this.map.removeLayer(this.layer),this.layer=this.configPolylineLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polylines.length<=0?this.map.getBounds():this.polylines.reduce((t,e)=>t.extend(e.getBounds()),this.polylines[0].getBounds())}destroy(){this.layer&&this.layer.remove()}toggleVisible(t){this.layer||this.draw(),t?this.map.removeLayer(this.layer):this.map.addLayer(this.layer)}initPolylines(){this.dataList.forEach(t=>{this.cacheSegmentParams();const e=L.geoJSON(t.geometry).getLayers()[0],s=new o(e.getLatLngs());s.setData(t),this.polylines.push(s)})}configPolylineLayer(){return this.polylineLayer=L.layerGroup(),this.polylines.forEach(t=>{t.on("click",()=>{this.polylineClickHandler(t)});const e=Object.assign({},this.options,{color:this.getSegmentedPolylineColor(t.getData())}),s=new o(t.getLatLngs(),e);this.polylineLayer.addLayer(s)}),this.polylineLayer}polylineClickHandler(t){this.channelFunc("on-click-polyline",t)}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const n=t[this.options.segmentedAttr];e=Math.max(e,n),s=Math.min(s,n)}const n=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=n}getSegmentedPolylineColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[(e-this.segmentedMin)/this.segmentedStep]}}class h extends L.Polygon{constructor(t,e){super(t,e)}setData(t){this.__data=t}getData(){return this.__data}}class l{constructor(t,e,s,n){this.map=t,this.dataList=e,this.options=s,this.channelFunc=n,this.polygons=[],this.segmentedMin=1/0,this.segmentedStep=1,this.options=Object.assign({},{renderPolygonColorType:"single",segmentedColors:["#3388FF"]},s),this.cacheSegmentParams(),this.initPolygons()}draw(t){return this.options=Object.assign(this.options,t),this.redraw()}redraw(){return this.layer&&this.map.removeLayer(this.layer),this.layer=this.configPolygonLayer(),this.map.addLayer(this.layer),this}fitBounds(){this.map.fitBounds(this.getBounds())}getBounds(){return this.polygons.length<=0?this.map.getBounds():this.polygons.reduce((t,e)=>t.extend(e.getBounds()),this.polygons[0].getBounds())}destroy(){this.layer&&this.layer.remove()}toggleVisible(t){this.layer||this.draw(),t?this.map.removeLayer(this.layer):this.map.addLayer(this.layer)}initPolygons(){this.dataList.forEach(t=>{this.cacheSegmentParams();const e=L.geoJSON(t.geometry).getLayers()[0],s=new h(e.getLatLngs());s.setData(t),this.polygons.push(s)})}configPolygonLayer(){return this.polygonLayer=L.layerGroup(),this.polygons.forEach(t=>{t.on("click",()=>{this.polygonClickHandler(t)});const e=Object.assign({},this.options,{color:this.getSegmentedPolygonColor(t.getData())}),s=new h(t.getLatLngs(),e);this.polygonLayer.addLayer(s)}),this.polygonLayer}polygonClickHandler(t){this.channelFunc("on-click-polygon",t)}cacheSegmentParams(){const t=this.options.segmentedColors.length;let e=-1/0,s=1/0;for(const t of this.dataList){const n=t[this.options.segmentedAttr];e=Math.max(e,n),s=Math.min(s,n)}const n=(e-s+1)/t;this.segmentedMin=s,this.segmentedStep=n}getSegmentedPolygonColor(t){const e=t[this.options.segmentedAttr];return this.options.segmentedColors[(e-this.segmentedMin)/this.segmentedStep]}}s.d(e,"Marker",function(){return n}),s.d(e,"MarkersLayer",function(){return r}),s.d(e,"MarkersBufferLayer",function(){return i}),s.d(e,"Polyline",function(){return o}),s.d(e,"PolylinesLayer",function(){return a}),s.d(e,"Polygon",function(){return h}),s.d(e,"PolygonsLayer",function(){return l});e.default={Marker:n,MarkersLayer:r,MarkersBufferLayer:i,Polyline:o,PolylinesLayer:a,Polygon:h,PolygonsLayer:l}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,